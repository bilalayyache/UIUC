;
; The code given to you here implements the histogram calculation that
; we developed in class.  In programming studio, we will add code that
; prints a number in hexadecimal to the monitor.
;
; Your assignment for this program is to combine these two pieces of
; code to print the histogram to the monitor.
;
; If you finish your program,
;    ** commit a working version to your repository  **
;    ** (and make a note of the repository version)! **


	.ORIG	x3000		; starting address is x3000


;
; Count the occurrences of each letter (A to Z) in an ASCII string
; terminated by a NUL character.  Lower case and upper case should
; be counted together, and a count also kept of all non-alphabetic
; characters (not counting the terminal NUL).
;
; The string starts at x4000.
;
; The resulting histogram (which will NOT be initialized in advance)
; should be stored starting at x3F00, with the non-alphabetic count
; at x3F00, and the count for each letter in x3F01 (A) through x3F1A (Z).
;
; table of register use in this part of the code
;    R0 holds a pointer to the histogram (x3F00)
;    R1 holds a pointer to the current position in the string
;       and as the loop count during histogram initialization
;    R2 holds the current character being counted
;       and is also used to point to the histogram entry
;    R3 holds the additive inverse of ASCII '@' (xFFC0)
;    R4 holds the difference between ASCII '@' and 'Z' (xFFE6)
;    R5 holds the difference between ASCII '@' and '`' (xFFE0)
;    R6 is used as a temporary register
;

						LD R0,HIST_ADDR      	; point R0 to the start of the histogram

						; fill the histogram with zeroes
						AND R6,R6,#0		; put a zero into R6
						LD R1,NUM_BINS		; initialize loop count to 27
						ADD R2,R0,#0		; copy start of histogram into R2

						; loop to fill histogram starts here
HFLOOP			STR R6,R2,#0		; write a zero into histogram
						ADD R2,R2,#1		; point to next histogram entry
						ADD R1,R1,#-1		; decrement loop count
						BRp HFLOOP		; continue until loop count reaches zero

						; initialize R1, R3, R4, and R5 from memory
						LD R3,NEG_AT		; set R3 to additive inverse of ASCII '@'
						LD R4,AT_MIN_Z		; set R4 to difference between ASCII '@' and 'Z'
						LD R5,AT_MIN_BQ		; set R5 to difference between ASCII '@' and '`'
						LD R1,STR_START		; point R1 to start of string

						; the counting loop starts here
COUNTLOOP
						LDR R2,R1,#0		; read the next character from the string
						BRz PRINT_HIST		; found the end of the string

						ADD R2,R2,R3		; subtract '@' from the character
						BRp AT_LEAST_A		; branch if > '@', i.e., >= 'A'
NON_ALPHA
						LDR R6,R0,#0		; load the non-alpha count
						ADD R6,R6,#1		; add one to it
						STR R6,R0,#0		; store the new non-alpha count
						BRnzp GET_NEXT		; branch to end of conditional structure
AT_LEAST_A
						ADD R6,R2,R4		; compare with 'Z'
						BRp MORE_THAN_Z         ; branch if > 'Z'

; note that we no longer need the current character
; so we can reuse R2 for the pointer to the correct
; histogram entry for incrementing
ALPHA				ADD R2,R2,R0		; point to correct histogram entry
						LDR R6,R2,#0		; load the count
						ADD R6,R6,#1		; add one to it
						STR R6,R2,#0		; store the new count
						BRnzp GET_NEXT		; branch to end of conditional structure

; subtracting as below yields the original character minus '`'
MORE_THAN_Z
						ADD R2,R2,R5		; subtract '`' - '@' from the character
						BRnz NON_ALPHA		; if <= '`', i.e., < 'a', go increment non-alpha
						ADD R6,R2,R4		; compare with 'z'
						BRnz ALPHA		; if <= 'z', go increment alpha count
						BRnzp NON_ALPHA		; otherwise, go increment non-alpha

GET_NEXT
						ADD R1,R1,#1		; point to next character in string
						BRnzp COUNTLOOP		; go to start of counting loop



PRINT_HIST

; you will need to insert your code to print the histogram here

; This part of code will print out a histogram using the value that have
; been stored in memory from location x3F00.
; Table of register use in this part of the code
; (functions of R0 - R4 are the same as they are in Lab1)
;R0   Used to print out ASCII character
;R1   Used as a digit counter
;     and also used to hold the ASCII of '@'
;R2   Used as a bit counter
;			and also used to hold the histogram address that is ready to be printed
;R3   Store the value that needed to be printed out
;R4   Store the current digit that we need to print out
;R5		Countdown counter during print out of the histogram
;R6		Counter used to point to the histogram entry

						AND R6, R6, #0							;Initialize R0
						LD R5, NUM_BINS							;Initialize R5
NEXT_LINE		BRnz DONE
						LD R1, ASCII_AT
						ADD R0, R1, R6							;Ready to print the char of every row
						OUT
						LD R0, ASCII_SP							;Ready to print space
						OUT

						;Ready to print the counts stored in the memory (lab1)
						;First set R2 to be the address of the value to be printed
						LD R2, HIST_ADDR
						ADD R2, R2, R6
						;Initialize R3
						LDR R3, R2, #0

						;Begin LAB1 content
            ;Initialize digit counter R1
            AND R1, R1, #0
            ADD R1, R1, #4
NEXT_digit  BRnz DONE_LINE              ;To check whether 4 digits have already been printed out
            AND R2, R2, #0              ;Initialize R2
            AND R4, R4, #0              ;Initialize R4
            ADD R2, R2, #4
NEXT_bit    BRnz DONE_digit             ;To check whether 4 times of left shift have been done
            ADD R4, R4, R4              ;Shift R4 left for one bit
            ADD R3, R3, #0              ;Check the first digit of R3 is 1 or 0
            BRzp POSITIVE               ;If positive, go to POSITIVE
            ADD R4, R4, #1              ;If negative, add 1 to R4
POSITIVE    ADD R3, R3, R3              ;Shift R3 left for one bit
            ADD R2, R2, #-1             ;Decrease bit counter by 1
            BRnzp NEXT_bit

DONE_digit  ADD R4, R4, #-10            ;Ready to compare R4 and #10
            BRn NUMBER                  ;If R4 < 10, ready to print the number
            LD R0, ASCII_A              ;R0 is the ASCII code for 'A'
            ADD R0, R0, R4              ;R0 is now the ASCII code for what stored in R4
            BRnzp PRINT                 ;Print the character

NUMBER      LD R0, ASCII_0
            ADD R4, R4, #10             ;Recover R4
            ADD R0, R0, R4              ;R0 is the ASCII code for what stored in R4
PRINT       OUT                         ;Print the hex
            ADD R1, R1, #-1
            BRnzp NEXT_digit

DONE_LINE		LD R0, ASCII_NL							;Ready to print newline
						OUT
						ADD R6, R6, #1							;R6 points to the next value
						ADD R5, R5, #-1							;Reduce R5 by 1
						BRnzp NEXT_LINE

DONE        HALT												;Done


; the data needed by the program
NUM_BINS	.FILL #27							; 27 loop iterations
NEG_AT		.FILL xFFC0						; the additive inverse of ASCII '@'
AT_MIN_Z	.FILL xFFE6						; the difference between ASCII '@' and 'Z'
AT_MIN_BQ	.FILL xFFE0						; the difference between ASCII '@' and '`'
HIST_ADDR	.FILL x3F00     			; histogram starting address
STR_START	.FILL x4000						; string starting address
ASCII_0   .FILL x0030						; ASCII number of '0'
ASCII_A   .FILL x0041 					; ASCII number of 'A'
ASCII_NL 	.FILL	x000A						; ASCII number of newline
ASCII_SP	.FILL x0020						; ASCII number of space
ASCII_AT	.FILL x0040						; ASCII number of '@'


; for testing, you can use the lines below to include the string in this
; program...
; STR_START	.FILL STRING	; string starting address
; STRING		.STRINGZ "This is a test of the counting frequency code.  AbCd...WxYz."



	; the directive below tells the assembler that the program is done
	; (so do not write any code below it!)

	.END
