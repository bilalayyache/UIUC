
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x000123fc memsz 0x000123fc flags r-x
    LOAD off    0x0001341c vaddr 0x1001241c paddr 0x10013f08 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x000159f4 vaddr 0x100159f4 paddr 0x100159f4 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011774  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a78  100119a4  100119a4  000129a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  1001241c  10013f08  0001341c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  100159f4  100159f4  000159f4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00014f08  2**0
                  CONTENTS
  7 .sdram        00000000  10015b58  10015b58  00014f08  2**0
                  CONTENTS
  8 .comment      00000046  00000000  00000000  00014f08  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f18  00000000  00000000  00014f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000236ad  00000000  00000000  00015e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000090c8  00000000  00000000  00039515  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b83e  00000000  00000000  000425dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002384  00000000  00000000  0004de1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000039ff  00000000  00000000  000501a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001786c  00000000  00000000  00053b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0006b40c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018d0  00000000  00000000  0006b450  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000700be  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000700c1  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000700cd  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000700ce  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000700cf  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000700d3  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000700d7  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000700db  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000700e6  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000700f1  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  000700fc  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000000e  00000000  00000000  00070104  2**0
                  CONTENTS, READONLY
 30 .jdi          0000411b  00000000  00000000  00070112  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00071c01  00000000  00000000  0007422d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
100119a4 l    d  .rodata	00000000 .rodata
1001241c l    d  .rwdata	00000000 .rwdata
100159f4 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10015b58 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
100159f4 l     O .bss	00000002 ctl_reg.3318
100159f6 l     O .bss	00000002 no_device.3319
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10012162 l     O .rodata	00000010 zeroes.4404
10004714 l     F .text	000000bc __sbprintf
10012172 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10004924 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1000647c l     F .text	00000008 __fp_unlock
10006490 l     F .text	0000019c __sinit.part.1
1000662c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
1001241c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10012860 l     O .rwdata	00000020 lc_ctype_charset
10012840 l     O .rwdata	00000020 lc_message_charset
10012880 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
100121a4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
10009b00 l     F .text	000000fc __sprint_r.part.0
100122c8 l     O .rodata	00000010 zeroes.4349
1000b13c l     F .text	000000bc __sbprintf
100122d8 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000f184 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000f298 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000f2c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000f3b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000f4a0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000f58c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000f768 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10013ef8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
1000fa0c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000fb48 l     F .text	00000034 alt_dev_reg
10012e68 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000fe24 l     F .text	0000020c altera_avalon_jtag_uart_irq
10010030 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1001090c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10010d6c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10010ecc l     F .text	0000003c alt_get_errno
10010f08 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10015a2c g     O .bss	00000004 alt_instruction_exception_handler
10009144 g     F .text	00000074 _mprec_log10
10009230 g     F .text	0000008c __any_on
1000b6f0 g     F .text	00000054 _isatty_r
100121b0 g     O .rodata	00000028 __mprec_tinytens
1000f6a4 g     F .text	0000007c alt_main
100022b0 g     F .text	000000c0 _puts_r
10015a58 g     O .bss	00000100 alt_irq
1000b744 g     F .text	00000060 _lseek_r
10013f08 g       *ABS*	00000000 __flash_rwdata_start
1000db5c g     F .text	00000088 .hidden __eqdf2
10015b58 g       *ABS*	00000000 __alt_heap_start
10002274 g     F .text	0000003c printf
1000b95c g     F .text	0000009c _wcrtomb_r
100099c0 g     F .text	0000005c __sseek
100067dc g     F .text	00000010 __sinit
1000b804 g     F .text	00000140 __swbuf_r
100072b0 g     F .text	0000007c _setlocale_r
10006634 g     F .text	00000078 __sfmoreglue
1000f744 g     F .text	00000024 __malloc_unlock
10002148 g     F .text	00000080 UsbGetRetryCnt
10007f80 g     F .text	0000015c memmove
1000026c g     F .text	00000084 IO_init
100067c4 g     F .text	00000018 _cleanup
10008204 g     F .text	000000a8 _Balloc
1000dbe4 g     F .text	000000dc .hidden __gtdf2
100112f4 g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000b694 g     F .text	0000005c _fstat_r
10015a10 g     O .bss	00000004 errno
1000993c g     F .text	00000008 __seofread
10015a18 g     O .bss	00000004 alt_argv
1001bec8 g       *ABS*	00000000 _gp
1000f9dc g     F .text	00000030 usleep
10012ce8 g     O .rwdata	00000180 alt_fd_list
10011318 g     F .text	00000090 alt_find_dev
10007e38 g     F .text	00000148 memcpy
10006484 g     F .text	0000000c _cleanup_r
1000ef9c g     F .text	000000dc .hidden __floatsidf
10010e50 g     F .text	0000007c alt_io_redirect
1000dcc0 g     F .text	000000f4 .hidden __ltdf2
100119a4 g       *ABS*	00000000 __DTOR_END__
10002370 g     F .text	00000014 puts
10011574 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10009820 g     F .text	00000074 __fpclassifyd
100090a0 g     F .text	000000a4 __ratio
1000b120 g     F .text	0000001c __vfiprintf_internal
10010228 g     F .text	0000021c altera_avalon_jtag_uart_read
10002244 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000c7fc g     F .text	00000064 .hidden __udivsi3
1000f3f4 g     F .text	000000ac isatty
10012200 g     O .rodata	000000c8 __mprec_tens
1000732c g     F .text	0000000c __locale_charset
10015a0c g     O .bss	00000004 __malloc_top_pad
100017e8 g     F .text	00000264 UsbGetConfigDesc2
10013ed0 g     O .rwdata	00000004 __mb_cur_max
1000735c g     F .text	0000000c _localeconv_r
10008638 g     F .text	0000003c __i2b
10006c60 g     F .text	000004c8 __sfvwrite_r
10009894 g     F .text	00000054 _sbrk_r
1000b7a4 g     F .text	00000060 _read_r
10013ef0 g     O .rwdata	00000004 alt_max_fd
1000b388 g     F .text	000000f0 _fclose_r
1000644c g     F .text	00000030 fflush
10015a08 g     O .bss	00000004 __malloc_max_sbrked_mem
1000c8e0 g     F .text	000008ac .hidden __adddf3
10008e48 g     F .text	0000010c __b2d
1000c140 g     F .text	000005c4 .hidden __umoddi3
1000f5c8 g     F .text	000000dc lseek
10013ec8 g     O .rwdata	00000004 _global_impure_ptr
100092bc g     F .text	00000564 _realloc_r
10015b58 g       *ABS*	00000000 __bss_end
10010c7c g     F .text	000000f0 alt_iic_isr_register
100111ec g     F .text	00000108 alt_tick
1000bb44 g     F .text	000005fc .hidden __udivdi3
1000b5f0 g     F .text	00000024 _fputwc_r
100121d8 g     O .rodata	00000028 __mprec_bigtens
1000841c g     F .text	00000104 __s2b
1000f078 g     F .text	000000a8 .hidden __floatunsidf
10008b88 g     F .text	00000060 __mcmp
10001248 g     F .text	000000fc UsbSetAddress
100067fc g     F .text	00000018 __fp_lock_all
10010c30 g     F .text	0000004c alt_ic_irq_enabled
10011150 g     F .text	0000009c alt_alarm_stop
10015a20 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
10012cc0 g     O .rwdata	00000028 alt_dev_null
100108ec g     F .text	00000020 alt_dcache_flush_all
10008520 g     F .text	00000068 __hi0bits
1000035c g     F .text	00000068 IO_read
1000ef1c g     F .text	00000080 .hidden __fixdfsi
10013f08 g       *ABS*	00000000 __ram_rwdata_end
10013ee8 g     O .rwdata	00000008 alt_dev_list
1000fa48 g     F .text	00000100 write
1001241c g       *ABS*	00000000 __ram_rodata_end
1000f300 g     F .text	000000b8 fstat
1000dcc0 g     F .text	000000f4 .hidden __ledf2
100021c8 g     F .text	0000007c UsbPrintMem
10008900 g     F .text	00000140 __pow5mult
10009c14 g     F .text	0000150c ___vfiprintf_internal_r
10015a00 g     O .bss	00000004 __nlocale_changed
1000c860 g     F .text	00000058 .hidden __umodsi3
10015b58 g       *ABS*	00000000 end
1000fd64 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
100119a4 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000f120 g     F .text	00000064 .hidden __clzsi2
10010444 g     F .text	00000224 altera_avalon_jtag_uart_write
100067ec g     F .text	00000004 __sfp_lock_acquire
10007d54 g     F .text	000000e4 memchr
1000241c g     F .text	000022dc ___vfprintf_internal_r
10001b48 g     F .text	000000fc UsbClassRequest
10006950 g     F .text	00000310 _free_r
10007338 g     F .text	00000010 __locale_mb_cur_max
100117f0 g     F .text	00000180 __call_exitprocs
100159fc g     O .bss	00000004 __mlocale_changed
10013ed4 g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
10015a24 g     O .bss	00000004 _alt_tick_rate
10008a40 g     F .text	00000148 __lshift
10015a28 g     O .bss	00000004 _alt_nticks
1000f7a4 g     F .text	00000104 read
1000fbb4 g     F .text	0000004c alt_sys_init
100116d8 g     F .text	00000118 __register_exitproc
10008674 g     F .text	0000028c __multiply
100100d0 g     F .text	00000068 altera_avalon_jtag_uart_close
1000c8b8 g     F .text	00000028 .hidden __mulsi3
1001241c g       *ABS*	00000000 __ram_rwdata_start
100119a4 g       *ABS*	00000000 __ram_rodata_start
10015a30 g     O .bss	00000028 __malloc_current_mallinfo
10008f54 g     F .text	0000014c __d2b
10001344 g     F .text	00000144 UsbGetDeviceDesc1
1000fc00 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
100114b0 g     F .text	000000c4 alt_get_fd
10010794 g     F .text	00000158 alt_busy_sleep
1000b258 g     F .text	00000054 _close_r
1001165c g     F .text	0000007c memcmp
1000fcc0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10015b58 g       *ABS*	00000000 __alt_stack_base
1000fd10 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
100047d0 g     F .text	00000154 __swsetup_r
1000d18c g     F .text	000009d0 .hidden __divdf3
100066ac g     F .text	00000118 __sfp
100091b8 g     F .text	00000078 __copybits
100128b8 g     O .rwdata	00000408 __malloc_av_
100067f8 g     F .text	00000004 __sinit_lock_release
1000ddb4 g     F .text	0000086c .hidden __muldf3
100098e8 g     F .text	00000054 __sread
100020c4 g     F .text	00000084 UsbWaitTDListDone
100113a8 g     F .text	00000108 alt_find_file
10010948 g     F .text	000000a4 alt_dev_llist_insert
1000f720 g     F .text	00000024 __malloc_lock
1000f92c g     F .text	000000b0 sbrk
100063f0 g     F .text	0000005c _fflush_r
1000b2ac g     F .text	000000dc _calloc_r
100159f4 g       *ABS*	00000000 __bss_start
100080dc g     F .text	00000128 memset
100003c4 g     F .text	00000d3c main
10015a1c g     O .bss	00000004 alt_envp
10015a04 g     O .bss	00000004 __malloc_max_total_mem
1000fc60 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10001a4c g     F .text	000000fc UsbSetConfig
1000b944 g     F .text	00000018 __swbuf
10009a1c g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000b478 g     F .text	00000014 fclose
10004b4c g     F .text	00001688 _dtoa_r
10007548 g     F .text	0000080c _malloc_r
1000bab8 g     F .text	00000030 __ascii_wctomb
10013ef4 g     O .rwdata	00000004 alt_errno
10007128 g     F .text	000000c4 _fwalk
1000c704 g     F .text	00000084 .hidden __divsi3
1000682c g     F .text	00000124 _malloc_trim_r
10001c44 g     F .text	00000144 UsbGetHidDesc
100119a4 g       *ABS*	00000000 __CTOR_END__
10009a24 g     F .text	000000dc strcmp
100119a4 g       *ABS*	00000000 __flash_rodata_start
100119a4 g       *ABS*	00000000 __DTOR_LIST__
1000db5c g     F .text	00000088 .hidden __nedf2
10001154 g     F .text	00000044 UsbRead
1000fb7c g     F .text	00000038 alt_irq_init
1000f8a8 g     F .text	00000084 alt_release_fd
100122e8 g     O .rodata	00000100 .hidden __clz_tab
100159f8 g     O .bss	00000004 _PathLocale
10011610 g     F .text	00000014 atexit
1000b1f8 g     F .text	00000060 _write_r
10007368 g     F .text	00000018 setlocale
10013ecc g     O .rwdata	00000004 _impure_ptr
10015a14 g     O .bss	00000004 alt_argc
100061d4 g     F .text	0000021c __sflush_r
10010a4c g     F .text	00000060 _do_dtors
10007354 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
10008de4 g     F .text	00000064 __ulp
10006814 g     F .text	00000018 __fp_unlock_all
10013ee0 g     O .rwdata	00000008 alt_fs_list
10001d88 g     F .text	0000033c UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
10007380 g     F .text	0000000c localeconv
10010acc g     F .text	00000050 alt_ic_isr_register
10013f08 g       *ABS*	00000000 _edata
10015b58 g       *ABS*	00000000 _end
10001100 g     F .text	00000054 UsbWrite
1000b48c g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
10010138 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10010ba4 g     F .text	0000008c alt_ic_irq_disable
10009944 g     F .text	0000007c __swrite
10013ed8 g     O .rwdata	00000004 __malloc_trim_threshold
10007348 g     F .text	0000000c __locale_msgcharset
10011624 g     F .text	00000038 exit
100071ec g     F .text	000000c4 _fwalk_reent
10008be8 g     F .text	000001fc __mdiff
1000c788 g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
100067f0 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
100002f0 g     F .text	0000006c IO_write
10011970 g     F .text	00000034 _exit
10010668 g     F .text	0000012c alt_alarm_start
1000738c g     F .text	000001bc __smakebuf_r
10002384 g     F .text	00000098 strlen
10010ff4 g     F .text	0000015c open
1000dbe4 g     F .text	000000dc .hidden __gedf2
10013edc g     O .rwdata	00000004 __wctomb
10009bfc g     F .text	00000018 __sprint_r
10010aac g     F .text	00000020 alt_icache_flush_all
10013efc g     O .rwdata	00000004 alt_priority_mask
10010b1c g     F .text	00000088 alt_ic_irq_enable
100046f8 g     F .text	0000001c __vfprintf_internal
1000bae8 g     F .text	0000005c _wctomb_r
1000e620 g     F .text	000008fc .hidden __subdf3
10008588 g     F .text	000000b0 __lo0bits
1000165c g     F .text	0000018c UsbGetConfigDesc1
10013f00 g     O .rwdata	00000008 alt_alarm_list
100109ec g     F .text	00000060 _do_ctors
10001198 g     F .text	000000b0 UsbSoftReset
1000b9f8 g     F .text	000000c0 wcrtomb
1000f1c0 g     F .text	000000d8 close
10001488 g     F .text	000001d4 UsbGetDeviceDesc2
1000f508 g     F .text	00000084 alt_load
1000b614 g     F .text	00000080 fputwc
100067f4 g     F .text	00000004 __sinit_lock_acquire
100082d4 g     F .text	00000148 __multadd
100082ac g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	10969604 	addi	r2,r2,23128
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	10969604 	addi	r2,r2,23128
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0a6d917 	ldw	r2,-25756(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0a6d917 	ldw	r2,-25756(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
1000023c:	d6afb214 	ori	gp,gp,48840
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000244:	10967d14 	ori	r2,r2,23028

    movhi r3, %hi(__bss_end)
10000248:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
1000024c:	18d6d614 	ori	r3,r3,23384

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	000f5080 	call	1000f508 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	000f6a40 	call	1000f6a4 <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
1000026c:	deffff04 	addi	sp,sp,-4
10000270:	df000015 	stw	fp,0(sp)
10000274:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
10000278:	00800804 	movi	r2,32
1000027c:	00c00044 	movi	r3,1
10000280:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000284:	00800c04 	movi	r2,48
10000288:	00c00044 	movi	r3,1
1000028c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10000290:	00801404 	movi	r2,80
10000294:	00c00044 	movi	r3,1
10000298:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
1000029c:	00801004 	movi	r2,64
100002a0:	00c00044 	movi	r3,1
100002a4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
100002a8:	00801c04 	movi	r2,112
100002ac:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
100002b0:	00801804 	movi	r2,96
100002b4:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
100002b8:	00800c04 	movi	r2,48
100002bc:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
100002c0:	00800804 	movi	r2,32
100002c4:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
100002c8:	00800804 	movi	r2,32
100002cc:	00c00044 	movi	r3,1
100002d0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100002d4:	00800c04 	movi	r2,48
100002d8:	00c00044 	movi	r3,1
100002dc:	10c00005 	stb	r3,0(r2)
}
100002e0:	e037883a 	mov	sp,fp
100002e4:	df000017 	ldw	fp,0(sp)
100002e8:	dec00104 	addi	sp,sp,4
100002ec:	f800283a 	ret

100002f0 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
100002f0:	defffd04 	addi	sp,sp,-12
100002f4:	df000215 	stw	fp,8(sp)
100002f8:	df000204 	addi	fp,sp,8
100002fc:	2007883a 	mov	r3,r4
10000300:	2805883a 	mov	r2,r5
10000304:	e0fffe05 	stb	r3,-8(fp)
10000308:	e0bfff0d 	sth	r2,-4(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	// first, get the address from input and set cs, w to be 0 for write the address
	*otg_hpi_address = Address;
1000030c:	00801c04 	movi	r2,112
10000310:	e0fffe03 	ldbu	r3,-8(fp)
10000314:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10000318:	00800c04 	movi	r2,48
1000031c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
10000320:	00801004 	movi	r2,64
10000324:	10000005 	stb	zero,0(r2)

	// second, write the data into the hpi
	*otg_hpi_data = Data;
10000328:	00801804 	movi	r2,96
1000032c:	e0ffff0b 	ldhu	r3,-4(fp)
10000330:	10c00015 	stw	r3,0(r2)

	// finally, turn off the cs, w signals
	*otg_hpi_w = 1;
10000334:	00801004 	movi	r2,64
10000338:	00c00044 	movi	r3,1
1000033c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000340:	00800c04 	movi	r2,48
10000344:	00c00044 	movi	r3,1
10000348:	10c00005 	stb	r3,0(r2)
}
1000034c:	e037883a 	mov	sp,fp
10000350:	df000017 	ldw	fp,0(sp)
10000354:	dec00104 	addi	sp,sp,4
10000358:	f800283a 	ret

1000035c <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
1000035c:	defffd04 	addi	sp,sp,-12
10000360:	df000215 	stw	fp,8(sp)
10000364:	df000204 	addi	fp,sp,8
10000368:	2005883a 	mov	r2,r4
1000036c:	e0bfff05 	stb	r2,-4(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	// first, get the address from input and set cs, w to be 0 for write the address
	*otg_hpi_address = Address;
10000370:	00801c04 	movi	r2,112
10000374:	e0ffff03 	ldbu	r3,-4(fp)
10000378:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
1000037c:	00800c04 	movi	r2,48
10000380:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
10000384:	00801404 	movi	r2,80
10000388:	10000005 	stb	zero,0(r2)

	temp = *otg_hpi_data;
1000038c:	00801804 	movi	r2,96
10000390:	10800017 	ldw	r2,0(r2)
10000394:	e0bffe0d 	sth	r2,-8(fp)

	*otg_hpi_r = 1;
10000398:	00801404 	movi	r2,80
1000039c:	00c00044 	movi	r3,1
100003a0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100003a4:	00800c04 	movi	r2,48
100003a8:	00c00044 	movi	r3,1
100003ac:	10c00005 	stb	r3,0(r2)
	// printf("%x\n",temp);
	return temp;
100003b0:	e0bffe0b 	ldhu	r2,-8(fp)
}
100003b4:	e037883a 	mov	sp,fp
100003b8:	df000017 	ldw	fp,0(sp)
100003bc:	dec00104 	addi	sp,sp,4
100003c0:	f800283a 	ret

100003c4 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
100003c4:	defff904 	addi	sp,sp,-28
100003c8:	dfc00615 	stw	ra,24(sp)
100003cc:	df000515 	stw	fp,20(sp)
100003d0:	df000504 	addi	fp,sp,20
	IO_init();
100003d4:	000026c0 	call	1000026c <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
100003d8:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
100003dc:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
100003e0:	e03ffb85 	stb	zero,-18(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
100003e4:	01040074 	movhi	r4,4097
100003e8:	21066904 	addi	r4,r4,6564
100003ec:	00023700 	call	10002370 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
100003f0:	00011980 	call	10001198 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
100003f4:	01005104 	movi	r4,324
100003f8:	000b883a 	mov	r5,zero
100003fc:	00011000 	call	10001100 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10000400:	01302414 	movui	r4,49296
10000404:	017fffd4 	movui	r5,65535
10000408:	00011000 	call	10001100 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
1000040c:	01006d04 	movi	r4,436
10000410:	01409604 	movi	r5,600
10000414:	00011000 	call	10001100 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
10000418:	00811004 	movi	r2,1088
1000041c:	e0bffb0d 	sth	r2,-20(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10000420:	e0bffb0b 	ldhu	r2,-20(fp)
10000424:	01005084 	movi	r4,322
10000428:	100b883a 	mov	r5,r2
1000042c:	00011000 	call	10001100 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
10000430:	00808404 	movi	r2,528
10000434:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
10000438:	e0bffe0b 	ldhu	r2,-8(fp)
1000043c:	01302314 	movui	r4,49292
10000440:	100b883a 	mov	r5,r2
10000444:	00011000 	call	10001100 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
10000448:	01007104 	movi	r4,452
1000044c:	000b883a 	mov	r5,zero
10000450:	00011000 	call	10001100 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10000454:	01007184 	movi	r4,454
10000458:	000b883a 	mov	r5,zero
1000045c:	00011000 	call	10001100 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10000460:	01007204 	movi	r4,456
10000464:	000b883a 	mov	r5,zero
10000468:	00011000 	call	10001100 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
1000046c:	01007284 	movi	r4,458
10000470:	000b883a 	mov	r5,zero
10000474:	00011000 	call	10001100 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10000478:	01007304 	movi	r4,460
1000047c:	000b883a 	mov	r5,zero
10000480:	00011000 	call	10001100 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10000484:	01007384 	movi	r4,462
10000488:	000b883a 	mov	r5,zero
1000048c:	00011000 	call	10001100 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10000490:	01007404 	movi	r4,464
10000494:	000b883a 	mov	r5,zero
10000498:	00011000 	call	10001100 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
1000049c:	01007484 	movi	r4,466
100004a0:	000b883a 	mov	r5,zero
100004a4:	00011000 	call	10001100 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100004a8:	01007504 	movi	r4,468
100004ac:	000b883a 	mov	r5,zero
100004b0:	00011000 	call	10001100 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100004b4:	01007584 	movi	r4,470
100004b8:	000b883a 	mov	r5,zero
100004bc:	00011000 	call	10001100 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100004c0:	01007604 	movi	r4,472
100004c4:	000b883a 	mov	r5,zero
100004c8:	00011000 	call	10001100 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100004cc:	01007684 	movi	r4,474
100004d0:	000b883a 	mov	r5,zero
100004d4:	00011000 	call	10001100 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
100004d8:	01007704 	movi	r4,476
100004dc:	000b883a 	mov	r5,zero
100004e0:	00011000 	call	10001100 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
100004e4:	01007784 	movi	r4,478
100004e8:	000b883a 	mov	r5,zero
100004ec:	00011000 	call	10001100 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
100004f0:	01007084 	movi	r4,450
100004f4:	01401c84 	movi	r5,114
100004f8:	00011000 	call	10001100 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
100004fc:	01000044 	movi	r4,1
10000500:	01738054 	movui	r5,52737
10000504:	00002f00 	call	100002f0 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10000508:	0001883a 	nop
1000050c:	010000c4 	movi	r4,3
10000510:	000035c0 	call	1000035c <IO_read>
10000514:	10bfffcc 	andi	r2,r2,65535
10000518:	103ffc26 	beq	r2,zero,1000050c <__alt_data_end+0xf800050c>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
1000051c:	0001883a 	nop
10000520:	01000044 	movi	r4,1
10000524:	000035c0 	call	1000035c <IO_read>
10000528:	10bfffcc 	andi	r2,r2,65535
1000052c:	1083fb58 	cmpnei	r2,r2,4077
10000530:	10000826 	beq	r2,zero,10000554 <main+0x190>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10000534:	01000044 	movi	r4,1
10000538:	000035c0 	call	1000035c <IO_read>
1000053c:	10bfffcc 	andi	r2,r2,65535
10000540:	01040074 	movhi	r4,4097
10000544:	21066f04 	addi	r4,r4,6588
10000548:	100b883a 	mov	r5,r2
1000054c:	00022740 	call	10002274 <printf>
		goto USB_HOT_PLUG;
10000550:	003fa706 	br	100003f0 <__alt_data_end+0xf80003f0>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
10000554:	01040074 	movhi	r4,4097
10000558:	21067804 	addi	r4,r4,6624
1000055c:	00022740 	call	10002274 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
10000560:	01007084 	movi	r4,450
10000564:	01401d04 	movi	r5,116
10000568:	00011000 	call	10001100 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
1000056c:	01007104 	movi	r4,452
10000570:	01400f04 	movi	r5,60
10000574:	00011000 	call	10001100 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10000578:	01007184 	movi	r4,454
1000057c:	000b883a 	mov	r5,zero
10000580:	00011000 	call	10001100 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10000584:	01007204 	movi	r4,456
10000588:	000b883a 	mov	r5,zero
1000058c:	00011000 	call	10001100 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10000590:	01007284 	movi	r4,458
10000594:	000b883a 	mov	r5,zero
10000598:	00011000 	call	10001100 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
1000059c:	01007304 	movi	r4,460
100005a0:	000b883a 	mov	r5,zero
100005a4:	00011000 	call	10001100 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
100005a8:	01007384 	movi	r4,462
100005ac:	000b883a 	mov	r5,zero
100005b0:	00011000 	call	10001100 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
100005b4:	01007404 	movi	r4,464
100005b8:	000b883a 	mov	r5,zero
100005bc:	00011000 	call	10001100 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
100005c0:	01007484 	movi	r4,466
100005c4:	000b883a 	mov	r5,zero
100005c8:	00011000 	call	10001100 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100005cc:	01007504 	movi	r4,468
100005d0:	000b883a 	mov	r5,zero
100005d4:	00011000 	call	10001100 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100005d8:	01007584 	movi	r4,470
100005dc:	000b883a 	mov	r5,zero
100005e0:	00011000 	call	10001100 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100005e4:	01007604 	movi	r4,472
100005e8:	000b883a 	mov	r5,zero
100005ec:	00011000 	call	10001100 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100005f0:	01007684 	movi	r4,474
100005f4:	000b883a 	mov	r5,zero
100005f8:	00011000 	call	10001100 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
100005fc:	01007704 	movi	r4,476
10000600:	000b883a 	mov	r5,zero
10000604:	00011000 	call	10001100 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10000608:	01007784 	movi	r4,478
1000060c:	000b883a 	mov	r5,zero
10000610:	00011000 	call	10001100 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000614:	01000044 	movi	r4,1
10000618:	01738054 	movui	r5,52737
1000061c:	00002f00 	call	100002f0 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000620:	0001883a 	nop
10000624:	01000044 	movi	r4,1
10000628:	000035c0 	call	1000035c <IO_read>
1000062c:	10bfffcc 	andi	r2,r2,65535
10000630:	1083fb58 	cmpnei	r2,r2,4077
10000634:	10000826 	beq	r2,zero,10000658 <main+0x294>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10000638:	01000044 	movi	r4,1
1000063c:	000035c0 	call	1000035c <IO_read>
10000640:	10bfffcc 	andi	r2,r2,65535
10000644:	01040074 	movhi	r4,4097
10000648:	21066f04 	addi	r4,r4,6588
1000064c:	100b883a 	mov	r5,r2
10000650:	00022740 	call	10002274 <printf>
		goto USB_HOT_PLUG;
10000654:	003f6606 	br	100003f0 <__alt_data_end+0xf80003f0>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
10000658:	00b02284 	movi	r2,-16246
1000065c:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
10000660:	008c0004 	movi	r2,12288
10000664:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
10000668:	00880004 	movi	r2,8192
1000066c:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
10000670:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000674:	10bfffcc 	andi	r2,r2,65535
10000678:	1009883a 	mov	r4,r2
1000067c:	00011540 	call	10001154 <UsbRead>
10000680:	e0bffb0d 	sth	r2,-20(fp)

	if (!(usb_ctl_val & no_device))
10000684:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000688:	e0fffb0b 	ldhu	r3,-20(fp)
1000068c:	1884703a 	and	r2,r3,r2
10000690:	10bfffcc 	andi	r2,r2,65535
10000694:	1000341e 	bne	r2,zero,10000768 <main+0x3a4>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10000698:	e03ffbc5 	stb	zero,-17(fp)
1000069c:	00001006 	br	100006e0 <main+0x31c>
		{
			usleep(5*1000);
100006a0:	0104e204 	movi	r4,5000
100006a4:	000f9dc0 	call	1000f9dc <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100006a8:	d0a6cb0b 	ldhu	r2,-25812(gp)
100006ac:	10bfffcc 	andi	r2,r2,65535
100006b0:	1009883a 	mov	r4,r2
100006b4:	00011540 	call	10001154 <UsbRead>
100006b8:	e0bffb0d 	sth	r2,-20(fp)
			if(usb_ctl_val & no_device) break;
100006bc:	d0a6cb8b 	ldhu	r2,-25810(gp)
100006c0:	e0fffb0b 	ldhu	r3,-20(fp)
100006c4:	1884703a 	and	r2,r3,r2
100006c8:	10bfffcc 	andi	r2,r2,65535
100006cc:	10000126 	beq	r2,zero,100006d4 <main+0x310>
100006d0:	00000606 	br	100006ec <main+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
100006d4:	e0bffbc3 	ldbu	r2,-17(fp)
100006d8:	10800044 	addi	r2,r2,1
100006dc:	e0bffbc5 	stb	r2,-17(fp)
100006e0:	e0bffbc3 	ldbu	r2,-17(fp)
100006e4:	10800170 	cmpltui	r2,r2,5
100006e8:	103fed1e 	bne	r2,zero,100006a0 <__alt_data_end+0xf80006a0>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
		}
		if(!(usb_ctl_val & no_device))
100006ec:	d0a6cb8b 	ldhu	r2,-25810(gp)
100006f0:	e0fffb0b 	ldhu	r3,-20(fp)
100006f4:	1884703a 	and	r2,r3,r2
100006f8:	10bfffcc 	andi	r2,r2,65535
100006fc:	1000261e 	bne	r2,zero,10000798 <main+0x3d4>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
10000700:	01040074 	movhi	r4,4097
10000704:	21067c04 	addi	r4,r4,6640
10000708:	00023700 	call	10002370 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
1000070c:	01040074 	movhi	r4,4097
10000710:	21068604 	addi	r4,r4,6680
10000714:	00023700 	call	10002370 <puts>
			while (!(usb_ctl_val & no_device))
10000718:	00000d06 	br	10000750 <main+0x38c>
			{
				usb_ctl_val = UsbRead(ctl_reg);
1000071c:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000720:	10bfffcc 	andi	r2,r2,65535
10000724:	1009883a 	mov	r4,r2
10000728:	00011540 	call	10001154 <UsbRead>
1000072c:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device)
10000730:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000734:	e0fffb0b 	ldhu	r3,-20(fp)
10000738:	1884703a 	and	r2,r3,r2
1000073c:	10bfffcc 	andi	r2,r2,65535
10000740:	10000126 	beq	r2,zero,10000748 <main+0x384>
					goto USB_HOT_PLUG;
10000744:	003f2a06 	br	100003f0 <__alt_data_end+0xf80003f0>

				usleep(2000);
10000748:	0101f404 	movi	r4,2000
1000074c:	000f9dc0 	call	1000f9dc <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
10000750:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000754:	e0fffb0b 	ldhu	r3,-20(fp)
10000758:	1884703a 	and	r2,r3,r2
1000075c:	10bfffcc 	andi	r2,r2,65535
10000760:	103fee26 	beq	r2,zero,1000071c <__alt_data_end+0xf800071c>
10000764:	00000c06 	br	10000798 <main+0x3d4>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
10000768:	e0fffb0b 	ldhu	r3,-20(fp)
1000076c:	e0bffc0b 	ldhu	r2,-16(fp)
10000770:	1884703a 	and	r2,r3,r2
10000774:	10bfffcc 	andi	r2,r2,65535
10000778:	10000426 	beq	r2,zero,1000078c <main+0x3c8>
		{
			printf("[INFO]: full speed device\n");
1000077c:	01040074 	movhi	r4,4097
10000780:	21069204 	addi	r4,r4,6728
10000784:	00023700 	call	10002370 <puts>
10000788:	00000306 	br	10000798 <main+0x3d4>
		}
		else
		{
			printf("[INFO]: low speed device\n");
1000078c:	01040074 	movhi	r4,4097
10000790:	21069904 	addi	r4,r4,6756
10000794:	00023700 	call	10002370 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
10000798:	00012480 	call	10001248 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000079c:	00000306 	br	100007ac <main+0x3e8>
	{
		UsbSetAddress();
100007a0:	00012480 	call	10001248 <UsbSetAddress>
		usleep(10*1000);
100007a4:	0109c404 	movi	r4,10000
100007a8:	000f9dc0 	call	1000f9dc <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007ac:	010000c4 	movi	r4,3
100007b0:	000035c0 	call	1000035c <IO_read>
100007b4:	10bfffcc 	andi	r2,r2,65535
100007b8:	1080040c 	andi	r2,r2,16
100007bc:	103ff826 	beq	r2,zero,100007a0 <__alt_data_end+0xf80007a0>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100007c0:	00020c40 	call	100020c4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
100007c4:	01000084 	movi	r4,2
100007c8:	01414184 	movi	r5,1286
100007cc:	00002f00 	call	100002f0 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
100007d0:	0009883a 	mov	r4,zero
100007d4:	000035c0 	call	1000035c <IO_read>
100007d8:	10bfffcc 	andi	r2,r2,65535
100007dc:	01040074 	movhi	r4,4097
100007e0:	2106a004 	addi	r4,r4,6784
100007e4:	100b883a 	mov	r5,r2
100007e8:	00022740 	call	10002274 <printf>

	IO_write(HPI_ADDR,0x0508); // n
100007ec:	01000084 	movi	r4,2
100007f0:	01414204 	movi	r5,1288
100007f4:	00002f00 	call	100002f0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100007f8:	0009883a 	mov	r4,zero
100007fc:	000035c0 	call	1000035c <IO_read>
10000800:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
10000804:	e0bffb0b 	ldhu	r2,-20(fp)
10000808:	01040074 	movhi	r4,4097
1000080c:	2106ab04 	addi	r4,r4,6828
10000810:	100b883a 	mov	r5,r2
10000814:	00022740 	call	10002274 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
10000818:	e0bffb0b 	ldhu	r2,-20(fp)
1000081c:	108000e0 	cmpeqi	r2,r2,3
10000820:	1000031e 	bne	r2,zero,10000830 <main+0x46c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000824:	00021480 	call	10002148 <UsbGetRetryCnt>
10000828:	e0bffb0d 	sth	r2,-20(fp)

		goto USB_HOT_PLUG;
1000082c:	003ef006 	br	100003f0 <__alt_data_end+0xf80003f0>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
10000830:	01040074 	movhi	r4,4097
10000834:	2106b704 	addi	r4,r4,6876
10000838:	00023700 	call	10002370 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
1000083c:	00013440 	call	10001344 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000840:	00000306 	br	10000850 <main+0x48c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
10000844:	00013440 	call	10001344 <UsbGetDeviceDesc1>
		usleep(10*1000);
10000848:	0109c404 	movi	r4,10000
1000084c:	000f9dc0 	call	1000f9dc <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000850:	010000c4 	movi	r4,3
10000854:	000035c0 	call	1000035c <IO_read>
10000858:	10bfffcc 	andi	r2,r2,65535
1000085c:	1080040c 	andi	r2,r2,16
10000860:	103ff826 	beq	r2,zero,10000844 <__alt_data_end+0xf8000844>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000864:	00020c40 	call	100020c4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000868:	01000084 	movi	r4,2
1000086c:	01414184 	movi	r5,1286
10000870:	00002f00 	call	100002f0 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000874:	0009883a 	mov	r4,zero
10000878:	000035c0 	call	1000035c <IO_read>
1000087c:	10bfffcc 	andi	r2,r2,65535
10000880:	01040074 	movhi	r4,4097
10000884:	2106c604 	addi	r4,r4,6936
10000888:	100b883a 	mov	r5,r2
1000088c:	00022740 	call	10002274 <printf>

	IO_write(HPI_ADDR,0x0508);
10000890:	01000084 	movi	r4,2
10000894:	01414204 	movi	r5,1288
10000898:	00002f00 	call	100002f0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
1000089c:	0009883a 	mov	r4,zero
100008a0:	000035c0 	call	1000035c <IO_read>
100008a4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
100008a8:	e0bffb0b 	ldhu	r2,-20(fp)
100008ac:	01040074 	movhi	r4,4097
100008b0:	2106d104 	addi	r4,r4,6980
100008b4:	100b883a 	mov	r5,r2
100008b8:	00022740 	call	10002274 <printf>
	while (usb_ctl_val != 0x03)
100008bc:	00000206 	br	100008c8 <main+0x504>
	{
		usb_ctl_val = UsbGetRetryCnt();
100008c0:	00021480 	call	10002148 <UsbGetRetryCnt>
100008c4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100008c8:	e0bffb0b 	ldhu	r2,-20(fp)
100008cc:	108000d8 	cmpnei	r2,r2,3
100008d0:	103ffb1e 	bne	r2,zero,100008c0 <__alt_data_end+0xf80008c0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
100008d4:	01040074 	movhi	r4,4097
100008d8:	2106dd04 	addi	r4,r4,7028
100008dc:	00023700 	call	10002370 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
100008e0:	00014880 	call	10001488 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100008e4:	00000306 	br	100008f4 <main+0x530>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
100008e8:	00014880 	call	10001488 <UsbGetDeviceDesc2>
		usleep(10*1000);
100008ec:	0109c404 	movi	r4,10000
100008f0:	000f9dc0 	call	1000f9dc <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100008f4:	010000c4 	movi	r4,3
100008f8:	000035c0 	call	1000035c <IO_read>
100008fc:	10bfffcc 	andi	r2,r2,65535
10000900:	1080040c 	andi	r2,r2,16
10000904:	103ff826 	beq	r2,zero,100008e8 <__alt_data_end+0xf80008e8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000908:	00020c40 	call	100020c4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
1000090c:	01000084 	movi	r4,2
10000910:	01414184 	movi	r5,1286
10000914:	00002f00 	call	100002f0 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000918:	0009883a 	mov	r4,zero
1000091c:	000035c0 	call	1000035c <IO_read>
10000920:	10bfffcc 	andi	r2,r2,65535
10000924:	01040074 	movhi	r4,4097
10000928:	2106c604 	addi	r4,r4,6936
1000092c:	100b883a 	mov	r5,r2
10000930:	00022740 	call	10002274 <printf>

	IO_write(HPI_ADDR,0x0508);
10000934:	01000084 	movi	r4,2
10000938:	01414204 	movi	r5,1288
1000093c:	00002f00 	call	100002f0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000940:	0009883a 	mov	r4,zero
10000944:	000035c0 	call	1000035c <IO_read>
10000948:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
1000094c:	e0bffb0b 	ldhu	r2,-20(fp)
10000950:	01040074 	movhi	r4,4097
10000954:	2106d104 	addi	r4,r4,6980
10000958:	100b883a 	mov	r5,r2
1000095c:	00022740 	call	10002274 <printf>
	while (usb_ctl_val != 0x03)
10000960:	00000206 	br	1000096c <main+0x5a8>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000964:	00021480 	call	10002148 <UsbGetRetryCnt>
10000968:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
1000096c:	e0bffb0b 	ldhu	r2,-20(fp)
10000970:	108000d8 	cmpnei	r2,r2,3
10000974:	103ffb1e 	bne	r2,zero,10000964 <__alt_data_end+0xf8000964>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
10000978:	01040074 	movhi	r4,4097
1000097c:	2106f104 	addi	r4,r4,7108
10000980:	00023700 	call	10002370 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
10000984:	000165c0 	call	1000165c <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000988:	00000306 	br	10000998 <main+0x5d4>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
1000098c:	000165c0 	call	1000165c <UsbGetConfigDesc1>
		usleep(10*1000);
10000990:	0109c404 	movi	r4,10000
10000994:	000f9dc0 	call	1000f9dc <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000998:	010000c4 	movi	r4,3
1000099c:	000035c0 	call	1000035c <IO_read>
100009a0:	10bfffcc 	andi	r2,r2,65535
100009a4:	1080040c 	andi	r2,r2,16
100009a8:	103ff826 	beq	r2,zero,1000098c <__alt_data_end+0xf800098c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100009ac:	00020c40 	call	100020c4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100009b0:	01000084 	movi	r4,2
100009b4:	01414184 	movi	r5,1286
100009b8:	00002f00 	call	100002f0 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
100009bc:	0009883a 	mov	r4,zero
100009c0:	000035c0 	call	1000035c <IO_read>
100009c4:	10bfffcc 	andi	r2,r2,65535
100009c8:	01040074 	movhi	r4,4097
100009cc:	21070304 	addi	r4,r4,7180
100009d0:	100b883a 	mov	r5,r2
100009d4:	00022740 	call	10002274 <printf>

	IO_write(HPI_ADDR,0x0508);
100009d8:	01000084 	movi	r4,2
100009dc:	01414204 	movi	r5,1288
100009e0:	00002f00 	call	100002f0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100009e4:	0009883a 	mov	r4,zero
100009e8:	000035c0 	call	1000035c <IO_read>
100009ec:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
100009f0:	e0bffb0b 	ldhu	r2,-20(fp)
100009f4:	01040074 	movhi	r4,4097
100009f8:	21070e04 	addi	r4,r4,7224
100009fc:	100b883a 	mov	r5,r2
10000a00:	00022740 	call	10002274 <printf>
	while (usb_ctl_val != 0x03)
10000a04:	00000206 	br	10000a10 <main+0x64c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000a08:	00021480 	call	10002148 <UsbGetRetryCnt>
10000a0c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000a10:	e0bffb0b 	ldhu	r2,-20(fp)
10000a14:	108000d8 	cmpnei	r2,r2,3
10000a18:	103ffb1e 	bne	r2,zero,10000a08 <__alt_data_end+0xf8000a08>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10000a1c:	01040074 	movhi	r4,4097
10000a20:	21071a04 	addi	r4,r4,7272
10000a24:	00023700 	call	10002370 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
10000a28:	00017e80 	call	100017e8 <UsbGetConfigDesc2>

	usleep(100*1000);
10000a2c:	010000b4 	movhi	r4,2
10000a30:	2121a804 	addi	r4,r4,-31072
10000a34:	000f9dc0 	call	1000f9dc <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000a38:	00000306 	br	10000a48 <main+0x684>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
10000a3c:	00017e80 	call	100017e8 <UsbGetConfigDesc2>
		usleep(10*1000);
10000a40:	0109c404 	movi	r4,10000
10000a44:	000f9dc0 	call	1000f9dc <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000a48:	010000c4 	movi	r4,3
10000a4c:	000035c0 	call	1000035c <IO_read>
10000a50:	10bfffcc 	andi	r2,r2,65535
10000a54:	1080040c 	andi	r2,r2,16
10000a58:	103ff826 	beq	r2,zero,10000a3c <__alt_data_end+0xf8000a3c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000a5c:	00020c40 	call	100020c4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000a60:	01000084 	movi	r4,2
10000a64:	01414184 	movi	r5,1286
10000a68:	00002f00 	call	100002f0 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000a6c:	0009883a 	mov	r4,zero
10000a70:	000035c0 	call	1000035c <IO_read>
10000a74:	10bfffcc 	andi	r2,r2,65535
10000a78:	01040074 	movhi	r4,4097
10000a7c:	21072d04 	addi	r4,r4,7348
10000a80:	100b883a 	mov	r5,r2
10000a84:	00022740 	call	10002274 <printf>

	IO_write(HPI_ADDR,0x0508);
10000a88:	01000084 	movi	r4,2
10000a8c:	01414204 	movi	r5,1288
10000a90:	00002f00 	call	100002f0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000a94:	0009883a 	mov	r4,zero
10000a98:	000035c0 	call	1000035c <IO_read>
10000a9c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10000aa0:	e0bffb0b 	ldhu	r2,-20(fp)
10000aa4:	01040074 	movhi	r4,4097
10000aa8:	21073804 	addi	r4,r4,7392
10000aac:	100b883a 	mov	r5,r2
10000ab0:	00022740 	call	10002274 <printf>
	while (usb_ctl_val != 0x03)
10000ab4:	00000206 	br	10000ac0 <main+0x6fc>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000ab8:	00021480 	call	10002148 <UsbGetRetryCnt>
10000abc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000ac0:	e0bffb0b 	ldhu	r2,-20(fp)
10000ac4:	108000d8 	cmpnei	r2,r2,3
10000ac8:	103ffb1e 	bne	r2,zero,10000ab8 <__alt_data_end+0xf8000ab8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10000acc:	01040074 	movhi	r4,4097
10000ad0:	21074404 	addi	r4,r4,7440
10000ad4:	00023700 	call	10002370 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10000ad8:	01000084 	movi	r4,2
10000adc:	01415b04 	movi	r5,1388
10000ae0:	00002f00 	call	100002f0 <IO_write>
	code = IO_read(HPI_DATA);
10000ae4:	0009883a 	mov	r4,zero
10000ae8:	000035c0 	call	1000035c <IO_read>
10000aec:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
10000af0:	e0bffe8b 	ldhu	r2,-6(fp)
10000af4:	108000cc 	andi	r2,r2,3
10000af8:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
10000afc:	e0bffe8b 	ldhu	r2,-6(fp)
10000b00:	01040074 	movhi	r4,4097
10000b04:	21075704 	addi	r4,r4,7516
10000b08:	100b883a 	mov	r5,r2
10000b0c:	00022740 	call	10002274 <printf>

	if (code == 0x01)
10000b10:	e0bffe8b 	ldhu	r2,-6(fp)
10000b14:	10800058 	cmpnei	r2,r2,1
10000b18:	1000041e 	bne	r2,zero,10000b2c <main+0x768>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10000b1c:	01040074 	movhi	r4,4097
10000b20:	21075a04 	addi	r4,r4,7528
10000b24:	00023700 	call	10002370 <puts>
10000b28:	00000306 	br	10000b38 <main+0x774>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10000b2c:	01040074 	movhi	r4,4097
10000b30:	21076904 	addi	r4,r4,7588
10000b34:	00023700 	call	10002370 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10000b38:	01000084 	movi	r4,2
10000b3c:	01415d84 	movi	r5,1398
10000b40:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x073F);
10000b44:	0009883a 	mov	r4,zero
10000b48:	0141cfc4 	movi	r5,1855
10000b4c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x8105);
10000b50:	0009883a 	mov	r4,zero
10000b54:	01604154 	movui	r5,33029
10000b58:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0003);
10000b5c:	0009883a 	mov	r4,zero
10000b60:	014000c4 	movi	r5,3
10000b64:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0008);
10000b68:	0009883a 	mov	r4,zero
10000b6c:	01400204 	movi	r5,8
10000b70:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10000b74:	0009883a 	mov	r4,zero
10000b78:	016b0294 	movui	r5,44042
10000b7c:	00002f00 	call	100002f0 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10000b80:	01006c04 	movi	r4,432
10000b84:	01415d84 	movi	r5,1398
10000b88:	00011000 	call	10001100 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10000b8c:	01000084 	movi	r4,2
10000b90:	01415f04 	movi	r5,1404
10000b94:	00002f00 	call	100002f0 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10000b98:	0009883a 	mov	r4,zero
10000b9c:	000035c0 	call	1000035c <IO_read>
10000ba0:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10000ba4:	e0bfff03 	ldbu	r2,-4(fp)
10000ba8:	01040074 	movhi	r4,4097
10000bac:	21077204 	addi	r4,r4,7624
10000bb0:	100b883a 	mov	r5,r2
10000bb4:	00022740 	call	10002274 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10000bb8:	0001a4c0 	call	10001a4c <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bbc:	00000306 	br	10000bcc <main+0x808>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10000bc0:	0001a4c0 	call	10001a4c <UsbSetConfig>
		usleep(10*1000);
10000bc4:	0109c404 	movi	r4,10000
10000bc8:	000f9dc0 	call	1000f9dc <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bcc:	010000c4 	movi	r4,3
10000bd0:	000035c0 	call	1000035c <IO_read>
10000bd4:	10bfffcc 	andi	r2,r2,65535
10000bd8:	1080040c 	andi	r2,r2,16
10000bdc:	103ff826 	beq	r2,zero,10000bc0 <__alt_data_end+0xf8000bc0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000be0:	00020c40 	call	100020c4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000be4:	01000084 	movi	r4,2
10000be8:	01414184 	movi	r5,1286
10000bec:	00002f00 	call	100002f0 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000bf0:	0009883a 	mov	r4,zero
10000bf4:	000035c0 	call	1000035c <IO_read>
10000bf8:	10bfffcc 	andi	r2,r2,65535
10000bfc:	01040074 	movhi	r4,4097
10000c00:	21077c04 	addi	r4,r4,7664
10000c04:	100b883a 	mov	r5,r2
10000c08:	00022740 	call	10002274 <printf>

	IO_write(HPI_ADDR,0x0508);
10000c0c:	01000084 	movi	r4,2
10000c10:	01414204 	movi	r5,1288
10000c14:	00002f00 	call	100002f0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000c18:	0009883a 	mov	r4,zero
10000c1c:	000035c0 	call	1000035c <IO_read>
10000c20:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10000c24:	e0bffb0b 	ldhu	r2,-20(fp)
10000c28:	01040074 	movhi	r4,4097
10000c2c:	21078704 	addi	r4,r4,7708
10000c30:	100b883a 	mov	r5,r2
10000c34:	00022740 	call	10002274 <printf>
	while (usb_ctl_val != 0x03)
10000c38:	00000206 	br	10000c44 <main+0x880>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000c3c:	00021480 	call	10002148 <UsbGetRetryCnt>
10000c40:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000c44:	e0bffb0b 	ldhu	r2,-20(fp)
10000c48:	108000d8 	cmpnei	r2,r2,3
10000c4c:	103ffb1e 	bne	r2,zero,10000c3c <__alt_data_end+0xf8000c3c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10000c50:	01040074 	movhi	r4,4097
10000c54:	21079304 	addi	r4,r4,7756
10000c58:	00023700 	call	10002370 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10000c5c:	0001b480 	call	10001b48 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c60:	00000306 	br	10000c70 <main+0x8ac>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10000c64:	0001b480 	call	10001b48 <UsbClassRequest>
		usleep(10*1000);
10000c68:	0109c404 	movi	r4,10000
10000c6c:	000f9dc0 	call	1000f9dc <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c70:	010000c4 	movi	r4,3
10000c74:	000035c0 	call	1000035c <IO_read>
10000c78:	10bfffcc 	andi	r2,r2,65535
10000c7c:	1080040c 	andi	r2,r2,16
10000c80:	103ff826 	beq	r2,zero,10000c64 <__alt_data_end+0xf8000c64>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000c84:	00020c40 	call	100020c4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000c88:	01000084 	movi	r4,2
10000c8c:	01414184 	movi	r5,1286
10000c90:	00002f00 	call	100002f0 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000c94:	0009883a 	mov	r4,zero
10000c98:	000035c0 	call	1000035c <IO_read>
10000c9c:	10bfffcc 	andi	r2,r2,65535
10000ca0:	01040074 	movhi	r4,4097
10000ca4:	2107a504 	addi	r4,r4,7828
10000ca8:	100b883a 	mov	r5,r2
10000cac:	00022740 	call	10002274 <printf>

	IO_write(HPI_ADDR,0x0508);
10000cb0:	01000084 	movi	r4,2
10000cb4:	01414204 	movi	r5,1288
10000cb8:	00002f00 	call	100002f0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000cbc:	0009883a 	mov	r4,zero
10000cc0:	000035c0 	call	1000035c <IO_read>
10000cc4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000cc8:	e0bffb0b 	ldhu	r2,-20(fp)
10000ccc:	01040074 	movhi	r4,4097
10000cd0:	2107b004 	addi	r4,r4,7872
10000cd4:	100b883a 	mov	r5,r2
10000cd8:	00022740 	call	10002274 <printf>
	while (usb_ctl_val != 0x03)
10000cdc:	00000206 	br	10000ce8 <main+0x924>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000ce0:	00021480 	call	10002148 <UsbGetRetryCnt>
10000ce4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000ce8:	e0bffb0b 	ldhu	r2,-20(fp)
10000cec:	108000d8 	cmpnei	r2,r2,3
10000cf0:	103ffb1e 	bne	r2,zero,10000ce0 <__alt_data_end+0xf8000ce0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10000cf4:	01040074 	movhi	r4,4097
10000cf8:	2107bc04 	addi	r4,r4,7920
10000cfc:	00023700 	call	10002370 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10000d00:	0001c440 	call	10001c44 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d04:	00000306 	br	10000d14 <main+0x950>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10000d08:	0001c440 	call	10001c44 <UsbGetHidDesc>
		usleep(10*1000);
10000d0c:	0109c404 	movi	r4,10000
10000d10:	000f9dc0 	call	1000f9dc <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d14:	010000c4 	movi	r4,3
10000d18:	000035c0 	call	1000035c <IO_read>
10000d1c:	10bfffcc 	andi	r2,r2,65535
10000d20:	1080040c 	andi	r2,r2,16
10000d24:	103ff826 	beq	r2,zero,10000d08 <__alt_data_end+0xf8000d08>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000d28:	00020c40 	call	100020c4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000d2c:	01000084 	movi	r4,2
10000d30:	01414184 	movi	r5,1286
10000d34:	00002f00 	call	100002f0 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000d38:	0009883a 	mov	r4,zero
10000d3c:	000035c0 	call	1000035c <IO_read>
10000d40:	10bfffcc 	andi	r2,r2,65535
10000d44:	01040074 	movhi	r4,4097
10000d48:	2107a504 	addi	r4,r4,7828
10000d4c:	100b883a 	mov	r5,r2
10000d50:	00022740 	call	10002274 <printf>

	IO_write(HPI_ADDR,0x0508);
10000d54:	01000084 	movi	r4,2
10000d58:	01414204 	movi	r5,1288
10000d5c:	00002f00 	call	100002f0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000d60:	0009883a 	mov	r4,zero
10000d64:	000035c0 	call	1000035c <IO_read>
10000d68:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000d6c:	e0bffb0b 	ldhu	r2,-20(fp)
10000d70:	01040074 	movhi	r4,4097
10000d74:	2107b004 	addi	r4,r4,7872
10000d78:	100b883a 	mov	r5,r2
10000d7c:	00022740 	call	10002274 <printf>
	while (usb_ctl_val != 0x03)
10000d80:	00000206 	br	10000d8c <main+0x9c8>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000d84:	00021480 	call	10002148 <UsbGetRetryCnt>
10000d88:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000d8c:	e0bffb0b 	ldhu	r2,-20(fp)
10000d90:	108000d8 	cmpnei	r2,r2,3
10000d94:	103ffb1e 	bne	r2,zero,10000d84 <__alt_data_end+0xf8000d84>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10000d98:	01040074 	movhi	r4,4097
10000d9c:	2107ce04 	addi	r4,r4,7992
10000da0:	00023700 	call	10002370 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10000da4:	0001d880 	call	10001d88 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000da8:	00000306 	br	10000db8 <main+0x9f4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10000dac:	0001d880 	call	10001d88 <UsbGetReportDesc>
		usleep(10*1000);
10000db0:	0109c404 	movi	r4,10000
10000db4:	000f9dc0 	call	1000f9dc <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000db8:	010000c4 	movi	r4,3
10000dbc:	000035c0 	call	1000035c <IO_read>
10000dc0:	10bfffcc 	andi	r2,r2,65535
10000dc4:	1080040c 	andi	r2,r2,16
10000dc8:	103ff826 	beq	r2,zero,10000dac <__alt_data_end+0xf8000dac>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000dcc:	00020c40 	call	100020c4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000dd0:	01000084 	movi	r4,2
10000dd4:	01414184 	movi	r5,1286
10000dd8:	00002f00 	call	100002f0 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000ddc:	0009883a 	mov	r4,zero
10000de0:	000035c0 	call	1000035c <IO_read>
10000de4:	10bfffcc 	andi	r2,r2,65535
10000de8:	01040074 	movhi	r4,4097
10000dec:	2107e204 	addi	r4,r4,8072
10000df0:	100b883a 	mov	r5,r2
10000df4:	00022740 	call	10002274 <printf>

	IO_write(HPI_ADDR,0x0508);
10000df8:	01000084 	movi	r4,2
10000dfc:	01414204 	movi	r5,1288
10000e00:	00002f00 	call	100002f0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000e04:	0009883a 	mov	r4,zero
10000e08:	000035c0 	call	1000035c <IO_read>
10000e0c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10000e10:	e0bffb0b 	ldhu	r2,-20(fp)
10000e14:	01040074 	movhi	r4,4097
10000e18:	2107ee04 	addi	r4,r4,8120
10000e1c:	100b883a 	mov	r5,r2
10000e20:	00022740 	call	10002274 <printf>
	while (usb_ctl_val != 0x03)
10000e24:	00000206 	br	10000e30 <main+0xa6c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000e28:	00021480 	call	10002148 <UsbGetRetryCnt>
10000e2c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000e30:	e0bffb0b 	ldhu	r2,-20(fp)
10000e34:	108000d8 	cmpnei	r2,r2,3
10000e38:	103ffb1e 	bne	r2,zero,10000e28 <__alt_data_end+0xf8000e28>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10000e3c:	01040074 	movhi	r4,4097
10000e40:	2107fa04 	addi	r4,r4,8168
10000e44:	00023700 	call	10002370 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
10000e48:	0109c404 	movi	r4,10000
10000e4c:	000f9dc0 	call	1000f9dc <usleep>
	while(1)
	{
		toggle++;
10000e50:	e0bffb83 	ldbu	r2,-18(fp)
10000e54:	10800044 	addi	r2,r2,1
10000e58:	e0bffb85 	stb	r2,-18(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
10000e5c:	01000084 	movi	r4,2
10000e60:	01414004 	movi	r5,1280
10000e64:	00002f00 	call	100002f0 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10000e68:	0009883a 	mov	r4,zero
10000e6c:	01414704 	movi	r5,1308
10000e70:	00002f00 	call	100002f0 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000e74:	e0bfff03 	ldbu	r2,-4(fp)
10000e78:	108003cc 	andi	r2,r2,15
10000e7c:	0009883a 	mov	r4,zero
10000e80:	100b883a 	mov	r5,r2
10000e84:	00002f00 	call	100002f0 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000e88:	0009883a 	mov	r4,zero
10000e8c:	0140a444 	movi	r5,657
10000e90:	00002f00 	call	100002f0 <IO_write>
		if(toggle%2)
10000e94:	e0bffb83 	ldbu	r2,-18(fp)
10000e98:	1080004c 	andi	r2,r2,1
10000e9c:	10803fcc 	andi	r2,r2,255
10000ea0:	10000426 	beq	r2,zero,10000eb4 <main+0xaf0>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
10000ea4:	0009883a 	mov	r4,zero
10000ea8:	01400044 	movi	r5,1
10000eac:	00002f00 	call	100002f0 <IO_write>
10000eb0:	00000306 	br	10000ec0 <main+0xafc>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10000eb4:	0009883a 	mov	r4,zero
10000eb8:	01401044 	movi	r5,65
10000ebc:	00002f00 	call	100002f0 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10000ec0:	0009883a 	mov	r4,zero
10000ec4:	014004c4 	movi	r5,19
10000ec8:	00002f00 	call	100002f0 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
10000ecc:	0009883a 	mov	r4,zero
10000ed0:	000b883a 	mov	r5,zero
10000ed4:	00002f00 	call	100002f0 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000ed8:	01006c04 	movi	r4,432
10000edc:	01414004 	movi	r5,1280
10000ee0:	00011000 	call	10001100 <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000ee4:	00002406 	br	10000f78 <main+0xbb4>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
10000ee8:	01000084 	movi	r4,2
10000eec:	01414004 	movi	r5,1280
10000ef0:	00002f00 	call	100002f0 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
10000ef4:	0009883a 	mov	r4,zero
10000ef8:	01414704 	movi	r5,1308
10000efc:	00002f00 	call	100002f0 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000f00:	e0bfff03 	ldbu	r2,-4(fp)
10000f04:	108003cc 	andi	r2,r2,15
10000f08:	0009883a 	mov	r4,zero
10000f0c:	100b883a 	mov	r5,r2
10000f10:	00002f00 	call	100002f0 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000f14:	0009883a 	mov	r4,zero
10000f18:	0140a444 	movi	r5,657
10000f1c:	00002f00 	call	100002f0 <IO_write>
			if(toggle%2)
10000f20:	e0bffb83 	ldbu	r2,-18(fp)
10000f24:	1080004c 	andi	r2,r2,1
10000f28:	10803fcc 	andi	r2,r2,255
10000f2c:	10000426 	beq	r2,zero,10000f40 <main+0xb7c>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
10000f30:	0009883a 	mov	r4,zero
10000f34:	01400044 	movi	r5,1
10000f38:	00002f00 	call	100002f0 <IO_write>
10000f3c:	00000306 	br	10000f4c <main+0xb88>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
10000f40:	0009883a 	mov	r4,zero
10000f44:	01401044 	movi	r5,65
10000f48:	00002f00 	call	100002f0 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
10000f4c:	0009883a 	mov	r4,zero
10000f50:	014004c4 	movi	r5,19
10000f54:	00002f00 	call	100002f0 <IO_write>
			IO_write(HPI_DATA,0x0000);//
10000f58:	0009883a 	mov	r4,zero
10000f5c:	000b883a 	mov	r5,zero
10000f60:	00002f00 	call	100002f0 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000f64:	01006c04 	movi	r4,432
10000f68:	01414004 	movi	r5,1280
10000f6c:	00011000 	call	10001100 <UsbWrite>
			usleep(10*1000);
10000f70:	0109c404 	movi	r4,10000
10000f74:	000f9dc0 	call	1000f9dc <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000f78:	010000c4 	movi	r4,3
10000f7c:	000035c0 	call	1000035c <IO_read>
10000f80:	10bfffcc 	andi	r2,r2,65535
10000f84:	1080040c 	andi	r2,r2,16
10000f88:	103fd726 	beq	r2,zero,10000ee8 <__alt_data_end+0xf8000ee8>
			IO_write(HPI_DATA,0x0000);//
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
			usleep(10*1000);
		}//end while

		usb_ctl_val = UsbWaitTDListDone();
10000f8c:	00020c40 	call	100020c4 <UsbWaitTDListDone>
10000f90:	e0bffb0d 	sth	r2,-20(fp)

		// The first two keycodes are stored in 0x051E. Other keycodes are in 
		// subsequent addresses.
		keycode = UsbRead(0x051e);
10000f94:	01014784 	movi	r4,1310
10000f98:	00011540 	call	10001154 <UsbRead>
10000f9c:	10bfffcc 	andi	r2,r2,65535
10000fa0:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
10000fa4:	01040074 	movhi	r4,4097
10000fa8:	21080e04 	addi	r4,r4,8248
10000fac:	e17ffd17 	ldw	r5,-12(fp)
10000fb0:	00022740 	call	10002274 <printf>
		// We only need the first keycode, which is at the lower byte of keycode.
		// Send the keycode to hardware via PIO.
		*keycode_base = keycode & 0xff; 
10000fb4:	00802004 	movi	r2,128
10000fb8:	e0fffd17 	ldw	r3,-12(fp)
10000fbc:	10c00005 	stb	r3,0(r2)

		usleep(200);//usleep(5000);
10000fc0:	01003204 	movi	r4,200
10000fc4:	000f9dc0 	call	1000f9dc <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
10000fc8:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000fcc:	10bfffcc 	andi	r2,r2,65535
10000fd0:	1009883a 	mov	r4,r2
10000fd4:	00011540 	call	10001154 <UsbRead>
10000fd8:	e0bffb0d 	sth	r2,-20(fp)

		if(!(usb_ctl_val & no_device))
10000fdc:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000fe0:	e0fffb0b 	ldhu	r3,-20(fp)
10000fe4:	1884703a 	and	r2,r3,r2
10000fe8:	10bfffcc 	andi	r2,r2,65535
10000fec:	1000201e 	bne	r2,zero,10001070 <main+0xcac>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10000ff0:	e03ffbc5 	stb	zero,-17(fp)
10000ff4:	00001006 	br	10001038 <main+0xc74>
			{
				usleep(5*1000);
10000ff8:	0104e204 	movi	r4,5000
10000ffc:	000f9dc0 	call	1000f9dc <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
10001000:	d0a6cb0b 	ldhu	r2,-25812(gp)
10001004:	10bfffcc 	andi	r2,r2,65535
10001008:	1009883a 	mov	r4,r2
1000100c:	00011540 	call	10001154 <UsbRead>
10001010:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device) break;
10001014:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001018:	e0fffb0b 	ldhu	r3,-20(fp)
1000101c:	1884703a 	and	r2,r3,r2
10001020:	10bfffcc 	andi	r2,r2,65535
10001024:	10000126 	beq	r2,zero,1000102c <main+0xc68>
10001028:	00000606 	br	10001044 <main+0xc80>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
1000102c:	e0bffbc3 	ldbu	r2,-17(fp)
10001030:	10800044 	addi	r2,r2,1
10001034:	e0bffbc5 	stb	r2,-17(fp)
10001038:	e0bffbc3 	ldbu	r2,-17(fp)
1000103c:	108001f0 	cmpltui	r2,r2,7
10001040:	103fed1e 	bne	r2,zero,10000ff8 <__alt_data_end+0xf8000ff8>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
			}
			if(!(usb_ctl_val & no_device))
10001044:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001048:	e0fffb0b 	ldhu	r3,-20(fp)
1000104c:	1884703a 	and	r2,r3,r2
10001050:	10bfffcc 	andi	r2,r2,65535
10001054:	1000061e 	bne	r2,zero,10001070 <main+0xcac>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
10001058:	01040074 	movhi	r4,4097
1000105c:	21081704 	addi	r4,r4,8284
10001060:	00023700 	call	10002370 <puts>
				printf("[INFO]: please insert again!!! \n");
10001064:	01040074 	movhi	r4,4097
10001068:	21082204 	addi	r4,r4,8328
1000106c:	00023700 	call	10002370 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
10001070:	00001d06 	br	100010e8 <main+0xd24>
		{

			usb_ctl_val = UsbRead(ctl_reg);
10001074:	d0a6cb0b 	ldhu	r2,-25812(gp)
10001078:	10bfffcc 	andi	r2,r2,65535
1000107c:	1009883a 	mov	r4,r2
10001080:	00011540 	call	10001154 <UsbRead>
10001084:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
10001088:	0104e204 	movi	r4,5000
1000108c:	000f9dc0 	call	1000f9dc <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001090:	d0a6cb0b 	ldhu	r2,-25812(gp)
10001094:	10bfffcc 	andi	r2,r2,65535
10001098:	1009883a 	mov	r4,r2
1000109c:	00011540 	call	10001154 <UsbRead>
100010a0:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
100010a4:	0104e204 	movi	r4,5000
100010a8:	000f9dc0 	call	1000f9dc <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100010ac:	d0a6cb0b 	ldhu	r2,-25812(gp)
100010b0:	10bfffcc 	andi	r2,r2,65535
100010b4:	1009883a 	mov	r4,r2
100010b8:	00011540 	call	10001154 <UsbRead>
100010bc:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
100010c0:	0104e204 	movi	r4,5000
100010c4:	000f9dc0 	call	1000f9dc <usleep>

			if(usb_ctl_val & no_device)
100010c8:	d0a6cb8b 	ldhu	r2,-25810(gp)
100010cc:	e0fffb0b 	ldhu	r3,-20(fp)
100010d0:	1884703a 	and	r2,r3,r2
100010d4:	10bfffcc 	andi	r2,r2,65535
100010d8:	10000126 	beq	r2,zero,100010e0 <main+0xd1c>
				goto USB_HOT_PLUG;
100010dc:	003cc406 	br	100003f0 <__alt_data_end+0xf80003f0>

			usleep(200);
100010e0:	01003204 	movi	r4,200
100010e4:	000f9dc0 	call	1000f9dc <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
100010e8:	d0a6cb8b 	ldhu	r2,-25810(gp)
100010ec:	e0fffb0b 	ldhu	r3,-20(fp)
100010f0:	1884703a 	and	r2,r3,r2
100010f4:	10bfffcc 	andi	r2,r2,65535
100010f8:	103fde26 	beq	r2,zero,10001074 <__alt_data_end+0xf8001074>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
100010fc:	003f5406 	br	10000e50 <__alt_data_end+0xf8000e50>

10001100 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
10001100:	defffc04 	addi	sp,sp,-16
10001104:	dfc00315 	stw	ra,12(sp)
10001108:	df000215 	stw	fp,8(sp)
1000110c:	df000204 	addi	fp,sp,8
10001110:	2007883a 	mov	r3,r4
10001114:	2805883a 	mov	r2,r5
10001118:	e0fffe0d 	sth	r3,-8(fp)
1000111c:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
10001120:	e0bffe0b 	ldhu	r2,-8(fp)
10001124:	01000084 	movi	r4,2
10001128:	100b883a 	mov	r5,r2
1000112c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA, Data);
10001130:	e0bfff0b 	ldhu	r2,-4(fp)
10001134:	0009883a 	mov	r4,zero
10001138:	100b883a 	mov	r5,r2
1000113c:	00002f00 	call	100002f0 <IO_write>
}
10001140:	e037883a 	mov	sp,fp
10001144:	dfc00117 	ldw	ra,4(sp)
10001148:	df000017 	ldw	fp,0(sp)
1000114c:	dec00204 	addi	sp,sp,8
10001150:	f800283a 	ret

10001154 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
10001154:	defffd04 	addi	sp,sp,-12
10001158:	dfc00215 	stw	ra,8(sp)
1000115c:	df000115 	stw	fp,4(sp)
10001160:	df000104 	addi	fp,sp,4
10001164:	2005883a 	mov	r2,r4
10001168:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
1000116c:	e0bfff0b 	ldhu	r2,-4(fp)
10001170:	01000084 	movi	r4,2
10001174:	100b883a 	mov	r5,r2
10001178:	00002f00 	call	100002f0 <IO_write>
	return IO_read(HPI_DATA);
1000117c:	0009883a 	mov	r4,zero
10001180:	000035c0 	call	1000035c <IO_read>
}
10001184:	e037883a 	mov	sp,fp
10001188:	dfc00117 	ldw	ra,4(sp)
1000118c:	df000017 	ldw	fp,0(sp)
10001190:	dec00204 	addi	sp,sp,8
10001194:	f800283a 	ret

10001198 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
10001198:	defffe04 	addi	sp,sp,-8
1000119c:	dfc00115 	stw	ra,4(sp)
100011a0:	df000015 	stw	fp,0(sp)
100011a4:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
100011a8:	01000044 	movi	r4,1
100011ac:	017e9414 	movui	r5,64080
100011b0:	00002f00 	call	100002f0 <IO_write>
	usleep(100000);
100011b4:	010000b4 	movhi	r4,2
100011b8:	2121a804 	addi	r4,r4,-31072
100011bc:	000f9dc0 	call	1000f9dc <usleep>
	printf("[USB INIT]:reset finished!\n");
100011c0:	01040074 	movhi	r4,4097
100011c4:	21082a04 	addi	r4,r4,8360
100011c8:	00023700 	call	10002370 <puts>

	usleep(500000);
100011cc:	01000234 	movhi	r4,8
100011d0:	21284804 	addi	r4,r4,-24288
100011d4:	000f9dc0 	call	1000f9dc <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
100011d8:	01040074 	movhi	r4,4097
100011dc:	21083104 	addi	r4,r4,8388
100011e0:	00023700 	call	10002370 <puts>
	IO_read(HPI_MAILBOX);
100011e4:	01000044 	movi	r4,1
100011e8:	000035c0 	call	1000035c <IO_read>
	IO_read(HPI_STATUS);
100011ec:	010000c4 	movi	r4,3
100011f0:	000035c0 	call	1000035c <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
100011f4:	01005104 	movi	r4,324
100011f8:	00011540 	call	10001154 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
100011fc:	01005104 	movi	r4,324
10001200:	000b883a 	mov	r5,zero
10001204:	00011000 	call	10001100 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
10001208:	01005204 	movi	r4,328
1000120c:	00011540 	call	10001154 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
10001210:	01005204 	movi	r4,328
10001214:	000b883a 	mov	r5,zero
10001218:	00011000 	call	10001100 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
1000121c:	01302414 	movui	r4,49296
10001220:	017fffd4 	movui	r5,65535
10001224:	00011000 	call	10001100 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
10001228:	01302c14 	movui	r4,49328
1000122c:	017fffd4 	movui	r5,65535
10001230:	00011000 	call	10001100 <UsbWrite>
}
10001234:	e037883a 	mov	sp,fp
10001238:	dfc00117 	ldw	ra,4(sp)
1000123c:	df000017 	ldw	fp,0(sp)
10001240:	dec00204 	addi	sp,sp,8
10001244:	f800283a 	ret

10001248 <UsbSetAddress>:


void UsbSetAddress()
{
10001248:	defffe04 	addi	sp,sp,-8
1000124c:	dfc00115 	stw	ra,4(sp)
10001250:	df000015 	stw	fp,0(sp)
10001254:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001258:	01000084 	movi	r4,2
1000125c:	01414004 	movi	r5,1280
10001260:	00002f00 	call	100002f0 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
10001264:	0009883a 	mov	r4,zero
10001268:	01414304 	movi	r5,1292
1000126c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001270:	0009883a 	mov	r4,zero
10001274:	01400204 	movi	r5,8
10001278:	00002f00 	call	100002f0 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
1000127c:	0009883a 	mov	r4,zero
10001280:	01403404 	movi	r5,208
10001284:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001288:	0009883a 	mov	r4,zero
1000128c:	01400044 	movi	r5,1
10001290:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001294:	0009883a 	mov	r4,zero
10001298:	014004c4 	movi	r5,19
1000129c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0514);
100012a0:	0009883a 	mov	r4,zero
100012a4:	01414504 	movi	r5,1300
100012a8:	00002f00 	call	100002f0 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
100012ac:	0009883a 	mov	r4,zero
100012b0:	01414004 	movi	r5,1280
100012b4:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0002);
100012b8:	0009883a 	mov	r4,zero
100012bc:	01400084 	movi	r5,2
100012c0:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);
100012c4:	0009883a 	mov	r4,zero
100012c8:	000b883a 	mov	r5,zero
100012cc:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);
100012d0:	0009883a 	mov	r4,zero
100012d4:	000b883a 	mov	r5,zero
100012d8:	00002f00 	call	100002f0 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
100012dc:	0009883a 	mov	r4,zero
100012e0:	000b883a 	mov	r5,zero
100012e4:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);//
100012e8:	0009883a 	mov	r4,zero
100012ec:	000b883a 	mov	r5,zero
100012f0:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0090);//
100012f4:	0009883a 	mov	r4,zero
100012f8:	01402404 	movi	r5,144
100012fc:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0041);
10001300:	0009883a 	mov	r4,zero
10001304:	01401044 	movi	r5,65
10001308:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000130c:	0009883a 	mov	r4,zero
10001310:	014004c4 	movi	r5,19
10001314:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001318:	0009883a 	mov	r4,zero
1000131c:	000b883a 	mov	r5,zero
10001320:	00002f00 	call	100002f0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001324:	01006c04 	movi	r4,432
10001328:	01414004 	movi	r5,1280
1000132c:	00011000 	call	10001100 <UsbWrite>
}
10001330:	e037883a 	mov	sp,fp
10001334:	dfc00117 	ldw	ra,4(sp)
10001338:	df000017 	ldw	fp,0(sp)
1000133c:	dec00204 	addi	sp,sp,8
10001340:	f800283a 	ret

10001344 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
10001344:	defffe04 	addi	sp,sp,-8
10001348:	dfc00115 	stw	ra,4(sp)
1000134c:	df000015 	stw	fp,0(sp)
10001350:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001354:	01000084 	movi	r4,2
10001358:	01414004 	movi	r5,1280
1000135c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001360:	0009883a 	mov	r4,zero
10001364:	01414304 	movi	r5,1292
10001368:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000136c:	0009883a 	mov	r4,zero
10001370:	01400204 	movi	r5,8
10001374:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001378:	0009883a 	mov	r4,zero
1000137c:	0140b404 	movi	r5,720
10001380:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001384:	0009883a 	mov	r4,zero
10001388:	01400044 	movi	r5,1
1000138c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001390:	0009883a 	mov	r4,zero
10001394:	014004c4 	movi	r5,19
10001398:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000139c:	0009883a 	mov	r4,zero
100013a0:	01414504 	movi	r5,1300
100013a4:	00002f00 	call	100002f0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100013a8:	0009883a 	mov	r4,zero
100013ac:	0141a004 	movi	r5,1664
100013b0:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
100013b4:	0009883a 	mov	r4,zero
100013b8:	01404004 	movi	r5,256
100013bc:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);
100013c0:	0009883a 	mov	r4,zero
100013c4:	000b883a 	mov	r5,zero
100013c8:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0008);
100013cc:	0009883a 	mov	r4,zero
100013d0:	01400204 	movi	r5,8
100013d4:	00002f00 	call	100002f0 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
100013d8:	0009883a 	mov	r4,zero
100013dc:	01414b04 	movi	r5,1324
100013e0:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0008);//
100013e4:	0009883a 	mov	r4,zero
100013e8:	01400204 	movi	r5,8
100013ec:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0290);//
100013f0:	0009883a 	mov	r4,zero
100013f4:	0140a404 	movi	r5,656
100013f8:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0041);
100013fc:	0009883a 	mov	r4,zero
10001400:	01401044 	movi	r5,65
10001404:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001408:	0009883a 	mov	r4,zero
1000140c:	014004c4 	movi	r5,19
10001410:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0520);
10001414:	0009883a 	mov	r4,zero
10001418:	01414804 	movi	r5,1312
1000141c:	00002f00 	call	100002f0 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
10001420:	0009883a 	mov	r4,zero
10001424:	000b883a 	mov	r5,zero
10001428:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
1000142c:	0009883a 	mov	r4,zero
10001430:	000b883a 	mov	r5,zero
10001434:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
10001438:	0009883a 	mov	r4,zero
1000143c:	01408404 	movi	r5,528
10001440:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0041);
10001444:	0009883a 	mov	r4,zero
10001448:	01401044 	movi	r5,65
1000144c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001450:	0009883a 	mov	r4,zero
10001454:	014004c4 	movi	r5,19
10001458:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000145c:	0009883a 	mov	r4,zero
10001460:	000b883a 	mov	r5,zero
10001464:	00002f00 	call	100002f0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001468:	01006c04 	movi	r4,432
1000146c:	01414004 	movi	r5,1280
10001470:	00011000 	call	10001100 <UsbWrite>
}
10001474:	e037883a 	mov	sp,fp
10001478:	dfc00117 	ldw	ra,4(sp)
1000147c:	df000017 	ldw	fp,0(sp)
10001480:	dec00204 	addi	sp,sp,8
10001484:	f800283a 	ret

10001488 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
10001488:	defffe04 	addi	sp,sp,-8
1000148c:	dfc00115 	stw	ra,4(sp)
10001490:	df000015 	stw	fp,0(sp)
10001494:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001498:	01000084 	movi	r4,2
1000149c:	01414004 	movi	r5,1280
100014a0:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x050C);
100014a4:	0009883a 	mov	r4,zero
100014a8:	01414304 	movi	r5,1292
100014ac:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100014b0:	0009883a 	mov	r4,zero
100014b4:	01400204 	movi	r5,8
100014b8:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100014bc:	0009883a 	mov	r4,zero
100014c0:	0140b404 	movi	r5,720
100014c4:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0001);
100014c8:	0009883a 	mov	r4,zero
100014cc:	01400044 	movi	r5,1
100014d0:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);
100014d4:	0009883a 	mov	r4,zero
100014d8:	014004c4 	movi	r5,19
100014dc:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0514);
100014e0:	0009883a 	mov	r4,zero
100014e4:	01414504 	movi	r5,1300
100014e8:	00002f00 	call	100002f0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100014ec:	0009883a 	mov	r4,zero
100014f0:	0141a004 	movi	r5,1664
100014f4:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
100014f8:	0009883a 	mov	r4,zero
100014fc:	01404004 	movi	r5,256
10001500:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001504:	0009883a 	mov	r4,zero
10001508:	000b883a 	mov	r5,zero
1000150c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
10001510:	0009883a 	mov	r4,zero
10001514:	01400484 	movi	r5,18
10001518:	00002f00 	call	100002f0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
1000151c:	0009883a 	mov	r4,zero
10001520:	01415104 	movi	r5,1348
10001524:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001528:	0009883a 	mov	r4,zero
1000152c:	01400204 	movi	r5,8
10001530:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001534:	0009883a 	mov	r4,zero
10001538:	0140a404 	movi	r5,656
1000153c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001540:	0009883a 	mov	r4,zero
10001544:	01401044 	movi	r5,65
10001548:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
1000154c:	0009883a 	mov	r4,zero
10001550:	014004c4 	movi	r5,19
10001554:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001558:	0009883a 	mov	r4,zero
1000155c:	01414804 	movi	r5,1312
10001560:	00002f00 	call	100002f0 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10001564:	0009883a 	mov	r4,zero
10001568:	01415304 	movi	r5,1356
1000156c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001570:	0009883a 	mov	r4,zero
10001574:	01400204 	movi	r5,8
10001578:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
1000157c:	0009883a 	mov	r4,zero
10001580:	0140a404 	movi	r5,656
10001584:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
10001588:	0009883a 	mov	r4,zero
1000158c:	01400044 	movi	r5,1
10001590:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001594:	0009883a 	mov	r4,zero
10001598:	014004c4 	movi	r5,19
1000159c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100015a0:	0009883a 	mov	r4,zero
100015a4:	01414b04 	movi	r5,1324
100015a8:	00002f00 	call	100002f0 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
100015ac:	0009883a 	mov	r4,zero
100015b0:	01415504 	movi	r5,1364
100015b4:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
100015b8:	0009883a 	mov	r4,zero
100015bc:	01400084 	movi	r5,2
100015c0:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
100015c4:	0009883a 	mov	r4,zero
100015c8:	0140a404 	movi	r5,656
100015cc:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100015d0:	0009883a 	mov	r4,zero
100015d4:	01401044 	movi	r5,65
100015d8:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100015dc:	0009883a 	mov	r4,zero
100015e0:	014004c4 	movi	r5,19
100015e4:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
100015e8:	0009883a 	mov	r4,zero
100015ec:	01414e04 	movi	r5,1336
100015f0:	00002f00 	call	100002f0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
100015f4:	0009883a 	mov	r4,zero
100015f8:	000b883a 	mov	r5,zero
100015fc:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10001600:	0009883a 	mov	r4,zero
10001604:	000b883a 	mov	r5,zero
10001608:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
1000160c:	0009883a 	mov	r4,zero
10001610:	01408404 	movi	r5,528
10001614:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
10001618:	0009883a 	mov	r4,zero
1000161c:	01401044 	movi	r5,65
10001620:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10001624:	0009883a 	mov	r4,zero
10001628:	014004c4 	movi	r5,19
1000162c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10001630:	0009883a 	mov	r4,zero
10001634:	000b883a 	mov	r5,zero
10001638:	00002f00 	call	100002f0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000163c:	01006c04 	movi	r4,432
10001640:	01414004 	movi	r5,1280
10001644:	00011000 	call	10001100 <UsbWrite>
}
10001648:	e037883a 	mov	sp,fp
1000164c:	dfc00117 	ldw	ra,4(sp)
10001650:	df000017 	ldw	fp,0(sp)
10001654:	dec00204 	addi	sp,sp,8
10001658:	f800283a 	ret

1000165c <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
1000165c:	defffe04 	addi	sp,sp,-8
10001660:	dfc00115 	stw	ra,4(sp)
10001664:	df000015 	stw	fp,0(sp)
10001668:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000166c:	01000084 	movi	r4,2
10001670:	01414004 	movi	r5,1280
10001674:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001678:	0009883a 	mov	r4,zero
1000167c:	01414304 	movi	r5,1292
10001680:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001684:	0009883a 	mov	r4,zero
10001688:	01400204 	movi	r5,8
1000168c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001690:	0009883a 	mov	r4,zero
10001694:	0140b404 	movi	r5,720
10001698:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0001);
1000169c:	0009883a 	mov	r4,zero
100016a0:	01400044 	movi	r5,1
100016a4:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);
100016a8:	0009883a 	mov	r4,zero
100016ac:	014004c4 	movi	r5,19
100016b0:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0514);
100016b4:	0009883a 	mov	r4,zero
100016b8:	01414504 	movi	r5,1300
100016bc:	00002f00 	call	100002f0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100016c0:	0009883a 	mov	r4,zero
100016c4:	0141a004 	movi	r5,1664
100016c8:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
100016cc:	0009883a 	mov	r4,zero
100016d0:	01408004 	movi	r5,512
100016d4:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100016d8:	0009883a 	mov	r4,zero
100016dc:	000b883a 	mov	r5,zero
100016e0:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
100016e4:	0009883a 	mov	r4,zero
100016e8:	01400244 	movi	r5,9
100016ec:	00002f00 	call	100002f0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
100016f0:	0009883a 	mov	r4,zero
100016f4:	01415104 	movi	r5,1348
100016f8:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100016fc:	0009883a 	mov	r4,zero
10001700:	01400204 	movi	r5,8
10001704:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001708:	0009883a 	mov	r4,zero
1000170c:	0140a404 	movi	r5,656
10001710:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001714:	0009883a 	mov	r4,zero
10001718:	01401044 	movi	r5,65
1000171c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001720:	0009883a 	mov	r4,zero
10001724:	014004c4 	movi	r5,19
10001728:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
1000172c:	0009883a 	mov	r4,zero
10001730:	01414804 	movi	r5,1312
10001734:	00002f00 	call	100002f0 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10001738:	0009883a 	mov	r4,zero
1000173c:	01415304 	movi	r5,1356
10001740:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
10001744:	0009883a 	mov	r4,zero
10001748:	01400044 	movi	r5,1
1000174c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001750:	0009883a 	mov	r4,zero
10001754:	0140a404 	movi	r5,656
10001758:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
1000175c:	0009883a 	mov	r4,zero
10001760:	01400044 	movi	r5,1
10001764:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001768:	0009883a 	mov	r4,zero
1000176c:	014004c4 	movi	r5,19
10001770:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001774:	0009883a 	mov	r4,zero
10001778:	01414b04 	movi	r5,1324
1000177c:	00002f00 	call	100002f0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10001780:	0009883a 	mov	r4,zero
10001784:	000b883a 	mov	r5,zero
10001788:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
1000178c:	0009883a 	mov	r4,zero
10001790:	000b883a 	mov	r5,zero
10001794:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10001798:	0009883a 	mov	r4,zero
1000179c:	01408404 	movi	r5,528
100017a0:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100017a4:	0009883a 	mov	r4,zero
100017a8:	01401044 	movi	r5,65
100017ac:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100017b0:	0009883a 	mov	r4,zero
100017b4:	014004c4 	movi	r5,19
100017b8:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
100017bc:	0009883a 	mov	r4,zero
100017c0:	000b883a 	mov	r5,zero
100017c4:	00002f00 	call	100002f0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100017c8:	01006c04 	movi	r4,432
100017cc:	01414004 	movi	r5,1280
100017d0:	00011000 	call	10001100 <UsbWrite>
}
100017d4:	e037883a 	mov	sp,fp
100017d8:	dfc00117 	ldw	ra,4(sp)
100017dc:	df000017 	ldw	fp,0(sp)
100017e0:	dec00204 	addi	sp,sp,8
100017e4:	f800283a 	ret

100017e8 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
100017e8:	defffe04 	addi	sp,sp,-8
100017ec:	dfc00115 	stw	ra,4(sp)
100017f0:	df000015 	stw	fp,0(sp)
100017f4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100017f8:	01000084 	movi	r4,2
100017fc:	01414004 	movi	r5,1280
10001800:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001804:	0009883a 	mov	r4,zero
10001808:	01414304 	movi	r5,1292
1000180c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001810:	0009883a 	mov	r4,zero
10001814:	01400204 	movi	r5,8
10001818:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
1000181c:	0009883a 	mov	r4,zero
10001820:	0140b404 	movi	r5,720
10001824:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001828:	0009883a 	mov	r4,zero
1000182c:	01400044 	movi	r5,1
10001830:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001834:	0009883a 	mov	r4,zero
10001838:	014004c4 	movi	r5,19
1000183c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001840:	0009883a 	mov	r4,zero
10001844:	01414504 	movi	r5,1300
10001848:	00002f00 	call	100002f0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
1000184c:	0009883a 	mov	r4,zero
10001850:	0141a004 	movi	r5,1664
10001854:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10001858:	0009883a 	mov	r4,zero
1000185c:	01408004 	movi	r5,512
10001860:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001864:	0009883a 	mov	r4,zero
10001868:	000b883a 	mov	r5,zero
1000186c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
10001870:	0009883a 	mov	r4,zero
10001874:	01403fc4 	movi	r5,255
10001878:	00002f00 	call	100002f0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
1000187c:	0009883a 	mov	r4,zero
10001880:	01415704 	movi	r5,1372
10001884:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001888:	0009883a 	mov	r4,zero
1000188c:	01400204 	movi	r5,8
10001890:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001894:	0009883a 	mov	r4,zero
10001898:	0140a404 	movi	r5,656
1000189c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100018a0:	0009883a 	mov	r4,zero
100018a4:	01401044 	movi	r5,65
100018a8:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100018ac:	0009883a 	mov	r4,zero
100018b0:	014004c4 	movi	r5,19
100018b4:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100018b8:	0009883a 	mov	r4,zero
100018bc:	01414804 	movi	r5,1312
100018c0:	00002f00 	call	100002f0 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
100018c4:	0009883a 	mov	r4,zero
100018c8:	01415904 	movi	r5,1380
100018cc:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100018d0:	0009883a 	mov	r4,zero
100018d4:	01400204 	movi	r5,8
100018d8:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100018dc:	0009883a 	mov	r4,zero
100018e0:	0140a404 	movi	r5,656
100018e4:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100018e8:	0009883a 	mov	r4,zero
100018ec:	01400044 	movi	r5,1
100018f0:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100018f4:	0009883a 	mov	r4,zero
100018f8:	014004c4 	movi	r5,19
100018fc:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001900:	0009883a 	mov	r4,zero
10001904:	01414b04 	movi	r5,1324
10001908:	00002f00 	call	100002f0 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
1000190c:	0009883a 	mov	r4,zero
10001910:	01415b04 	movi	r5,1388
10001914:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10001918:	0009883a 	mov	r4,zero
1000191c:	01400204 	movi	r5,8
10001920:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10001924:	0009883a 	mov	r4,zero
10001928:	0140a404 	movi	r5,656
1000192c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001930:	0009883a 	mov	r4,zero
10001934:	01401044 	movi	r5,65
10001938:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
1000193c:	0009883a 	mov	r4,zero
10001940:	014004c4 	movi	r5,19
10001944:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001948:	0009883a 	mov	r4,zero
1000194c:	01414e04 	movi	r5,1336
10001950:	00002f00 	call	100002f0 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
10001954:	0009883a 	mov	r4,zero
10001958:	01415d04 	movi	r5,1396
1000195c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10001960:	0009883a 	mov	r4,zero
10001964:	01400204 	movi	r5,8
10001968:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
1000196c:	0009883a 	mov	r4,zero
10001970:	0140a404 	movi	r5,656
10001974:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10001978:	0009883a 	mov	r4,zero
1000197c:	01400044 	movi	r5,1
10001980:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10001984:	0009883a 	mov	r4,zero
10001988:	014004c4 	movi	r5,19
1000198c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10001990:	0009883a 	mov	r4,zero
10001994:	01415104 	movi	r5,1348
10001998:	00002f00 	call	100002f0 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
1000199c:	0009883a 	mov	r4,zero
100019a0:	01415f04 	movi	r5,1404
100019a4:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
100019a8:	0009883a 	mov	r4,zero
100019ac:	01400084 	movi	r5,2
100019b0:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100019b4:	0009883a 	mov	r4,zero
100019b8:	0140a404 	movi	r5,656
100019bc:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
100019c0:	0009883a 	mov	r4,zero
100019c4:	01401044 	movi	r5,65
100019c8:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100019cc:	0009883a 	mov	r4,zero
100019d0:	014004c4 	movi	r5,19
100019d4:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
100019d8:	0009883a 	mov	r4,zero
100019dc:	01415404 	movi	r5,1360
100019e0:	00002f00 	call	100002f0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
100019e4:	0009883a 	mov	r4,zero
100019e8:	000b883a 	mov	r5,zero
100019ec:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
100019f0:	0009883a 	mov	r4,zero
100019f4:	000b883a 	mov	r5,zero
100019f8:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
100019fc:	0009883a 	mov	r4,zero
10001a00:	01408404 	movi	r5,528
10001a04:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10001a08:	0009883a 	mov	r4,zero
10001a0c:	01401044 	movi	r5,65
10001a10:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001a14:	0009883a 	mov	r4,zero
10001a18:	014004c4 	movi	r5,19
10001a1c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10001a20:	0009883a 	mov	r4,zero
10001a24:	000b883a 	mov	r5,zero
10001a28:	00002f00 	call	100002f0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001a2c:	01006c04 	movi	r4,432
10001a30:	01414004 	movi	r5,1280
10001a34:	00011000 	call	10001100 <UsbWrite>
}
10001a38:	e037883a 	mov	sp,fp
10001a3c:	dfc00117 	ldw	ra,4(sp)
10001a40:	df000017 	ldw	fp,0(sp)
10001a44:	dec00204 	addi	sp,sp,8
10001a48:	f800283a 	ret

10001a4c <UsbSetConfig>:

void UsbSetConfig()
{
10001a4c:	defffe04 	addi	sp,sp,-8
10001a50:	dfc00115 	stw	ra,4(sp)
10001a54:	df000015 	stw	fp,0(sp)
10001a58:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001a5c:	01000084 	movi	r4,2
10001a60:	01414004 	movi	r5,1280
10001a64:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001a68:	0009883a 	mov	r4,zero
10001a6c:	01414304 	movi	r5,1292
10001a70:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001a74:	0009883a 	mov	r4,zero
10001a78:	01400204 	movi	r5,8
10001a7c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001a80:	0009883a 	mov	r4,zero
10001a84:	0140b404 	movi	r5,720
10001a88:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001a8c:	0009883a 	mov	r4,zero
10001a90:	01400044 	movi	r5,1
10001a94:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001a98:	0009883a 	mov	r4,zero
10001a9c:	014004c4 	movi	r5,19
10001aa0:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001aa4:	0009883a 	mov	r4,zero
10001aa8:	01414504 	movi	r5,1300
10001aac:	00002f00 	call	100002f0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10001ab0:	0009883a 	mov	r4,zero
10001ab4:	01424004 	movi	r5,2304
10001ab8:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
10001abc:	0009883a 	mov	r4,zero
10001ac0:	01400044 	movi	r5,1
10001ac4:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001ac8:	0009883a 	mov	r4,zero
10001acc:	000b883a 	mov	r5,zero
10001ad0:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001ad4:	0009883a 	mov	r4,zero
10001ad8:	000b883a 	mov	r5,zero
10001adc:	00002f00 	call	100002f0 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001ae0:	0009883a 	mov	r4,zero
10001ae4:	000b883a 	mov	r5,zero
10001ae8:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10001aec:	0009883a 	mov	r4,zero
10001af0:	000b883a 	mov	r5,zero
10001af4:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10001af8:	0009883a 	mov	r4,zero
10001afc:	0140a404 	movi	r5,656
10001b00:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10001b04:	0009883a 	mov	r4,zero
10001b08:	01401044 	movi	r5,65
10001b0c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001b10:	0009883a 	mov	r4,zero
10001b14:	014004c4 	movi	r5,19
10001b18:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001b1c:	0009883a 	mov	r4,zero
10001b20:	000b883a 	mov	r5,zero
10001b24:	00002f00 	call	100002f0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001b28:	01006c04 	movi	r4,432
10001b2c:	01414004 	movi	r5,1280
10001b30:	00011000 	call	10001100 <UsbWrite>

}
10001b34:	e037883a 	mov	sp,fp
10001b38:	dfc00117 	ldw	ra,4(sp)
10001b3c:	df000017 	ldw	fp,0(sp)
10001b40:	dec00204 	addi	sp,sp,8
10001b44:	f800283a 	ret

10001b48 <UsbClassRequest>:

void UsbClassRequest()
{
10001b48:	defffe04 	addi	sp,sp,-8
10001b4c:	dfc00115 	stw	ra,4(sp)
10001b50:	df000015 	stw	fp,0(sp)
10001b54:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001b58:	01000084 	movi	r4,2
10001b5c:	01414004 	movi	r5,1280
10001b60:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001b64:	0009883a 	mov	r4,zero
10001b68:	01414304 	movi	r5,1292
10001b6c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001b70:	0009883a 	mov	r4,zero
10001b74:	01400204 	movi	r5,8
10001b78:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001b7c:	0009883a 	mov	r4,zero
10001b80:	0140b404 	movi	r5,720
10001b84:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001b88:	0009883a 	mov	r4,zero
10001b8c:	01400044 	movi	r5,1
10001b90:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001b94:	0009883a 	mov	r4,zero
10001b98:	014004c4 	movi	r5,19
10001b9c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001ba0:	0009883a 	mov	r4,zero
10001ba4:	01414504 	movi	r5,1300
10001ba8:	00002f00 	call	100002f0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10001bac:	0009883a 	mov	r4,zero
10001bb0:	01428844 	movi	r5,2593
10001bb4:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
10001bb8:	0009883a 	mov	r4,zero
10001bbc:	000b883a 	mov	r5,zero
10001bc0:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001bc4:	0009883a 	mov	r4,zero
10001bc8:	000b883a 	mov	r5,zero
10001bcc:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001bd0:	0009883a 	mov	r4,zero
10001bd4:	000b883a 	mov	r5,zero
10001bd8:	00002f00 	call	100002f0 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001bdc:	0009883a 	mov	r4,zero
10001be0:	000b883a 	mov	r5,zero
10001be4:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10001be8:	0009883a 	mov	r4,zero
10001bec:	000b883a 	mov	r5,zero
10001bf0:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10001bf4:	0009883a 	mov	r4,zero
10001bf8:	0140a404 	movi	r5,656
10001bfc:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10001c00:	0009883a 	mov	r4,zero
10001c04:	01401044 	movi	r5,65
10001c08:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001c0c:	0009883a 	mov	r4,zero
10001c10:	014004c4 	movi	r5,19
10001c14:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001c18:	0009883a 	mov	r4,zero
10001c1c:	000b883a 	mov	r5,zero
10001c20:	00002f00 	call	100002f0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001c24:	01006c04 	movi	r4,432
10001c28:	01414004 	movi	r5,1280
10001c2c:	00011000 	call	10001100 <UsbWrite>
}
10001c30:	e037883a 	mov	sp,fp
10001c34:	dfc00117 	ldw	ra,4(sp)
10001c38:	df000017 	ldw	fp,0(sp)
10001c3c:	dec00204 	addi	sp,sp,8
10001c40:	f800283a 	ret

10001c44 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10001c44:	defffe04 	addi	sp,sp,-8
10001c48:	dfc00115 	stw	ra,4(sp)
10001c4c:	df000015 	stw	fp,0(sp)
10001c50:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001c54:	01000084 	movi	r4,2
10001c58:	01414004 	movi	r5,1280
10001c5c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001c60:	0009883a 	mov	r4,zero
10001c64:	01414304 	movi	r5,1292
10001c68:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001c6c:	0009883a 	mov	r4,zero
10001c70:	01400204 	movi	r5,8
10001c74:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001c78:	0009883a 	mov	r4,zero
10001c7c:	0140b404 	movi	r5,720
10001c80:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001c84:	0009883a 	mov	r4,zero
10001c88:	01400044 	movi	r5,1
10001c8c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001c90:	0009883a 	mov	r4,zero
10001c94:	014004c4 	movi	r5,19
10001c98:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001c9c:	0009883a 	mov	r4,zero
10001ca0:	01414504 	movi	r5,1300
10001ca4:	00002f00 	call	100002f0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10001ca8:	0009883a 	mov	r4,zero
10001cac:	0141a044 	movi	r5,1665
10001cb0:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
10001cb4:	0009883a 	mov	r4,zero
10001cb8:	01484004 	movi	r5,8448
10001cbc:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001cc0:	0009883a 	mov	r4,zero
10001cc4:	000b883a 	mov	r5,zero
10001cc8:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10001ccc:	0009883a 	mov	r4,zero
10001cd0:	01401ec4 	movi	r5,123
10001cd4:	00002f00 	call	100002f0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001cd8:	0009883a 	mov	r4,zero
10001cdc:	01415104 	movi	r5,1348
10001ce0:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001ce4:	0009883a 	mov	r4,zero
10001ce8:	01400204 	movi	r5,8
10001cec:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001cf0:	0009883a 	mov	r4,zero
10001cf4:	0140a404 	movi	r5,656
10001cf8:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001cfc:	0009883a 	mov	r4,zero
10001d00:	01401044 	movi	r5,65
10001d04:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001d08:	0009883a 	mov	r4,zero
10001d0c:	014004c4 	movi	r5,19
10001d10:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001d14:	0009883a 	mov	r4,zero
10001d18:	01414804 	movi	r5,1312
10001d1c:	00002f00 	call	100002f0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10001d20:	0009883a 	mov	r4,zero
10001d24:	000b883a 	mov	r5,zero
10001d28:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10001d2c:	0009883a 	mov	r4,zero
10001d30:	000b883a 	mov	r5,zero
10001d34:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10001d38:	0009883a 	mov	r4,zero
10001d3c:	01408404 	movi	r5,528
10001d40:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001d44:	0009883a 	mov	r4,zero
10001d48:	01401044 	movi	r5,65
10001d4c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001d50:	0009883a 	mov	r4,zero
10001d54:	014004c4 	movi	r5,19
10001d58:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10001d5c:	0009883a 	mov	r4,zero
10001d60:	000b883a 	mov	r5,zero
10001d64:	00002f00 	call	100002f0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001d68:	01006c04 	movi	r4,432
10001d6c:	01414004 	movi	r5,1280
10001d70:	00011000 	call	10001100 <UsbWrite>

}
10001d74:	e037883a 	mov	sp,fp
10001d78:	dfc00117 	ldw	ra,4(sp)
10001d7c:	df000017 	ldw	fp,0(sp)
10001d80:	dec00204 	addi	sp,sp,8
10001d84:	f800283a 	ret

10001d88 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10001d88:	defffe04 	addi	sp,sp,-8
10001d8c:	dfc00115 	stw	ra,4(sp)
10001d90:	df000015 	stw	fp,0(sp)
10001d94:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001d98:	01000084 	movi	r4,2
10001d9c:	01414004 	movi	r5,1280
10001da0:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001da4:	0009883a 	mov	r4,zero
10001da8:	01414304 	movi	r5,1292
10001dac:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001db0:	0009883a 	mov	r4,zero
10001db4:	01400204 	movi	r5,8
10001db8:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001dbc:	0009883a 	mov	r4,zero
10001dc0:	0140b404 	movi	r5,720
10001dc4:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001dc8:	0009883a 	mov	r4,zero
10001dcc:	01400044 	movi	r5,1
10001dd0:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001dd4:	0009883a 	mov	r4,zero
10001dd8:	014004c4 	movi	r5,19
10001ddc:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001de0:	0009883a 	mov	r4,zero
10001de4:	01414504 	movi	r5,1300
10001de8:	00002f00 	call	100002f0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10001dec:	0009883a 	mov	r4,zero
10001df0:	0141a044 	movi	r5,1665
10001df4:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10001df8:	0009883a 	mov	r4,zero
10001dfc:	01488004 	movi	r5,8704
10001e00:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001e04:	0009883a 	mov	r4,zero
10001e08:	000b883a 	mov	r5,zero
10001e0c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10001e10:	0009883a 	mov	r4,zero
10001e14:	01401ec4 	movi	r5,123
10001e18:	00002f00 	call	100002f0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10001e1c:	0009883a 	mov	r4,zero
10001e20:	01416004 	movi	r5,1408
10001e24:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001e28:	0009883a 	mov	r4,zero
10001e2c:	01400204 	movi	r5,8
10001e30:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001e34:	0009883a 	mov	r4,zero
10001e38:	0140a404 	movi	r5,656
10001e3c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001e40:	0009883a 	mov	r4,zero
10001e44:	01401044 	movi	r5,65
10001e48:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001e4c:	0009883a 	mov	r4,zero
10001e50:	014004c4 	movi	r5,19
10001e54:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001e58:	0009883a 	mov	r4,zero
10001e5c:	01414804 	movi	r5,1312
10001e60:	00002f00 	call	100002f0 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10001e64:	0009883a 	mov	r4,zero
10001e68:	01416204 	movi	r5,1416
10001e6c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001e70:	0009883a 	mov	r4,zero
10001e74:	01400204 	movi	r5,8
10001e78:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001e7c:	0009883a 	mov	r4,zero
10001e80:	0140a404 	movi	r5,656
10001e84:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001e88:	0009883a 	mov	r4,zero
10001e8c:	01400044 	movi	r5,1
10001e90:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001e94:	0009883a 	mov	r4,zero
10001e98:	014004c4 	movi	r5,19
10001e9c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001ea0:	0009883a 	mov	r4,zero
10001ea4:	01414b04 	movi	r5,1324
10001ea8:	00002f00 	call	100002f0 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
10001eac:	0009883a 	mov	r4,zero
10001eb0:	01416404 	movi	r5,1424
10001eb4:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10001eb8:	0009883a 	mov	r4,zero
10001ebc:	01400204 	movi	r5,8
10001ec0:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10001ec4:	0009883a 	mov	r4,zero
10001ec8:	0140a404 	movi	r5,656
10001ecc:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001ed0:	0009883a 	mov	r4,zero
10001ed4:	01401044 	movi	r5,65
10001ed8:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001edc:	0009883a 	mov	r4,zero
10001ee0:	014004c4 	movi	r5,19
10001ee4:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001ee8:	0009883a 	mov	r4,zero
10001eec:	01414e04 	movi	r5,1336
10001ef0:	00002f00 	call	100002f0 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10001ef4:	0009883a 	mov	r4,zero
10001ef8:	01416604 	movi	r5,1432
10001efc:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10001f00:	0009883a 	mov	r4,zero
10001f04:	01400204 	movi	r5,8
10001f08:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10001f0c:	0009883a 	mov	r4,zero
10001f10:	0140a404 	movi	r5,656
10001f14:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10001f18:	0009883a 	mov	r4,zero
10001f1c:	01400044 	movi	r5,1
10001f20:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10001f24:	0009883a 	mov	r4,zero
10001f28:	014004c4 	movi	r5,19
10001f2c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10001f30:	0009883a 	mov	r4,zero
10001f34:	01415104 	movi	r5,1348
10001f38:	00002f00 	call	100002f0 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10001f3c:	0009883a 	mov	r4,zero
10001f40:	01416804 	movi	r5,1440
10001f44:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001f48:	0009883a 	mov	r4,zero
10001f4c:	01400204 	movi	r5,8
10001f50:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001f54:	0009883a 	mov	r4,zero
10001f58:	0140a404 	movi	r5,656
10001f5c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10001f60:	0009883a 	mov	r4,zero
10001f64:	01401044 	movi	r5,65
10001f68:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001f6c:	0009883a 	mov	r4,zero
10001f70:	014004c4 	movi	r5,19
10001f74:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10001f78:	0009883a 	mov	r4,zero
10001f7c:	01415404 	movi	r5,1360
10001f80:	00002f00 	call	100002f0 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
10001f84:	0009883a 	mov	r4,zero
10001f88:	01416a04 	movi	r5,1448
10001f8c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001f90:	0009883a 	mov	r4,zero
10001f94:	01400204 	movi	r5,8
10001f98:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001f9c:	0009883a 	mov	r4,zero
10001fa0:	0140a404 	movi	r5,656
10001fa4:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001fa8:	0009883a 	mov	r4,zero
10001fac:	01400044 	movi	r5,1
10001fb0:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001fb4:	0009883a 	mov	r4,zero
10001fb8:	014004c4 	movi	r5,19
10001fbc:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
10001fc0:	0009883a 	mov	r4,zero
10001fc4:	01415704 	movi	r5,1372
10001fc8:	00002f00 	call	100002f0 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
10001fcc:	0009883a 	mov	r4,zero
10001fd0:	01416c04 	movi	r5,1456
10001fd4:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10001fd8:	0009883a 	mov	r4,zero
10001fdc:	01400204 	movi	r5,8
10001fe0:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
10001fe4:	0009883a 	mov	r4,zero
10001fe8:	0140a404 	movi	r5,656
10001fec:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
10001ff0:	0009883a 	mov	r4,zero
10001ff4:	01401044 	movi	r5,65
10001ff8:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001ffc:	0009883a 	mov	r4,zero
10002000:	014004c4 	movi	r5,19
10002004:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
10002008:	0009883a 	mov	r4,zero
1000200c:	01415a04 	movi	r5,1384
10002010:	00002f00 	call	100002f0 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10002014:	0009883a 	mov	r4,zero
10002018:	01416e04 	movi	r5,1464
1000201c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
10002020:	0009883a 	mov	r4,zero
10002024:	014000c4 	movi	r5,3
10002028:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
1000202c:	0009883a 	mov	r4,zero
10002030:	0140a404 	movi	r5,656
10002034:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10002038:	0009883a 	mov	r4,zero
1000203c:	01400044 	movi	r5,1
10002040:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
10002044:	0009883a 	mov	r4,zero
10002048:	014004c4 	movi	r5,19
1000204c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
10002050:	0009883a 	mov	r4,zero
10002054:	01415d04 	movi	r5,1396
10002058:	00002f00 	call	100002f0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
1000205c:	0009883a 	mov	r4,zero
10002060:	000b883a 	mov	r5,zero
10002064:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10002068:	0009883a 	mov	r4,zero
1000206c:	000b883a 	mov	r5,zero
10002070:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
10002074:	0009883a 	mov	r4,zero
10002078:	01408404 	movi	r5,528
1000207c:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002080:	0009883a 	mov	r4,zero
10002084:	01401044 	movi	r5,65
10002088:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
1000208c:	0009883a 	mov	r4,zero
10002090:	014004c4 	movi	r5,19
10002094:	00002f00 	call	100002f0 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10002098:	0009883a 	mov	r4,zero
1000209c:	000b883a 	mov	r5,zero
100020a0:	00002f00 	call	100002f0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100020a4:	01006c04 	movi	r4,432
100020a8:	01414004 	movi	r5,1280
100020ac:	00011000 	call	10001100 <UsbWrite>

}
100020b0:	e037883a 	mov	sp,fp
100020b4:	dfc00117 	ldw	ra,4(sp)
100020b8:	df000017 	ldw	fp,0(sp)
100020bc:	dec00204 	addi	sp,sp,8
100020c0:	f800283a 	ret

100020c4 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
100020c4:	defffd04 	addi	sp,sp,-12
100020c8:	dfc00215 	stw	ra,8(sp)
100020cc:	df000115 	stw	fp,4(sp)
100020d0:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
100020d4:	01005104 	movi	r4,324
100020d8:	00011540 	call	10001154 <UsbRead>
100020dc:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
100020e0:	01005104 	movi	r4,324
100020e4:	000b883a 	mov	r5,zero
100020e8:	00011000 	call	10001100 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
100020ec:	00000d06 	br	10002124 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
100020f0:	e0bfff0b 	ldhu	r2,-4(fp)
100020f4:	10000526 	beq	r2,zero,1000210c <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
100020f8:	e0bfff0b 	ldhu	r2,-4(fp)
100020fc:	01040074 	movhi	r4,4097
10002100:	21083a04 	addi	r4,r4,8424
10002104:	100b883a 	mov	r5,r2
10002108:	00022740 	call	10002274 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
1000210c:	01005104 	movi	r4,324
10002110:	00011540 	call	10001154 <UsbRead>
10002114:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002118:	01005104 	movi	r4,324
1000211c:	000b883a 	mov	r5,zero
10002120:	00011000 	call	10001100 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002124:	e0bfff0b 	ldhu	r2,-4(fp)
10002128:	10840018 	cmpnei	r2,r2,4096
1000212c:	103ff01e 	bne	r2,zero,100020f0 <__alt_data_end+0xf80020f0>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
10002130:	e0bfff0b 	ldhu	r2,-4(fp)
}
10002134:	e037883a 	mov	sp,fp
10002138:	dfc00117 	ldw	ra,4(sp)
1000213c:	df000017 	ldw	fp,0(sp)
10002140:	dec00204 	addi	sp,sp,8
10002144:	f800283a 	ret

10002148 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
10002148:	defffd04 	addi	sp,sp,-12
1000214c:	dfc00215 	stw	ra,8(sp)
10002150:	df000115 	stw	fp,4(sp)
10002154:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
10002158:	010000c4 	movi	r4,3
1000215c:	000035c0 	call	1000035c <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
10002160:	01005104 	movi	r4,324
10002164:	00011540 	call	10001154 <UsbRead>
10002168:	10bfffcc 	andi	r2,r2,65535
1000216c:	10840018 	cmpnei	r2,r2,4096
10002170:	1000091e 	bne	r2,zero,10002198 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002174:	01005104 	movi	r4,324
10002178:	000b883a 	mov	r5,zero
1000217c:	00011000 	call	10001100 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002180:	0001883a 	nop
10002184:	010000c4 	movi	r4,3
10002188:	000035c0 	call	1000035c <IO_read>
1000218c:	10bfffcc 	andi	r2,r2,65535
10002190:	1080040c 	andi	r2,r2,16
10002194:	103ffb26 	beq	r2,zero,10002184 <__alt_data_end+0xf8002184>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10002198:	01000084 	movi	r4,2
1000219c:	01414204 	movi	r5,1288
100021a0:	00002f00 	call	100002f0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100021a4:	0009883a 	mov	r4,zero
100021a8:	000035c0 	call	1000035c <IO_read>
100021ac:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
100021b0:	e0bfff0b 	ldhu	r2,-4(fp)
}
100021b4:	e037883a 	mov	sp,fp
100021b8:	dfc00117 	ldw	ra,4(sp)
100021bc:	df000017 	ldw	fp,0(sp)
100021c0:	dec00204 	addi	sp,sp,8
100021c4:	f800283a 	ret

100021c8 <UsbPrintMem>:


void UsbPrintMem()
{
100021c8:	defffc04 	addi	sp,sp,-16
100021cc:	dfc00315 	stw	ra,12(sp)
100021d0:	df000215 	stw	fp,8(sp)
100021d4:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
100021d8:	01000084 	movi	r4,2
100021dc:	01414004 	movi	r5,1280
100021e0:	00002f00 	call	100002f0 <IO_write>
	for (i = 0; i <= 200; i += 2)
100021e4:	e03ffe15 	stw	zero,-8(fp)
100021e8:	00000e06 	br	10002224 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
100021ec:	0009883a 	mov	r4,zero
100021f0:	000035c0 	call	1000035c <IO_read>
100021f4:	10bfffcc 	andi	r2,r2,65535
100021f8:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
100021fc:	e0bffe17 	ldw	r2,-8(fp)
10002200:	10814004 	addi	r2,r2,1280
10002204:	01040074 	movhi	r4,4097
10002208:	21084204 	addi	r4,r4,8456
1000220c:	100b883a 	mov	r5,r2
10002210:	e1bfff17 	ldw	r6,-4(fp)
10002214:	00022740 	call	10002274 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
10002218:	e0bffe17 	ldw	r2,-8(fp)
1000221c:	10800084 	addi	r2,r2,2
10002220:	e0bffe15 	stw	r2,-8(fp)
10002224:	e0bffe17 	ldw	r2,-8(fp)
10002228:	10803250 	cmplti	r2,r2,201
1000222c:	103fef1e 	bne	r2,zero,100021ec <__alt_data_end+0xf80021ec>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
10002230:	e037883a 	mov	sp,fp
10002234:	dfc00117 	ldw	ra,4(sp)
10002238:	df000017 	ldw	fp,0(sp)
1000223c:	dec00204 	addi	sp,sp,8
10002240:	f800283a 	ret

10002244 <_printf_r>:
10002244:	defffd04 	addi	sp,sp,-12
10002248:	2805883a 	mov	r2,r5
1000224c:	dfc00015 	stw	ra,0(sp)
10002250:	d9800115 	stw	r6,4(sp)
10002254:	d9c00215 	stw	r7,8(sp)
10002258:	21400217 	ldw	r5,8(r4)
1000225c:	d9c00104 	addi	r7,sp,4
10002260:	100d883a 	mov	r6,r2
10002264:	000241c0 	call	1000241c <___vfprintf_internal_r>
10002268:	dfc00017 	ldw	ra,0(sp)
1000226c:	dec00304 	addi	sp,sp,12
10002270:	f800283a 	ret

10002274 <printf>:
10002274:	defffc04 	addi	sp,sp,-16
10002278:	dfc00015 	stw	ra,0(sp)
1000227c:	d9400115 	stw	r5,4(sp)
10002280:	d9800215 	stw	r6,8(sp)
10002284:	d9c00315 	stw	r7,12(sp)
10002288:	00840074 	movhi	r2,4097
1000228c:	108fb304 	addi	r2,r2,16076
10002290:	10800017 	ldw	r2,0(r2)
10002294:	200b883a 	mov	r5,r4
10002298:	d9800104 	addi	r6,sp,4
1000229c:	11000217 	ldw	r4,8(r2)
100022a0:	00046f80 	call	100046f8 <__vfprintf_internal>
100022a4:	dfc00017 	ldw	ra,0(sp)
100022a8:	dec00404 	addi	sp,sp,16
100022ac:	f800283a 	ret

100022b0 <_puts_r>:
100022b0:	defff604 	addi	sp,sp,-40
100022b4:	dc000715 	stw	r16,28(sp)
100022b8:	2021883a 	mov	r16,r4
100022bc:	2809883a 	mov	r4,r5
100022c0:	dc400815 	stw	r17,32(sp)
100022c4:	dfc00915 	stw	ra,36(sp)
100022c8:	2823883a 	mov	r17,r5
100022cc:	00023840 	call	10002384 <strlen>
100022d0:	10c00044 	addi	r3,r2,1
100022d4:	d8800115 	stw	r2,4(sp)
100022d8:	00840074 	movhi	r2,4097
100022dc:	10884704 	addi	r2,r2,8476
100022e0:	d8800215 	stw	r2,8(sp)
100022e4:	00800044 	movi	r2,1
100022e8:	d8800315 	stw	r2,12(sp)
100022ec:	00800084 	movi	r2,2
100022f0:	dc400015 	stw	r17,0(sp)
100022f4:	d8c00615 	stw	r3,24(sp)
100022f8:	dec00415 	stw	sp,16(sp)
100022fc:	d8800515 	stw	r2,20(sp)
10002300:	80000226 	beq	r16,zero,1000230c <_puts_r+0x5c>
10002304:	80800e17 	ldw	r2,56(r16)
10002308:	10001426 	beq	r2,zero,1000235c <_puts_r+0xac>
1000230c:	81400217 	ldw	r5,8(r16)
10002310:	2880030b 	ldhu	r2,12(r5)
10002314:	10c8000c 	andi	r3,r2,8192
10002318:	1800061e 	bne	r3,zero,10002334 <_puts_r+0x84>
1000231c:	29001917 	ldw	r4,100(r5)
10002320:	00f7ffc4 	movi	r3,-8193
10002324:	10880014 	ori	r2,r2,8192
10002328:	20c6703a 	and	r3,r4,r3
1000232c:	2880030d 	sth	r2,12(r5)
10002330:	28c01915 	stw	r3,100(r5)
10002334:	d9800404 	addi	r6,sp,16
10002338:	8009883a 	mov	r4,r16
1000233c:	0006c600 	call	10006c60 <__sfvwrite_r>
10002340:	1000091e 	bne	r2,zero,10002368 <_puts_r+0xb8>
10002344:	00800284 	movi	r2,10
10002348:	dfc00917 	ldw	ra,36(sp)
1000234c:	dc400817 	ldw	r17,32(sp)
10002350:	dc000717 	ldw	r16,28(sp)
10002354:	dec00a04 	addi	sp,sp,40
10002358:	f800283a 	ret
1000235c:	8009883a 	mov	r4,r16
10002360:	00067dc0 	call	100067dc <__sinit>
10002364:	003fe906 	br	1000230c <__alt_data_end+0xf800230c>
10002368:	00bfffc4 	movi	r2,-1
1000236c:	003ff606 	br	10002348 <__alt_data_end+0xf8002348>

10002370 <puts>:
10002370:	00840074 	movhi	r2,4097
10002374:	108fb304 	addi	r2,r2,16076
10002378:	200b883a 	mov	r5,r4
1000237c:	11000017 	ldw	r4,0(r2)
10002380:	00022b01 	jmpi	100022b0 <_puts_r>

10002384 <strlen>:
10002384:	208000cc 	andi	r2,r4,3
10002388:	10002026 	beq	r2,zero,1000240c <strlen+0x88>
1000238c:	20800007 	ldb	r2,0(r4)
10002390:	10002026 	beq	r2,zero,10002414 <strlen+0x90>
10002394:	2005883a 	mov	r2,r4
10002398:	00000206 	br	100023a4 <strlen+0x20>
1000239c:	10c00007 	ldb	r3,0(r2)
100023a0:	18001826 	beq	r3,zero,10002404 <strlen+0x80>
100023a4:	10800044 	addi	r2,r2,1
100023a8:	10c000cc 	andi	r3,r2,3
100023ac:	183ffb1e 	bne	r3,zero,1000239c <__alt_data_end+0xf800239c>
100023b0:	10c00017 	ldw	r3,0(r2)
100023b4:	01ffbff4 	movhi	r7,65279
100023b8:	39ffbfc4 	addi	r7,r7,-257
100023bc:	00ca303a 	nor	r5,zero,r3
100023c0:	01a02074 	movhi	r6,32897
100023c4:	19c7883a 	add	r3,r3,r7
100023c8:	31a02004 	addi	r6,r6,-32640
100023cc:	1946703a 	and	r3,r3,r5
100023d0:	1986703a 	and	r3,r3,r6
100023d4:	1800091e 	bne	r3,zero,100023fc <strlen+0x78>
100023d8:	10800104 	addi	r2,r2,4
100023dc:	10c00017 	ldw	r3,0(r2)
100023e0:	19cb883a 	add	r5,r3,r7
100023e4:	00c6303a 	nor	r3,zero,r3
100023e8:	28c6703a 	and	r3,r5,r3
100023ec:	1986703a 	and	r3,r3,r6
100023f0:	183ff926 	beq	r3,zero,100023d8 <__alt_data_end+0xf80023d8>
100023f4:	00000106 	br	100023fc <strlen+0x78>
100023f8:	10800044 	addi	r2,r2,1
100023fc:	10c00007 	ldb	r3,0(r2)
10002400:	183ffd1e 	bne	r3,zero,100023f8 <__alt_data_end+0xf80023f8>
10002404:	1105c83a 	sub	r2,r2,r4
10002408:	f800283a 	ret
1000240c:	2005883a 	mov	r2,r4
10002410:	003fe706 	br	100023b0 <__alt_data_end+0xf80023b0>
10002414:	0005883a 	mov	r2,zero
10002418:	f800283a 	ret

1000241c <___vfprintf_internal_r>:
1000241c:	deffb804 	addi	sp,sp,-288
10002420:	dfc04715 	stw	ra,284(sp)
10002424:	ddc04515 	stw	r23,276(sp)
10002428:	dd404315 	stw	r21,268(sp)
1000242c:	d9002d15 	stw	r4,180(sp)
10002430:	282f883a 	mov	r23,r5
10002434:	302b883a 	mov	r21,r6
10002438:	d9c02e15 	stw	r7,184(sp)
1000243c:	df004615 	stw	fp,280(sp)
10002440:	dd804415 	stw	r22,272(sp)
10002444:	dd004215 	stw	r20,264(sp)
10002448:	dcc04115 	stw	r19,260(sp)
1000244c:	dc804015 	stw	r18,256(sp)
10002450:	dc403f15 	stw	r17,252(sp)
10002454:	dc003e15 	stw	r16,248(sp)
10002458:	000735c0 	call	1000735c <_localeconv_r>
1000245c:	10800017 	ldw	r2,0(r2)
10002460:	1009883a 	mov	r4,r2
10002464:	d8803415 	stw	r2,208(sp)
10002468:	00023840 	call	10002384 <strlen>
1000246c:	d8803715 	stw	r2,220(sp)
10002470:	d8802d17 	ldw	r2,180(sp)
10002474:	10000226 	beq	r2,zero,10002480 <___vfprintf_internal_r+0x64>
10002478:	10800e17 	ldw	r2,56(r2)
1000247c:	1000fb26 	beq	r2,zero,1000286c <___vfprintf_internal_r+0x450>
10002480:	b880030b 	ldhu	r2,12(r23)
10002484:	10c8000c 	andi	r3,r2,8192
10002488:	1800061e 	bne	r3,zero,100024a4 <___vfprintf_internal_r+0x88>
1000248c:	b9001917 	ldw	r4,100(r23)
10002490:	00f7ffc4 	movi	r3,-8193
10002494:	10880014 	ori	r2,r2,8192
10002498:	20c6703a 	and	r3,r4,r3
1000249c:	b880030d 	sth	r2,12(r23)
100024a0:	b8c01915 	stw	r3,100(r23)
100024a4:	10c0020c 	andi	r3,r2,8
100024a8:	1800c326 	beq	r3,zero,100027b8 <___vfprintf_internal_r+0x39c>
100024ac:	b8c00417 	ldw	r3,16(r23)
100024b0:	1800c126 	beq	r3,zero,100027b8 <___vfprintf_internal_r+0x39c>
100024b4:	1080068c 	andi	r2,r2,26
100024b8:	00c00284 	movi	r3,10
100024bc:	10c0c626 	beq	r2,r3,100027d8 <___vfprintf_internal_r+0x3bc>
100024c0:	d8c00404 	addi	r3,sp,16
100024c4:	05040074 	movhi	r20,4097
100024c8:	d9001e04 	addi	r4,sp,120
100024cc:	a5085884 	addi	r20,r20,8546
100024d0:	d8c01e15 	stw	r3,120(sp)
100024d4:	d8002015 	stw	zero,128(sp)
100024d8:	d8001f15 	stw	zero,124(sp)
100024dc:	d8003315 	stw	zero,204(sp)
100024e0:	d8003615 	stw	zero,216(sp)
100024e4:	d8003815 	stw	zero,224(sp)
100024e8:	1811883a 	mov	r8,r3
100024ec:	d8003915 	stw	zero,228(sp)
100024f0:	d8003a15 	stw	zero,232(sp)
100024f4:	d8002f15 	stw	zero,188(sp)
100024f8:	d9002815 	stw	r4,160(sp)
100024fc:	a8800007 	ldb	r2,0(r21)
10002500:	10028b26 	beq	r2,zero,10002f30 <___vfprintf_internal_r+0xb14>
10002504:	00c00944 	movi	r3,37
10002508:	a823883a 	mov	r17,r21
1000250c:	10c0021e 	bne	r2,r3,10002518 <___vfprintf_internal_r+0xfc>
10002510:	00001406 	br	10002564 <___vfprintf_internal_r+0x148>
10002514:	10c00326 	beq	r2,r3,10002524 <___vfprintf_internal_r+0x108>
10002518:	8c400044 	addi	r17,r17,1
1000251c:	88800007 	ldb	r2,0(r17)
10002520:	103ffc1e 	bne	r2,zero,10002514 <__alt_data_end+0xf8002514>
10002524:	8d61c83a 	sub	r16,r17,r21
10002528:	80000e26 	beq	r16,zero,10002564 <___vfprintf_internal_r+0x148>
1000252c:	d8c02017 	ldw	r3,128(sp)
10002530:	d8801f17 	ldw	r2,124(sp)
10002534:	45400015 	stw	r21,0(r8)
10002538:	1c07883a 	add	r3,r3,r16
1000253c:	10800044 	addi	r2,r2,1
10002540:	d8c02015 	stw	r3,128(sp)
10002544:	44000115 	stw	r16,4(r8)
10002548:	d8801f15 	stw	r2,124(sp)
1000254c:	00c001c4 	movi	r3,7
10002550:	1880a916 	blt	r3,r2,100027f8 <___vfprintf_internal_r+0x3dc>
10002554:	42000204 	addi	r8,r8,8
10002558:	d9402f17 	ldw	r5,188(sp)
1000255c:	2c0b883a 	add	r5,r5,r16
10002560:	d9402f15 	stw	r5,188(sp)
10002564:	88800007 	ldb	r2,0(r17)
10002568:	1000aa26 	beq	r2,zero,10002814 <___vfprintf_internal_r+0x3f8>
1000256c:	8d400044 	addi	r21,r17,1
10002570:	8c400047 	ldb	r17,1(r17)
10002574:	0021883a 	mov	r16,zero
10002578:	00bfffc4 	movi	r2,-1
1000257c:	0025883a 	mov	r18,zero
10002580:	dc002905 	stb	r16,164(sp)
10002584:	d8002785 	stb	zero,158(sp)
10002588:	d8002b05 	stb	zero,172(sp)
1000258c:	d8802a15 	stw	r2,168(sp)
10002590:	d8003115 	stw	zero,196(sp)
10002594:	04c01604 	movi	r19,88
10002598:	05800244 	movi	r22,9
1000259c:	9021883a 	mov	r16,r18
100025a0:	4039883a 	mov	fp,r8
100025a4:	ad400044 	addi	r21,r21,1
100025a8:	88bff804 	addi	r2,r17,-32
100025ac:	98833236 	bltu	r19,r2,10003278 <___vfprintf_internal_r+0xe5c>
100025b0:	100490ba 	slli	r2,r2,2
100025b4:	00c40034 	movhi	r3,4096
100025b8:	18c97204 	addi	r3,r3,9672
100025bc:	10c5883a 	add	r2,r2,r3
100025c0:	10800017 	ldw	r2,0(r2)
100025c4:	1000683a 	jmp	r2
100025c8:	10003170 	cmpltui	zero,r2,197
100025cc:	10003278 	rdprs	zero,r2,201
100025d0:	10003278 	rdprs	zero,r2,201
100025d4:	10003190 	cmplti	zero,r2,198
100025d8:	10003278 	rdprs	zero,r2,201
100025dc:	10003278 	rdprs	zero,r2,201
100025e0:	10003278 	rdprs	zero,r2,201
100025e4:	10003278 	rdprs	zero,r2,201
100025e8:	10003278 	rdprs	zero,r2,201
100025ec:	10003278 	rdprs	zero,r2,201
100025f0:	10002878 	rdprs	zero,r2,161
100025f4:	10003080 	call	11000308 <_gp+0xfe4440>
100025f8:	10003278 	rdprs	zero,r2,201
100025fc:	1000273c 	xorhi	zero,r2,156
10002600:	1000289c 	xori	zero,r2,162
10002604:	10003278 	rdprs	zero,r2,201
10002608:	100028ec 	andhi	zero,r2,163
1000260c:	100028f8 	rdprs	zero,r2,163
10002610:	100028f8 	rdprs	zero,r2,163
10002614:	100028f8 	rdprs	zero,r2,163
10002618:	100028f8 	rdprs	zero,r2,163
1000261c:	100028f8 	rdprs	zero,r2,163
10002620:	100028f8 	rdprs	zero,r2,163
10002624:	100028f8 	rdprs	zero,r2,163
10002628:	100028f8 	rdprs	zero,r2,163
1000262c:	100028f8 	rdprs	zero,r2,163
10002630:	10003278 	rdprs	zero,r2,201
10002634:	10003278 	rdprs	zero,r2,201
10002638:	10003278 	rdprs	zero,r2,201
1000263c:	10003278 	rdprs	zero,r2,201
10002640:	10003278 	rdprs	zero,r2,201
10002644:	10003278 	rdprs	zero,r2,201
10002648:	10003278 	rdprs	zero,r2,201
1000264c:	10003278 	rdprs	zero,r2,201
10002650:	10003278 	rdprs	zero,r2,201
10002654:	10003278 	rdprs	zero,r2,201
10002658:	10002934 	orhi	zero,r2,164
1000265c:	100029fc 	xorhi	zero,r2,167
10002660:	10003278 	rdprs	zero,r2,201
10002664:	100029fc 	xorhi	zero,r2,167
10002668:	10003278 	rdprs	zero,r2,201
1000266c:	10003278 	rdprs	zero,r2,201
10002670:	10003278 	rdprs	zero,r2,201
10002674:	10003278 	rdprs	zero,r2,201
10002678:	10002aa8 	cmpgeui	zero,r2,170
1000267c:	10003278 	rdprs	zero,r2,201
10002680:	10003278 	rdprs	zero,r2,201
10002684:	10002ab4 	orhi	zero,r2,170
10002688:	10003278 	rdprs	zero,r2,201
1000268c:	10003278 	rdprs	zero,r2,201
10002690:	10003278 	rdprs	zero,r2,201
10002694:	10003278 	rdprs	zero,r2,201
10002698:	10003278 	rdprs	zero,r2,201
1000269c:	10002f38 	rdprs	zero,r2,188
100026a0:	10003278 	rdprs	zero,r2,201
100026a4:	10003278 	rdprs	zero,r2,201
100026a8:	10002fa4 	muli	zero,r2,190
100026ac:	10003278 	rdprs	zero,r2,201
100026b0:	10003278 	rdprs	zero,r2,201
100026b4:	10003278 	rdprs	zero,r2,201
100026b8:	10003278 	rdprs	zero,r2,201
100026bc:	10003278 	rdprs	zero,r2,201
100026c0:	10003278 	rdprs	zero,r2,201
100026c4:	10003278 	rdprs	zero,r2,201
100026c8:	10003278 	rdprs	zero,r2,201
100026cc:	10003278 	rdprs	zero,r2,201
100026d0:	10003278 	rdprs	zero,r2,201
100026d4:	1000321c 	xori	zero,r2,200
100026d8:	1000319c 	xori	zero,r2,198
100026dc:	100029fc 	xorhi	zero,r2,167
100026e0:	100029fc 	xorhi	zero,r2,167
100026e4:	100029fc 	xorhi	zero,r2,167
100026e8:	100031bc 	xorhi	zero,r2,198
100026ec:	1000319c 	xori	zero,r2,198
100026f0:	10003278 	rdprs	zero,r2,201
100026f4:	10003278 	rdprs	zero,r2,201
100026f8:	100031c8 	cmpgei	zero,r2,199
100026fc:	10003278 	rdprs	zero,r2,201
10002700:	100031dc 	xori	zero,r2,199
10002704:	10003060 	cmpeqi	zero,r2,193
10002708:	10002748 	cmpgei	zero,r2,157
1000270c:	10003098 	cmpnei	zero,r2,194
10002710:	10003278 	rdprs	zero,r2,201
10002714:	100030a4 	muli	zero,r2,194
10002718:	10003278 	rdprs	zero,r2,201
1000271c:	10003108 	cmpgei	zero,r2,196
10002720:	10003278 	rdprs	zero,r2,201
10002724:	10003278 	rdprs	zero,r2,201
10002728:	10003128 	cmpgeui	zero,r2,196
1000272c:	d8c03117 	ldw	r3,196(sp)
10002730:	d8802e15 	stw	r2,184(sp)
10002734:	00c7c83a 	sub	r3,zero,r3
10002738:	d8c03115 	stw	r3,196(sp)
1000273c:	84000114 	ori	r16,r16,4
10002740:	ac400007 	ldb	r17,0(r21)
10002744:	003f9706 	br	100025a4 <__alt_data_end+0xf80025a4>
10002748:	00800c04 	movi	r2,48
1000274c:	d8802705 	stb	r2,156(sp)
10002750:	00801e04 	movi	r2,120
10002754:	d8802745 	stb	r2,157(sp)
10002758:	d9002a17 	ldw	r4,168(sp)
1000275c:	d8802e17 	ldw	r2,184(sp)
10002760:	d8002785 	stb	zero,158(sp)
10002764:	e011883a 	mov	r8,fp
10002768:	10c00104 	addi	r3,r2,4
1000276c:	14c00017 	ldw	r19,0(r2)
10002770:	002d883a 	mov	r22,zero
10002774:	80800094 	ori	r2,r16,2
10002778:	2002ca16 	blt	r4,zero,100032a4 <___vfprintf_internal_r+0xe88>
1000277c:	00bfdfc4 	movi	r2,-129
10002780:	80a4703a 	and	r18,r16,r2
10002784:	d8c02e15 	stw	r3,184(sp)
10002788:	94800094 	ori	r18,r18,2
1000278c:	9802b41e 	bne	r19,zero,10003260 <___vfprintf_internal_r+0xe44>
10002790:	01440074 	movhi	r5,4097
10002794:	29485104 	addi	r5,r5,8516
10002798:	d9403915 	stw	r5,228(sp)
1000279c:	04401e04 	movi	r17,120
100027a0:	d8802a17 	ldw	r2,168(sp)
100027a4:	0039883a 	mov	fp,zero
100027a8:	1001fa26 	beq	r2,zero,10002f94 <___vfprintf_internal_r+0xb78>
100027ac:	0027883a 	mov	r19,zero
100027b0:	002d883a 	mov	r22,zero
100027b4:	00021906 	br	1000301c <___vfprintf_internal_r+0xc00>
100027b8:	d9002d17 	ldw	r4,180(sp)
100027bc:	b80b883a 	mov	r5,r23
100027c0:	00047d00 	call	100047d0 <__swsetup_r>
100027c4:	1005dc1e 	bne	r2,zero,10003f38 <___vfprintf_internal_r+0x1b1c>
100027c8:	b880030b 	ldhu	r2,12(r23)
100027cc:	00c00284 	movi	r3,10
100027d0:	1080068c 	andi	r2,r2,26
100027d4:	10ff3a1e 	bne	r2,r3,100024c0 <__alt_data_end+0xf80024c0>
100027d8:	b880038f 	ldh	r2,14(r23)
100027dc:	103f3816 	blt	r2,zero,100024c0 <__alt_data_end+0xf80024c0>
100027e0:	d9c02e17 	ldw	r7,184(sp)
100027e4:	d9002d17 	ldw	r4,180(sp)
100027e8:	a80d883a 	mov	r6,r21
100027ec:	b80b883a 	mov	r5,r23
100027f0:	00047140 	call	10004714 <__sbprintf>
100027f4:	00001106 	br	1000283c <___vfprintf_internal_r+0x420>
100027f8:	d9002d17 	ldw	r4,180(sp)
100027fc:	d9801e04 	addi	r6,sp,120
10002800:	b80b883a 	mov	r5,r23
10002804:	0009bfc0 	call	10009bfc <__sprint_r>
10002808:	1000081e 	bne	r2,zero,1000282c <___vfprintf_internal_r+0x410>
1000280c:	da000404 	addi	r8,sp,16
10002810:	003f5106 	br	10002558 <__alt_data_end+0xf8002558>
10002814:	d8802017 	ldw	r2,128(sp)
10002818:	10000426 	beq	r2,zero,1000282c <___vfprintf_internal_r+0x410>
1000281c:	d9002d17 	ldw	r4,180(sp)
10002820:	d9801e04 	addi	r6,sp,120
10002824:	b80b883a 	mov	r5,r23
10002828:	0009bfc0 	call	10009bfc <__sprint_r>
1000282c:	b880030b 	ldhu	r2,12(r23)
10002830:	1080100c 	andi	r2,r2,64
10002834:	1005c01e 	bne	r2,zero,10003f38 <___vfprintf_internal_r+0x1b1c>
10002838:	d8802f17 	ldw	r2,188(sp)
1000283c:	dfc04717 	ldw	ra,284(sp)
10002840:	df004617 	ldw	fp,280(sp)
10002844:	ddc04517 	ldw	r23,276(sp)
10002848:	dd804417 	ldw	r22,272(sp)
1000284c:	dd404317 	ldw	r21,268(sp)
10002850:	dd004217 	ldw	r20,264(sp)
10002854:	dcc04117 	ldw	r19,260(sp)
10002858:	dc804017 	ldw	r18,256(sp)
1000285c:	dc403f17 	ldw	r17,252(sp)
10002860:	dc003e17 	ldw	r16,248(sp)
10002864:	dec04804 	addi	sp,sp,288
10002868:	f800283a 	ret
1000286c:	d9002d17 	ldw	r4,180(sp)
10002870:	00067dc0 	call	100067dc <__sinit>
10002874:	003f0206 	br	10002480 <__alt_data_end+0xf8002480>
10002878:	d9002e17 	ldw	r4,184(sp)
1000287c:	d9402e17 	ldw	r5,184(sp)
10002880:	21000017 	ldw	r4,0(r4)
10002884:	28800104 	addi	r2,r5,4
10002888:	d9003115 	stw	r4,196(sp)
1000288c:	203fa716 	blt	r4,zero,1000272c <__alt_data_end+0xf800272c>
10002890:	d8802e15 	stw	r2,184(sp)
10002894:	ac400007 	ldb	r17,0(r21)
10002898:	003f4206 	br	100025a4 <__alt_data_end+0xf80025a4>
1000289c:	ac400007 	ldb	r17,0(r21)
100028a0:	01000a84 	movi	r4,42
100028a4:	a8c00044 	addi	r3,r21,1
100028a8:	89075826 	beq	r17,r4,1000460c <___vfprintf_internal_r+0x21f0>
100028ac:	8cbff404 	addi	r18,r17,-48
100028b0:	b486ae36 	bltu	r22,r18,1000436c <___vfprintf_internal_r+0x1f50>
100028b4:	0009883a 	mov	r4,zero
100028b8:	1823883a 	mov	r17,r3
100028bc:	01400284 	movi	r5,10
100028c0:	000c8b80 	call	1000c8b8 <__mulsi3>
100028c4:	88c00007 	ldb	r3,0(r17)
100028c8:	1489883a 	add	r4,r2,r18
100028cc:	8d400044 	addi	r21,r17,1
100028d0:	1cbff404 	addi	r18,r3,-48
100028d4:	a823883a 	mov	r17,r21
100028d8:	b4bff82e 	bgeu	r22,r18,100028bc <__alt_data_end+0xf80028bc>
100028dc:	1823883a 	mov	r17,r3
100028e0:	2005f616 	blt	r4,zero,100040bc <___vfprintf_internal_r+0x1ca0>
100028e4:	d9002a15 	stw	r4,168(sp)
100028e8:	003f2f06 	br	100025a8 <__alt_data_end+0xf80025a8>
100028ec:	84002014 	ori	r16,r16,128
100028f0:	ac400007 	ldb	r17,0(r21)
100028f4:	003f2b06 	br	100025a4 <__alt_data_end+0xf80025a4>
100028f8:	8cbff404 	addi	r18,r17,-48
100028fc:	d8003115 	stw	zero,196(sp)
10002900:	0009883a 	mov	r4,zero
10002904:	a823883a 	mov	r17,r21
10002908:	01400284 	movi	r5,10
1000290c:	000c8b80 	call	1000c8b8 <__mulsi3>
10002910:	88c00007 	ldb	r3,0(r17)
10002914:	9089883a 	add	r4,r18,r2
10002918:	ad400044 	addi	r21,r21,1
1000291c:	1cbff404 	addi	r18,r3,-48
10002920:	a823883a 	mov	r17,r21
10002924:	b4bff82e 	bgeu	r22,r18,10002908 <__alt_data_end+0xf8002908>
10002928:	1823883a 	mov	r17,r3
1000292c:	d9003115 	stw	r4,196(sp)
10002930:	003f1d06 	br	100025a8 <__alt_data_end+0xf80025a8>
10002934:	8025883a 	mov	r18,r16
10002938:	dc002903 	ldbu	r16,164(sp)
1000293c:	e011883a 	mov	r8,fp
10002940:	84003fcc 	andi	r16,r16,255
10002944:	8007531e 	bne	r16,zero,10004694 <___vfprintf_internal_r+0x2278>
10002948:	94800414 	ori	r18,r18,16
1000294c:	9080080c 	andi	r2,r18,32
10002950:	1003a326 	beq	r2,zero,100037e0 <___vfprintf_internal_r+0x13c4>
10002954:	d9002e17 	ldw	r4,184(sp)
10002958:	20800117 	ldw	r2,4(r4)
1000295c:	24c00017 	ldw	r19,0(r4)
10002960:	21000204 	addi	r4,r4,8
10002964:	d9002e15 	stw	r4,184(sp)
10002968:	102d883a 	mov	r22,r2
1000296c:	10047316 	blt	r2,zero,10003b3c <___vfprintf_internal_r+0x1720>
10002970:	d9002a17 	ldw	r4,168(sp)
10002974:	df002783 	ldbu	fp,158(sp)
10002978:	2003e416 	blt	r4,zero,1000390c <___vfprintf_internal_r+0x14f0>
1000297c:	00ffdfc4 	movi	r3,-129
10002980:	9d84b03a 	or	r2,r19,r22
10002984:	90e4703a 	and	r18,r18,r3
10002988:	10018026 	beq	r2,zero,10002f8c <___vfprintf_internal_r+0xb70>
1000298c:	b003ab26 	beq	r22,zero,1000383c <___vfprintf_internal_r+0x1420>
10002990:	dc402915 	stw	r17,164(sp)
10002994:	dc001e04 	addi	r16,sp,120
10002998:	b023883a 	mov	r17,r22
1000299c:	402d883a 	mov	r22,r8
100029a0:	9809883a 	mov	r4,r19
100029a4:	880b883a 	mov	r5,r17
100029a8:	01800284 	movi	r6,10
100029ac:	000f883a 	mov	r7,zero
100029b0:	000c1400 	call	1000c140 <__umoddi3>
100029b4:	10800c04 	addi	r2,r2,48
100029b8:	843fffc4 	addi	r16,r16,-1
100029bc:	9809883a 	mov	r4,r19
100029c0:	880b883a 	mov	r5,r17
100029c4:	80800005 	stb	r2,0(r16)
100029c8:	01800284 	movi	r6,10
100029cc:	000f883a 	mov	r7,zero
100029d0:	000bb440 	call	1000bb44 <__udivdi3>
100029d4:	1027883a 	mov	r19,r2
100029d8:	10c4b03a 	or	r2,r2,r3
100029dc:	1823883a 	mov	r17,r3
100029e0:	103fef1e 	bne	r2,zero,100029a0 <__alt_data_end+0xf80029a0>
100029e4:	d8c02817 	ldw	r3,160(sp)
100029e8:	dc402917 	ldw	r17,164(sp)
100029ec:	b011883a 	mov	r8,r22
100029f0:	1c07c83a 	sub	r3,r3,r16
100029f4:	d8c02b15 	stw	r3,172(sp)
100029f8:	00005f06 	br	10002b78 <___vfprintf_internal_r+0x75c>
100029fc:	8025883a 	mov	r18,r16
10002a00:	dc002903 	ldbu	r16,164(sp)
10002a04:	e011883a 	mov	r8,fp
10002a08:	84003fcc 	andi	r16,r16,255
10002a0c:	80071e1e 	bne	r16,zero,10004688 <___vfprintf_internal_r+0x226c>
10002a10:	9080020c 	andi	r2,r18,8
10002a14:	1004af26 	beq	r2,zero,10003cd4 <___vfprintf_internal_r+0x18b8>
10002a18:	d9002e17 	ldw	r4,184(sp)
10002a1c:	d9402e17 	ldw	r5,184(sp)
10002a20:	d8802e17 	ldw	r2,184(sp)
10002a24:	21000017 	ldw	r4,0(r4)
10002a28:	29400117 	ldw	r5,4(r5)
10002a2c:	10800204 	addi	r2,r2,8
10002a30:	d9003615 	stw	r4,216(sp)
10002a34:	d9403815 	stw	r5,224(sp)
10002a38:	d8802e15 	stw	r2,184(sp)
10002a3c:	d9003617 	ldw	r4,216(sp)
10002a40:	d9403817 	ldw	r5,224(sp)
10002a44:	da003d15 	stw	r8,244(sp)
10002a48:	04000044 	movi	r16,1
10002a4c:	00098200 	call	10009820 <__fpclassifyd>
10002a50:	da003d17 	ldw	r8,244(sp)
10002a54:	1404441e 	bne	r2,r16,10003b68 <___vfprintf_internal_r+0x174c>
10002a58:	d9003617 	ldw	r4,216(sp)
10002a5c:	d9403817 	ldw	r5,224(sp)
10002a60:	000d883a 	mov	r6,zero
10002a64:	000f883a 	mov	r7,zero
10002a68:	000dcc00 	call	1000dcc0 <__ledf2>
10002a6c:	da003d17 	ldw	r8,244(sp)
10002a70:	1005e316 	blt	r2,zero,10004200 <___vfprintf_internal_r+0x1de4>
10002a74:	df002783 	ldbu	fp,158(sp)
10002a78:	008011c4 	movi	r2,71
10002a7c:	1445580e 	bge	r2,r17,10003fe0 <___vfprintf_internal_r+0x1bc4>
10002a80:	04040074 	movhi	r16,4097
10002a84:	84084904 	addi	r16,r16,8484
10002a88:	00c000c4 	movi	r3,3
10002a8c:	00bfdfc4 	movi	r2,-129
10002a90:	d8c02915 	stw	r3,164(sp)
10002a94:	90a4703a 	and	r18,r18,r2
10002a98:	d8c02b15 	stw	r3,172(sp)
10002a9c:	d8002a15 	stw	zero,168(sp)
10002aa0:	d8003215 	stw	zero,200(sp)
10002aa4:	00003a06 	br	10002b90 <___vfprintf_internal_r+0x774>
10002aa8:	84000214 	ori	r16,r16,8
10002aac:	ac400007 	ldb	r17,0(r21)
10002ab0:	003ebc06 	br	100025a4 <__alt_data_end+0xf80025a4>
10002ab4:	8025883a 	mov	r18,r16
10002ab8:	dc002903 	ldbu	r16,164(sp)
10002abc:	e011883a 	mov	r8,fp
10002ac0:	84003fcc 	andi	r16,r16,255
10002ac4:	8007001e 	bne	r16,zero,100046c8 <___vfprintf_internal_r+0x22ac>
10002ac8:	94800414 	ori	r18,r18,16
10002acc:	9080080c 	andi	r2,r18,32
10002ad0:	1002fa26 	beq	r2,zero,100036bc <___vfprintf_internal_r+0x12a0>
10002ad4:	d9002e17 	ldw	r4,184(sp)
10002ad8:	d9402a17 	ldw	r5,168(sp)
10002adc:	d8002785 	stb	zero,158(sp)
10002ae0:	20800204 	addi	r2,r4,8
10002ae4:	24c00017 	ldw	r19,0(r4)
10002ae8:	25800117 	ldw	r22,4(r4)
10002aec:	2804b116 	blt	r5,zero,10003db4 <___vfprintf_internal_r+0x1998>
10002af0:	013fdfc4 	movi	r4,-129
10002af4:	9d86b03a 	or	r3,r19,r22
10002af8:	d8802e15 	stw	r2,184(sp)
10002afc:	9124703a 	and	r18,r18,r4
10002b00:	1802fb1e 	bne	r3,zero,100036f0 <___vfprintf_internal_r+0x12d4>
10002b04:	d8c02a17 	ldw	r3,168(sp)
10002b08:	0039883a 	mov	fp,zero
10002b0c:	1805e526 	beq	r3,zero,100042a4 <___vfprintf_internal_r+0x1e88>
10002b10:	0027883a 	mov	r19,zero
10002b14:	002d883a 	mov	r22,zero
10002b18:	dc001e04 	addi	r16,sp,120
10002b1c:	9806d0fa 	srli	r3,r19,3
10002b20:	b008977a 	slli	r4,r22,29
10002b24:	b02cd0fa 	srli	r22,r22,3
10002b28:	9cc001cc 	andi	r19,r19,7
10002b2c:	98800c04 	addi	r2,r19,48
10002b30:	843fffc4 	addi	r16,r16,-1
10002b34:	20e6b03a 	or	r19,r4,r3
10002b38:	80800005 	stb	r2,0(r16)
10002b3c:	9d86b03a 	or	r3,r19,r22
10002b40:	183ff61e 	bne	r3,zero,10002b1c <__alt_data_end+0xf8002b1c>
10002b44:	90c0004c 	andi	r3,r18,1
10002b48:	18014126 	beq	r3,zero,10003050 <___vfprintf_internal_r+0xc34>
10002b4c:	10803fcc 	andi	r2,r2,255
10002b50:	1080201c 	xori	r2,r2,128
10002b54:	10bfe004 	addi	r2,r2,-128
10002b58:	00c00c04 	movi	r3,48
10002b5c:	10c13c26 	beq	r2,r3,10003050 <___vfprintf_internal_r+0xc34>
10002b60:	80ffffc5 	stb	r3,-1(r16)
10002b64:	d8c02817 	ldw	r3,160(sp)
10002b68:	80bfffc4 	addi	r2,r16,-1
10002b6c:	1021883a 	mov	r16,r2
10002b70:	1887c83a 	sub	r3,r3,r2
10002b74:	d8c02b15 	stw	r3,172(sp)
10002b78:	d8802b17 	ldw	r2,172(sp)
10002b7c:	d9002a17 	ldw	r4,168(sp)
10002b80:	1100010e 	bge	r2,r4,10002b88 <___vfprintf_internal_r+0x76c>
10002b84:	2005883a 	mov	r2,r4
10002b88:	d8802915 	stw	r2,164(sp)
10002b8c:	d8003215 	stw	zero,200(sp)
10002b90:	e7003fcc 	andi	fp,fp,255
10002b94:	e700201c 	xori	fp,fp,128
10002b98:	e73fe004 	addi	fp,fp,-128
10002b9c:	e0000326 	beq	fp,zero,10002bac <___vfprintf_internal_r+0x790>
10002ba0:	d8c02917 	ldw	r3,164(sp)
10002ba4:	18c00044 	addi	r3,r3,1
10002ba8:	d8c02915 	stw	r3,164(sp)
10002bac:	90c0008c 	andi	r3,r18,2
10002bb0:	d8c02c15 	stw	r3,176(sp)
10002bb4:	18000326 	beq	r3,zero,10002bc4 <___vfprintf_internal_r+0x7a8>
10002bb8:	d8c02917 	ldw	r3,164(sp)
10002bbc:	18c00084 	addi	r3,r3,2
10002bc0:	d8c02915 	stw	r3,164(sp)
10002bc4:	90c0210c 	andi	r3,r18,132
10002bc8:	d8c03015 	stw	r3,192(sp)
10002bcc:	1801c51e 	bne	r3,zero,100032e4 <___vfprintf_internal_r+0xec8>
10002bd0:	d9003117 	ldw	r4,196(sp)
10002bd4:	d8c02917 	ldw	r3,164(sp)
10002bd8:	20e7c83a 	sub	r19,r4,r3
10002bdc:	04c1c10e 	bge	zero,r19,100032e4 <___vfprintf_internal_r+0xec8>
10002be0:	02400404 	movi	r9,16
10002be4:	d8c02017 	ldw	r3,128(sp)
10002be8:	d8801f17 	ldw	r2,124(sp)
10002bec:	4cc52f0e 	bge	r9,r19,100040ac <___vfprintf_internal_r+0x1c90>
10002bf0:	01440074 	movhi	r5,4097
10002bf4:	29485c84 	addi	r5,r5,8562
10002bf8:	dc403b15 	stw	r17,236(sp)
10002bfc:	d9403515 	stw	r5,212(sp)
10002c00:	9823883a 	mov	r17,r19
10002c04:	482d883a 	mov	r22,r9
10002c08:	9027883a 	mov	r19,r18
10002c0c:	070001c4 	movi	fp,7
10002c10:	8025883a 	mov	r18,r16
10002c14:	dc002d17 	ldw	r16,180(sp)
10002c18:	00000306 	br	10002c28 <___vfprintf_internal_r+0x80c>
10002c1c:	8c7ffc04 	addi	r17,r17,-16
10002c20:	42000204 	addi	r8,r8,8
10002c24:	b440130e 	bge	r22,r17,10002c74 <___vfprintf_internal_r+0x858>
10002c28:	01040074 	movhi	r4,4097
10002c2c:	18c00404 	addi	r3,r3,16
10002c30:	10800044 	addi	r2,r2,1
10002c34:	21085c84 	addi	r4,r4,8562
10002c38:	41000015 	stw	r4,0(r8)
10002c3c:	45800115 	stw	r22,4(r8)
10002c40:	d8c02015 	stw	r3,128(sp)
10002c44:	d8801f15 	stw	r2,124(sp)
10002c48:	e0bff40e 	bge	fp,r2,10002c1c <__alt_data_end+0xf8002c1c>
10002c4c:	d9801e04 	addi	r6,sp,120
10002c50:	b80b883a 	mov	r5,r23
10002c54:	8009883a 	mov	r4,r16
10002c58:	0009bfc0 	call	10009bfc <__sprint_r>
10002c5c:	103ef31e 	bne	r2,zero,1000282c <__alt_data_end+0xf800282c>
10002c60:	8c7ffc04 	addi	r17,r17,-16
10002c64:	d8c02017 	ldw	r3,128(sp)
10002c68:	d8801f17 	ldw	r2,124(sp)
10002c6c:	da000404 	addi	r8,sp,16
10002c70:	b47fed16 	blt	r22,r17,10002c28 <__alt_data_end+0xf8002c28>
10002c74:	9021883a 	mov	r16,r18
10002c78:	9825883a 	mov	r18,r19
10002c7c:	8827883a 	mov	r19,r17
10002c80:	dc403b17 	ldw	r17,236(sp)
10002c84:	d9403517 	ldw	r5,212(sp)
10002c88:	98c7883a 	add	r3,r19,r3
10002c8c:	10800044 	addi	r2,r2,1
10002c90:	41400015 	stw	r5,0(r8)
10002c94:	44c00115 	stw	r19,4(r8)
10002c98:	d8c02015 	stw	r3,128(sp)
10002c9c:	d8801f15 	stw	r2,124(sp)
10002ca0:	010001c4 	movi	r4,7
10002ca4:	2082c516 	blt	r4,r2,100037bc <___vfprintf_internal_r+0x13a0>
10002ca8:	df002787 	ldb	fp,158(sp)
10002cac:	42000204 	addi	r8,r8,8
10002cb0:	e0000c26 	beq	fp,zero,10002ce4 <___vfprintf_internal_r+0x8c8>
10002cb4:	d8801f17 	ldw	r2,124(sp)
10002cb8:	d9002784 	addi	r4,sp,158
10002cbc:	18c00044 	addi	r3,r3,1
10002cc0:	10800044 	addi	r2,r2,1
10002cc4:	41000015 	stw	r4,0(r8)
10002cc8:	01000044 	movi	r4,1
10002ccc:	41000115 	stw	r4,4(r8)
10002cd0:	d8c02015 	stw	r3,128(sp)
10002cd4:	d8801f15 	stw	r2,124(sp)
10002cd8:	010001c4 	movi	r4,7
10002cdc:	20825e16 	blt	r4,r2,10003658 <___vfprintf_internal_r+0x123c>
10002ce0:	42000204 	addi	r8,r8,8
10002ce4:	d8802c17 	ldw	r2,176(sp)
10002ce8:	10000c26 	beq	r2,zero,10002d1c <___vfprintf_internal_r+0x900>
10002cec:	d8801f17 	ldw	r2,124(sp)
10002cf0:	d9002704 	addi	r4,sp,156
10002cf4:	18c00084 	addi	r3,r3,2
10002cf8:	10800044 	addi	r2,r2,1
10002cfc:	41000015 	stw	r4,0(r8)
10002d00:	01000084 	movi	r4,2
10002d04:	41000115 	stw	r4,4(r8)
10002d08:	d8c02015 	stw	r3,128(sp)
10002d0c:	d8801f15 	stw	r2,124(sp)
10002d10:	010001c4 	movi	r4,7
10002d14:	20825816 	blt	r4,r2,10003678 <___vfprintf_internal_r+0x125c>
10002d18:	42000204 	addi	r8,r8,8
10002d1c:	d9003017 	ldw	r4,192(sp)
10002d20:	00802004 	movi	r2,128
10002d24:	2081bb26 	beq	r4,r2,10003414 <___vfprintf_internal_r+0xff8>
10002d28:	d9402a17 	ldw	r5,168(sp)
10002d2c:	d8802b17 	ldw	r2,172(sp)
10002d30:	28adc83a 	sub	r22,r5,r2
10002d34:	0580310e 	bge	zero,r22,10002dfc <___vfprintf_internal_r+0x9e0>
10002d38:	07000404 	movi	fp,16
10002d3c:	d8801f17 	ldw	r2,124(sp)
10002d40:	e584360e 	bge	fp,r22,10003e1c <___vfprintf_internal_r+0x1a00>
10002d44:	01440074 	movhi	r5,4097
10002d48:	29485884 	addi	r5,r5,8546
10002d4c:	dc402a15 	stw	r17,168(sp)
10002d50:	d9402c15 	stw	r5,176(sp)
10002d54:	b023883a 	mov	r17,r22
10002d58:	04c001c4 	movi	r19,7
10002d5c:	a82d883a 	mov	r22,r21
10002d60:	902b883a 	mov	r21,r18
10002d64:	8025883a 	mov	r18,r16
10002d68:	dc002d17 	ldw	r16,180(sp)
10002d6c:	00000306 	br	10002d7c <___vfprintf_internal_r+0x960>
10002d70:	8c7ffc04 	addi	r17,r17,-16
10002d74:	42000204 	addi	r8,r8,8
10002d78:	e440110e 	bge	fp,r17,10002dc0 <___vfprintf_internal_r+0x9a4>
10002d7c:	18c00404 	addi	r3,r3,16
10002d80:	10800044 	addi	r2,r2,1
10002d84:	45000015 	stw	r20,0(r8)
10002d88:	47000115 	stw	fp,4(r8)
10002d8c:	d8c02015 	stw	r3,128(sp)
10002d90:	d8801f15 	stw	r2,124(sp)
10002d94:	98bff60e 	bge	r19,r2,10002d70 <__alt_data_end+0xf8002d70>
10002d98:	d9801e04 	addi	r6,sp,120
10002d9c:	b80b883a 	mov	r5,r23
10002da0:	8009883a 	mov	r4,r16
10002da4:	0009bfc0 	call	10009bfc <__sprint_r>
10002da8:	103ea01e 	bne	r2,zero,1000282c <__alt_data_end+0xf800282c>
10002dac:	8c7ffc04 	addi	r17,r17,-16
10002db0:	d8c02017 	ldw	r3,128(sp)
10002db4:	d8801f17 	ldw	r2,124(sp)
10002db8:	da000404 	addi	r8,sp,16
10002dbc:	e47fef16 	blt	fp,r17,10002d7c <__alt_data_end+0xf8002d7c>
10002dc0:	9021883a 	mov	r16,r18
10002dc4:	a825883a 	mov	r18,r21
10002dc8:	b02b883a 	mov	r21,r22
10002dcc:	882d883a 	mov	r22,r17
10002dd0:	dc402a17 	ldw	r17,168(sp)
10002dd4:	d9002c17 	ldw	r4,176(sp)
10002dd8:	1d87883a 	add	r3,r3,r22
10002ddc:	10800044 	addi	r2,r2,1
10002de0:	41000015 	stw	r4,0(r8)
10002de4:	45800115 	stw	r22,4(r8)
10002de8:	d8c02015 	stw	r3,128(sp)
10002dec:	d8801f15 	stw	r2,124(sp)
10002df0:	010001c4 	movi	r4,7
10002df4:	20821016 	blt	r4,r2,10003638 <___vfprintf_internal_r+0x121c>
10002df8:	42000204 	addi	r8,r8,8
10002dfc:	9080400c 	andi	r2,r18,256
10002e00:	10013a1e 	bne	r2,zero,100032ec <___vfprintf_internal_r+0xed0>
10002e04:	d9402b17 	ldw	r5,172(sp)
10002e08:	d8801f17 	ldw	r2,124(sp)
10002e0c:	44000015 	stw	r16,0(r8)
10002e10:	1947883a 	add	r3,r3,r5
10002e14:	10800044 	addi	r2,r2,1
10002e18:	41400115 	stw	r5,4(r8)
10002e1c:	d8c02015 	stw	r3,128(sp)
10002e20:	d8801f15 	stw	r2,124(sp)
10002e24:	010001c4 	movi	r4,7
10002e28:	2081f516 	blt	r4,r2,10003600 <___vfprintf_internal_r+0x11e4>
10002e2c:	42000204 	addi	r8,r8,8
10002e30:	9480010c 	andi	r18,r18,4
10002e34:	90003226 	beq	r18,zero,10002f00 <___vfprintf_internal_r+0xae4>
10002e38:	d9403117 	ldw	r5,196(sp)
10002e3c:	d8802917 	ldw	r2,164(sp)
10002e40:	28a1c83a 	sub	r16,r5,r2
10002e44:	04002e0e 	bge	zero,r16,10002f00 <___vfprintf_internal_r+0xae4>
10002e48:	04400404 	movi	r17,16
10002e4c:	d8801f17 	ldw	r2,124(sp)
10002e50:	8c04c40e 	bge	r17,r16,10004164 <___vfprintf_internal_r+0x1d48>
10002e54:	01440074 	movhi	r5,4097
10002e58:	29485c84 	addi	r5,r5,8562
10002e5c:	d9403515 	stw	r5,212(sp)
10002e60:	048001c4 	movi	r18,7
10002e64:	dcc02d17 	ldw	r19,180(sp)
10002e68:	00000306 	br	10002e78 <___vfprintf_internal_r+0xa5c>
10002e6c:	843ffc04 	addi	r16,r16,-16
10002e70:	42000204 	addi	r8,r8,8
10002e74:	8c00130e 	bge	r17,r16,10002ec4 <___vfprintf_internal_r+0xaa8>
10002e78:	01040074 	movhi	r4,4097
10002e7c:	18c00404 	addi	r3,r3,16
10002e80:	10800044 	addi	r2,r2,1
10002e84:	21085c84 	addi	r4,r4,8562
10002e88:	41000015 	stw	r4,0(r8)
10002e8c:	44400115 	stw	r17,4(r8)
10002e90:	d8c02015 	stw	r3,128(sp)
10002e94:	d8801f15 	stw	r2,124(sp)
10002e98:	90bff40e 	bge	r18,r2,10002e6c <__alt_data_end+0xf8002e6c>
10002e9c:	d9801e04 	addi	r6,sp,120
10002ea0:	b80b883a 	mov	r5,r23
10002ea4:	9809883a 	mov	r4,r19
10002ea8:	0009bfc0 	call	10009bfc <__sprint_r>
10002eac:	103e5f1e 	bne	r2,zero,1000282c <__alt_data_end+0xf800282c>
10002eb0:	843ffc04 	addi	r16,r16,-16
10002eb4:	d8c02017 	ldw	r3,128(sp)
10002eb8:	d8801f17 	ldw	r2,124(sp)
10002ebc:	da000404 	addi	r8,sp,16
10002ec0:	8c3fed16 	blt	r17,r16,10002e78 <__alt_data_end+0xf8002e78>
10002ec4:	d9403517 	ldw	r5,212(sp)
10002ec8:	1c07883a 	add	r3,r3,r16
10002ecc:	10800044 	addi	r2,r2,1
10002ed0:	41400015 	stw	r5,0(r8)
10002ed4:	44000115 	stw	r16,4(r8)
10002ed8:	d8c02015 	stw	r3,128(sp)
10002edc:	d8801f15 	stw	r2,124(sp)
10002ee0:	010001c4 	movi	r4,7
10002ee4:	2080060e 	bge	r4,r2,10002f00 <___vfprintf_internal_r+0xae4>
10002ee8:	d9002d17 	ldw	r4,180(sp)
10002eec:	d9801e04 	addi	r6,sp,120
10002ef0:	b80b883a 	mov	r5,r23
10002ef4:	0009bfc0 	call	10009bfc <__sprint_r>
10002ef8:	103e4c1e 	bne	r2,zero,1000282c <__alt_data_end+0xf800282c>
10002efc:	d8c02017 	ldw	r3,128(sp)
10002f00:	d8803117 	ldw	r2,196(sp)
10002f04:	d9002917 	ldw	r4,164(sp)
10002f08:	1100010e 	bge	r2,r4,10002f10 <___vfprintf_internal_r+0xaf4>
10002f0c:	2005883a 	mov	r2,r4
10002f10:	d9402f17 	ldw	r5,188(sp)
10002f14:	288b883a 	add	r5,r5,r2
10002f18:	d9402f15 	stw	r5,188(sp)
10002f1c:	1801c01e 	bne	r3,zero,10003620 <___vfprintf_internal_r+0x1204>
10002f20:	a8800007 	ldb	r2,0(r21)
10002f24:	d8001f15 	stw	zero,124(sp)
10002f28:	da000404 	addi	r8,sp,16
10002f2c:	103d751e 	bne	r2,zero,10002504 <__alt_data_end+0xf8002504>
10002f30:	a823883a 	mov	r17,r21
10002f34:	003d8b06 	br	10002564 <__alt_data_end+0xf8002564>
10002f38:	8025883a 	mov	r18,r16
10002f3c:	dc002903 	ldbu	r16,164(sp)
10002f40:	e011883a 	mov	r8,fp
10002f44:	84003fcc 	andi	r16,r16,255
10002f48:	8005e51e 	bne	r16,zero,100046e0 <___vfprintf_internal_r+0x22c4>
10002f4c:	94800414 	ori	r18,r18,16
10002f50:	9080080c 	andi	r2,r18,32
10002f54:	10022b26 	beq	r2,zero,10003804 <___vfprintf_internal_r+0x13e8>
10002f58:	d9002e17 	ldw	r4,184(sp)
10002f5c:	d9402a17 	ldw	r5,168(sp)
10002f60:	d8002785 	stb	zero,158(sp)
10002f64:	20c00204 	addi	r3,r4,8
10002f68:	24c00017 	ldw	r19,0(r4)
10002f6c:	25800117 	ldw	r22,4(r4)
10002f70:	28042e16 	blt	r5,zero,1000402c <___vfprintf_internal_r+0x1c10>
10002f74:	013fdfc4 	movi	r4,-129
10002f78:	9d84b03a 	or	r2,r19,r22
10002f7c:	d8c02e15 	stw	r3,184(sp)
10002f80:	9124703a 	and	r18,r18,r4
10002f84:	0039883a 	mov	fp,zero
10002f88:	103e801e 	bne	r2,zero,1000298c <__alt_data_end+0xf800298c>
10002f8c:	d9002a17 	ldw	r4,168(sp)
10002f90:	2002e01e 	bne	r4,zero,10003b14 <___vfprintf_internal_r+0x16f8>
10002f94:	d8002a15 	stw	zero,168(sp)
10002f98:	d8002b15 	stw	zero,172(sp)
10002f9c:	dc001e04 	addi	r16,sp,120
10002fa0:	003ef506 	br	10002b78 <__alt_data_end+0xf8002b78>
10002fa4:	8025883a 	mov	r18,r16
10002fa8:	dc002903 	ldbu	r16,164(sp)
10002fac:	e011883a 	mov	r8,fp
10002fb0:	84003fcc 	andi	r16,r16,255
10002fb4:	8005ba1e 	bne	r16,zero,100046a0 <___vfprintf_internal_r+0x2284>
10002fb8:	01040074 	movhi	r4,4097
10002fbc:	21084c04 	addi	r4,r4,8496
10002fc0:	d9003915 	stw	r4,228(sp)
10002fc4:	9080080c 	andi	r2,r18,32
10002fc8:	10006126 	beq	r2,zero,10003150 <___vfprintf_internal_r+0xd34>
10002fcc:	d9402e17 	ldw	r5,184(sp)
10002fd0:	2cc00017 	ldw	r19,0(r5)
10002fd4:	2d800117 	ldw	r22,4(r5)
10002fd8:	29400204 	addi	r5,r5,8
10002fdc:	d9402e15 	stw	r5,184(sp)
10002fe0:	9080004c 	andi	r2,r18,1
10002fe4:	1001ac26 	beq	r2,zero,10003698 <___vfprintf_internal_r+0x127c>
10002fe8:	9d84b03a 	or	r2,r19,r22
10002fec:	10038526 	beq	r2,zero,10003e04 <___vfprintf_internal_r+0x19e8>
10002ff0:	d8c02a17 	ldw	r3,168(sp)
10002ff4:	00800c04 	movi	r2,48
10002ff8:	d8802705 	stb	r2,156(sp)
10002ffc:	dc402745 	stb	r17,157(sp)
10003000:	d8002785 	stb	zero,158(sp)
10003004:	90800094 	ori	r2,r18,2
10003008:	18047916 	blt	r3,zero,100041f0 <___vfprintf_internal_r+0x1dd4>
1000300c:	00bfdfc4 	movi	r2,-129
10003010:	90a4703a 	and	r18,r18,r2
10003014:	94800094 	ori	r18,r18,2
10003018:	0039883a 	mov	fp,zero
1000301c:	d9003917 	ldw	r4,228(sp)
10003020:	dc001e04 	addi	r16,sp,120
10003024:	988003cc 	andi	r2,r19,15
10003028:	b006973a 	slli	r3,r22,28
1000302c:	2085883a 	add	r2,r4,r2
10003030:	9826d13a 	srli	r19,r19,4
10003034:	10800003 	ldbu	r2,0(r2)
10003038:	b02cd13a 	srli	r22,r22,4
1000303c:	843fffc4 	addi	r16,r16,-1
10003040:	1ce6b03a 	or	r19,r3,r19
10003044:	80800005 	stb	r2,0(r16)
10003048:	9d84b03a 	or	r2,r19,r22
1000304c:	103ff51e 	bne	r2,zero,10003024 <__alt_data_end+0xf8003024>
10003050:	d8c02817 	ldw	r3,160(sp)
10003054:	1c07c83a 	sub	r3,r3,r16
10003058:	d8c02b15 	stw	r3,172(sp)
1000305c:	003ec606 	br	10002b78 <__alt_data_end+0xf8002b78>
10003060:	8025883a 	mov	r18,r16
10003064:	dc002903 	ldbu	r16,164(sp)
10003068:	e011883a 	mov	r8,fp
1000306c:	84003fcc 	andi	r16,r16,255
10003070:	803e9626 	beq	r16,zero,10002acc <__alt_data_end+0xf8002acc>
10003074:	d8c02b03 	ldbu	r3,172(sp)
10003078:	d8c02785 	stb	r3,158(sp)
1000307c:	003e9306 	br	10002acc <__alt_data_end+0xf8002acc>
10003080:	00c00044 	movi	r3,1
10003084:	d8c02905 	stb	r3,164(sp)
10003088:	00c00ac4 	movi	r3,43
1000308c:	d8c02b05 	stb	r3,172(sp)
10003090:	ac400007 	ldb	r17,0(r21)
10003094:	003d4306 	br	100025a4 <__alt_data_end+0xf80025a4>
10003098:	84000814 	ori	r16,r16,32
1000309c:	ac400007 	ldb	r17,0(r21)
100030a0:	003d4006 	br	100025a4 <__alt_data_end+0xf80025a4>
100030a4:	d8802e17 	ldw	r2,184(sp)
100030a8:	8025883a 	mov	r18,r16
100030ac:	d8002785 	stb	zero,158(sp)
100030b0:	14000017 	ldw	r16,0(r2)
100030b4:	e011883a 	mov	r8,fp
100030b8:	14c00104 	addi	r19,r2,4
100030bc:	80042d26 	beq	r16,zero,10004174 <___vfprintf_internal_r+0x1d58>
100030c0:	d8c02a17 	ldw	r3,168(sp)
100030c4:	1803e416 	blt	r3,zero,10004058 <___vfprintf_internal_r+0x1c3c>
100030c8:	180d883a 	mov	r6,r3
100030cc:	000b883a 	mov	r5,zero
100030d0:	8009883a 	mov	r4,r16
100030d4:	df003d15 	stw	fp,244(sp)
100030d8:	0007d540 	call	10007d54 <memchr>
100030dc:	da003d17 	ldw	r8,244(sp)
100030e0:	10046826 	beq	r2,zero,10004284 <___vfprintf_internal_r+0x1e68>
100030e4:	1405c83a 	sub	r2,r2,r16
100030e8:	d8802b15 	stw	r2,172(sp)
100030ec:	1003e016 	blt	r2,zero,10004070 <___vfprintf_internal_r+0x1c54>
100030f0:	df002783 	ldbu	fp,158(sp)
100030f4:	d8802915 	stw	r2,164(sp)
100030f8:	dcc02e15 	stw	r19,184(sp)
100030fc:	d8002a15 	stw	zero,168(sp)
10003100:	d8003215 	stw	zero,200(sp)
10003104:	003ea206 	br	10002b90 <__alt_data_end+0xf8002b90>
10003108:	8025883a 	mov	r18,r16
1000310c:	dc002903 	ldbu	r16,164(sp)
10003110:	e011883a 	mov	r8,fp
10003114:	84003fcc 	andi	r16,r16,255
10003118:	803f8d26 	beq	r16,zero,10002f50 <__alt_data_end+0xf8002f50>
1000311c:	d8c02b03 	ldbu	r3,172(sp)
10003120:	d8c02785 	stb	r3,158(sp)
10003124:	003f8a06 	br	10002f50 <__alt_data_end+0xf8002f50>
10003128:	8025883a 	mov	r18,r16
1000312c:	dc002903 	ldbu	r16,164(sp)
10003130:	e011883a 	mov	r8,fp
10003134:	84003fcc 	andi	r16,r16,255
10003138:	8005661e 	bne	r16,zero,100046d4 <___vfprintf_internal_r+0x22b8>
1000313c:	01040074 	movhi	r4,4097
10003140:	21085104 	addi	r4,r4,8516
10003144:	d9003915 	stw	r4,228(sp)
10003148:	9080080c 	andi	r2,r18,32
1000314c:	103f9f1e 	bne	r2,zero,10002fcc <__alt_data_end+0xf8002fcc>
10003150:	9080040c 	andi	r2,r18,16
10003154:	1002eb26 	beq	r2,zero,10003d04 <___vfprintf_internal_r+0x18e8>
10003158:	d8802e17 	ldw	r2,184(sp)
1000315c:	002d883a 	mov	r22,zero
10003160:	14c00017 	ldw	r19,0(r2)
10003164:	10800104 	addi	r2,r2,4
10003168:	d8802e15 	stw	r2,184(sp)
1000316c:	003f9c06 	br	10002fe0 <__alt_data_end+0xf8002fe0>
10003170:	d8802b07 	ldb	r2,172(sp)
10003174:	1002e11e 	bne	r2,zero,10003cfc <___vfprintf_internal_r+0x18e0>
10003178:	00c00044 	movi	r3,1
1000317c:	d8c02905 	stb	r3,164(sp)
10003180:	00c00804 	movi	r3,32
10003184:	d8c02b05 	stb	r3,172(sp)
10003188:	ac400007 	ldb	r17,0(r21)
1000318c:	003d0506 	br	100025a4 <__alt_data_end+0xf80025a4>
10003190:	84000054 	ori	r16,r16,1
10003194:	ac400007 	ldb	r17,0(r21)
10003198:	003d0206 	br	100025a4 <__alt_data_end+0xf80025a4>
1000319c:	8025883a 	mov	r18,r16
100031a0:	dc002903 	ldbu	r16,164(sp)
100031a4:	e011883a 	mov	r8,fp
100031a8:	84003fcc 	andi	r16,r16,255
100031ac:	803de726 	beq	r16,zero,1000294c <__alt_data_end+0xf800294c>
100031b0:	d8c02b03 	ldbu	r3,172(sp)
100031b4:	d8c02785 	stb	r3,158(sp)
100031b8:	003de406 	br	1000294c <__alt_data_end+0xf800294c>
100031bc:	84001014 	ori	r16,r16,64
100031c0:	ac400007 	ldb	r17,0(r21)
100031c4:	003cf706 	br	100025a4 <__alt_data_end+0xf80025a4>
100031c8:	ac400007 	ldb	r17,0(r21)
100031cc:	00801b04 	movi	r2,108
100031d0:	88838f26 	beq	r17,r2,10004010 <___vfprintf_internal_r+0x1bf4>
100031d4:	84000414 	ori	r16,r16,16
100031d8:	003cf206 	br	100025a4 <__alt_data_end+0xf80025a4>
100031dc:	8025883a 	mov	r18,r16
100031e0:	dc002903 	ldbu	r16,164(sp)
100031e4:	e011883a 	mov	r8,fp
100031e8:	84003fcc 	andi	r16,r16,255
100031ec:	80053f1e 	bne	r16,zero,100046ec <___vfprintf_internal_r+0x22d0>
100031f0:	9080080c 	andi	r2,r18,32
100031f4:	1002d226 	beq	r2,zero,10003d40 <___vfprintf_internal_r+0x1924>
100031f8:	d9002e17 	ldw	r4,184(sp)
100031fc:	d9402f17 	ldw	r5,188(sp)
10003200:	20800017 	ldw	r2,0(r4)
10003204:	2807d7fa 	srai	r3,r5,31
10003208:	21000104 	addi	r4,r4,4
1000320c:	d9002e15 	stw	r4,184(sp)
10003210:	11400015 	stw	r5,0(r2)
10003214:	10c00115 	stw	r3,4(r2)
10003218:	003cb806 	br	100024fc <__alt_data_end+0xf80024fc>
1000321c:	d8c02e17 	ldw	r3,184(sp)
10003220:	d9002e17 	ldw	r4,184(sp)
10003224:	8025883a 	mov	r18,r16
10003228:	18800017 	ldw	r2,0(r3)
1000322c:	21000104 	addi	r4,r4,4
10003230:	00c00044 	movi	r3,1
10003234:	e011883a 	mov	r8,fp
10003238:	d8c02915 	stw	r3,164(sp)
1000323c:	d8002785 	stb	zero,158(sp)
10003240:	d8801405 	stb	r2,80(sp)
10003244:	d9002e15 	stw	r4,184(sp)
10003248:	d8c02b15 	stw	r3,172(sp)
1000324c:	d8002a15 	stw	zero,168(sp)
10003250:	d8003215 	stw	zero,200(sp)
10003254:	dc001404 	addi	r16,sp,80
10003258:	0039883a 	mov	fp,zero
1000325c:	003e5306 	br	10002bac <__alt_data_end+0xf8002bac>
10003260:	01040074 	movhi	r4,4097
10003264:	21085104 	addi	r4,r4,8516
10003268:	0039883a 	mov	fp,zero
1000326c:	d9003915 	stw	r4,228(sp)
10003270:	04401e04 	movi	r17,120
10003274:	003f6906 	br	1000301c <__alt_data_end+0xf800301c>
10003278:	8025883a 	mov	r18,r16
1000327c:	dc002903 	ldbu	r16,164(sp)
10003280:	e011883a 	mov	r8,fp
10003284:	84003fcc 	andi	r16,r16,255
10003288:	8005081e 	bne	r16,zero,100046ac <___vfprintf_internal_r+0x2290>
1000328c:	883d6126 	beq	r17,zero,10002814 <__alt_data_end+0xf8002814>
10003290:	00c00044 	movi	r3,1
10003294:	d8c02915 	stw	r3,164(sp)
10003298:	dc401405 	stb	r17,80(sp)
1000329c:	d8002785 	stb	zero,158(sp)
100032a0:	003fe906 	br	10003248 <__alt_data_end+0xf8003248>
100032a4:	01440074 	movhi	r5,4097
100032a8:	29485104 	addi	r5,r5,8516
100032ac:	d9403915 	stw	r5,228(sp)
100032b0:	d8c02e15 	stw	r3,184(sp)
100032b4:	1025883a 	mov	r18,r2
100032b8:	04401e04 	movi	r17,120
100032bc:	9d84b03a 	or	r2,r19,r22
100032c0:	1000fc1e 	bne	r2,zero,100036b4 <___vfprintf_internal_r+0x1298>
100032c4:	0039883a 	mov	fp,zero
100032c8:	00800084 	movi	r2,2
100032cc:	10803fcc 	andi	r2,r2,255
100032d0:	00c00044 	movi	r3,1
100032d4:	10c20f26 	beq	r2,r3,10003b14 <___vfprintf_internal_r+0x16f8>
100032d8:	00c00084 	movi	r3,2
100032dc:	10fd3326 	beq	r2,r3,100027ac <__alt_data_end+0xf80027ac>
100032e0:	003e0b06 	br	10002b10 <__alt_data_end+0xf8002b10>
100032e4:	d8c02017 	ldw	r3,128(sp)
100032e8:	003e7106 	br	10002cb0 <__alt_data_end+0xf8002cb0>
100032ec:	00801944 	movi	r2,101
100032f0:	14407e0e 	bge	r2,r17,100034ec <___vfprintf_internal_r+0x10d0>
100032f4:	d9003617 	ldw	r4,216(sp)
100032f8:	d9403817 	ldw	r5,224(sp)
100032fc:	000d883a 	mov	r6,zero
10003300:	000f883a 	mov	r7,zero
10003304:	d8c03c15 	stw	r3,240(sp)
10003308:	da003d15 	stw	r8,244(sp)
1000330c:	000db5c0 	call	1000db5c <__eqdf2>
10003310:	d8c03c17 	ldw	r3,240(sp)
10003314:	da003d17 	ldw	r8,244(sp)
10003318:	1000f71e 	bne	r2,zero,100036f8 <___vfprintf_internal_r+0x12dc>
1000331c:	d8801f17 	ldw	r2,124(sp)
10003320:	01040074 	movhi	r4,4097
10003324:	21085804 	addi	r4,r4,8544
10003328:	18c00044 	addi	r3,r3,1
1000332c:	10800044 	addi	r2,r2,1
10003330:	41000015 	stw	r4,0(r8)
10003334:	01000044 	movi	r4,1
10003338:	41000115 	stw	r4,4(r8)
1000333c:	d8c02015 	stw	r3,128(sp)
10003340:	d8801f15 	stw	r2,124(sp)
10003344:	010001c4 	movi	r4,7
10003348:	2082b816 	blt	r4,r2,10003e2c <___vfprintf_internal_r+0x1a10>
1000334c:	42000204 	addi	r8,r8,8
10003350:	d8802617 	ldw	r2,152(sp)
10003354:	d9403317 	ldw	r5,204(sp)
10003358:	11400216 	blt	r2,r5,10003364 <___vfprintf_internal_r+0xf48>
1000335c:	9080004c 	andi	r2,r18,1
10003360:	103eb326 	beq	r2,zero,10002e30 <__alt_data_end+0xf8002e30>
10003364:	d8803717 	ldw	r2,220(sp)
10003368:	d9003417 	ldw	r4,208(sp)
1000336c:	d9403717 	ldw	r5,220(sp)
10003370:	1887883a 	add	r3,r3,r2
10003374:	d8801f17 	ldw	r2,124(sp)
10003378:	41000015 	stw	r4,0(r8)
1000337c:	41400115 	stw	r5,4(r8)
10003380:	10800044 	addi	r2,r2,1
10003384:	d8c02015 	stw	r3,128(sp)
10003388:	d8801f15 	stw	r2,124(sp)
1000338c:	010001c4 	movi	r4,7
10003390:	20832916 	blt	r4,r2,10004038 <___vfprintf_internal_r+0x1c1c>
10003394:	42000204 	addi	r8,r8,8
10003398:	d8803317 	ldw	r2,204(sp)
1000339c:	143fffc4 	addi	r16,r2,-1
100033a0:	043ea30e 	bge	zero,r16,10002e30 <__alt_data_end+0xf8002e30>
100033a4:	04400404 	movi	r17,16
100033a8:	d8801f17 	ldw	r2,124(sp)
100033ac:	8c00880e 	bge	r17,r16,100035d0 <___vfprintf_internal_r+0x11b4>
100033b0:	01440074 	movhi	r5,4097
100033b4:	29485884 	addi	r5,r5,8546
100033b8:	d9402c15 	stw	r5,176(sp)
100033bc:	058001c4 	movi	r22,7
100033c0:	dcc02d17 	ldw	r19,180(sp)
100033c4:	00000306 	br	100033d4 <___vfprintf_internal_r+0xfb8>
100033c8:	42000204 	addi	r8,r8,8
100033cc:	843ffc04 	addi	r16,r16,-16
100033d0:	8c00820e 	bge	r17,r16,100035dc <___vfprintf_internal_r+0x11c0>
100033d4:	18c00404 	addi	r3,r3,16
100033d8:	10800044 	addi	r2,r2,1
100033dc:	45000015 	stw	r20,0(r8)
100033e0:	44400115 	stw	r17,4(r8)
100033e4:	d8c02015 	stw	r3,128(sp)
100033e8:	d8801f15 	stw	r2,124(sp)
100033ec:	b0bff60e 	bge	r22,r2,100033c8 <__alt_data_end+0xf80033c8>
100033f0:	d9801e04 	addi	r6,sp,120
100033f4:	b80b883a 	mov	r5,r23
100033f8:	9809883a 	mov	r4,r19
100033fc:	0009bfc0 	call	10009bfc <__sprint_r>
10003400:	103d0a1e 	bne	r2,zero,1000282c <__alt_data_end+0xf800282c>
10003404:	d8c02017 	ldw	r3,128(sp)
10003408:	d8801f17 	ldw	r2,124(sp)
1000340c:	da000404 	addi	r8,sp,16
10003410:	003fee06 	br	100033cc <__alt_data_end+0xf80033cc>
10003414:	d9403117 	ldw	r5,196(sp)
10003418:	d8802917 	ldw	r2,164(sp)
1000341c:	28adc83a 	sub	r22,r5,r2
10003420:	05be410e 	bge	zero,r22,10002d28 <__alt_data_end+0xf8002d28>
10003424:	07000404 	movi	fp,16
10003428:	d8801f17 	ldw	r2,124(sp)
1000342c:	e5838f0e 	bge	fp,r22,1000426c <___vfprintf_internal_r+0x1e50>
10003430:	01440074 	movhi	r5,4097
10003434:	29485884 	addi	r5,r5,8546
10003438:	dc403015 	stw	r17,192(sp)
1000343c:	d9402c15 	stw	r5,176(sp)
10003440:	b023883a 	mov	r17,r22
10003444:	04c001c4 	movi	r19,7
10003448:	a82d883a 	mov	r22,r21
1000344c:	902b883a 	mov	r21,r18
10003450:	8025883a 	mov	r18,r16
10003454:	dc002d17 	ldw	r16,180(sp)
10003458:	00000306 	br	10003468 <___vfprintf_internal_r+0x104c>
1000345c:	8c7ffc04 	addi	r17,r17,-16
10003460:	42000204 	addi	r8,r8,8
10003464:	e440110e 	bge	fp,r17,100034ac <___vfprintf_internal_r+0x1090>
10003468:	18c00404 	addi	r3,r3,16
1000346c:	10800044 	addi	r2,r2,1
10003470:	45000015 	stw	r20,0(r8)
10003474:	47000115 	stw	fp,4(r8)
10003478:	d8c02015 	stw	r3,128(sp)
1000347c:	d8801f15 	stw	r2,124(sp)
10003480:	98bff60e 	bge	r19,r2,1000345c <__alt_data_end+0xf800345c>
10003484:	d9801e04 	addi	r6,sp,120
10003488:	b80b883a 	mov	r5,r23
1000348c:	8009883a 	mov	r4,r16
10003490:	0009bfc0 	call	10009bfc <__sprint_r>
10003494:	103ce51e 	bne	r2,zero,1000282c <__alt_data_end+0xf800282c>
10003498:	8c7ffc04 	addi	r17,r17,-16
1000349c:	d8c02017 	ldw	r3,128(sp)
100034a0:	d8801f17 	ldw	r2,124(sp)
100034a4:	da000404 	addi	r8,sp,16
100034a8:	e47fef16 	blt	fp,r17,10003468 <__alt_data_end+0xf8003468>
100034ac:	9021883a 	mov	r16,r18
100034b0:	a825883a 	mov	r18,r21
100034b4:	b02b883a 	mov	r21,r22
100034b8:	882d883a 	mov	r22,r17
100034bc:	dc403017 	ldw	r17,192(sp)
100034c0:	d9002c17 	ldw	r4,176(sp)
100034c4:	1d87883a 	add	r3,r3,r22
100034c8:	10800044 	addi	r2,r2,1
100034cc:	41000015 	stw	r4,0(r8)
100034d0:	45800115 	stw	r22,4(r8)
100034d4:	d8c02015 	stw	r3,128(sp)
100034d8:	d8801f15 	stw	r2,124(sp)
100034dc:	010001c4 	movi	r4,7
100034e0:	20818e16 	blt	r4,r2,10003b1c <___vfprintf_internal_r+0x1700>
100034e4:	42000204 	addi	r8,r8,8
100034e8:	003e0f06 	br	10002d28 <__alt_data_end+0xf8002d28>
100034ec:	d9403317 	ldw	r5,204(sp)
100034f0:	00800044 	movi	r2,1
100034f4:	18c00044 	addi	r3,r3,1
100034f8:	1141530e 	bge	r2,r5,10003a48 <___vfprintf_internal_r+0x162c>
100034fc:	dc401f17 	ldw	r17,124(sp)
10003500:	00800044 	movi	r2,1
10003504:	40800115 	stw	r2,4(r8)
10003508:	8c400044 	addi	r17,r17,1
1000350c:	44000015 	stw	r16,0(r8)
10003510:	d8c02015 	stw	r3,128(sp)
10003514:	dc401f15 	stw	r17,124(sp)
10003518:	008001c4 	movi	r2,7
1000351c:	14416b16 	blt	r2,r17,10003acc <___vfprintf_internal_r+0x16b0>
10003520:	42000204 	addi	r8,r8,8
10003524:	d8803717 	ldw	r2,220(sp)
10003528:	d9003417 	ldw	r4,208(sp)
1000352c:	8c400044 	addi	r17,r17,1
10003530:	10c7883a 	add	r3,r2,r3
10003534:	40800115 	stw	r2,4(r8)
10003538:	41000015 	stw	r4,0(r8)
1000353c:	d8c02015 	stw	r3,128(sp)
10003540:	dc401f15 	stw	r17,124(sp)
10003544:	008001c4 	movi	r2,7
10003548:	14416916 	blt	r2,r17,10003af0 <___vfprintf_internal_r+0x16d4>
1000354c:	45800204 	addi	r22,r8,8
10003550:	d9003617 	ldw	r4,216(sp)
10003554:	d9403817 	ldw	r5,224(sp)
10003558:	000d883a 	mov	r6,zero
1000355c:	000f883a 	mov	r7,zero
10003560:	d8c03c15 	stw	r3,240(sp)
10003564:	000db5c0 	call	1000db5c <__eqdf2>
10003568:	d8c03c17 	ldw	r3,240(sp)
1000356c:	1000bc26 	beq	r2,zero,10003860 <___vfprintf_internal_r+0x1444>
10003570:	d9403317 	ldw	r5,204(sp)
10003574:	84000044 	addi	r16,r16,1
10003578:	8c400044 	addi	r17,r17,1
1000357c:	28bfffc4 	addi	r2,r5,-1
10003580:	1887883a 	add	r3,r3,r2
10003584:	b0800115 	stw	r2,4(r22)
10003588:	b4000015 	stw	r16,0(r22)
1000358c:	d8c02015 	stw	r3,128(sp)
10003590:	dc401f15 	stw	r17,124(sp)
10003594:	008001c4 	movi	r2,7
10003598:	14414316 	blt	r2,r17,10003aa8 <___vfprintf_internal_r+0x168c>
1000359c:	b5800204 	addi	r22,r22,8
100035a0:	d9003a17 	ldw	r4,232(sp)
100035a4:	df0022c4 	addi	fp,sp,139
100035a8:	8c400044 	addi	r17,r17,1
100035ac:	20c7883a 	add	r3,r4,r3
100035b0:	b7000015 	stw	fp,0(r22)
100035b4:	b1000115 	stw	r4,4(r22)
100035b8:	d8c02015 	stw	r3,128(sp)
100035bc:	dc401f15 	stw	r17,124(sp)
100035c0:	008001c4 	movi	r2,7
100035c4:	14400e16 	blt	r2,r17,10003600 <___vfprintf_internal_r+0x11e4>
100035c8:	b2000204 	addi	r8,r22,8
100035cc:	003e1806 	br	10002e30 <__alt_data_end+0xf8002e30>
100035d0:	01040074 	movhi	r4,4097
100035d4:	21085884 	addi	r4,r4,8546
100035d8:	d9002c15 	stw	r4,176(sp)
100035dc:	d9002c17 	ldw	r4,176(sp)
100035e0:	1c07883a 	add	r3,r3,r16
100035e4:	44000115 	stw	r16,4(r8)
100035e8:	41000015 	stw	r4,0(r8)
100035ec:	10800044 	addi	r2,r2,1
100035f0:	d8c02015 	stw	r3,128(sp)
100035f4:	d8801f15 	stw	r2,124(sp)
100035f8:	010001c4 	movi	r4,7
100035fc:	20be0b0e 	bge	r4,r2,10002e2c <__alt_data_end+0xf8002e2c>
10003600:	d9002d17 	ldw	r4,180(sp)
10003604:	d9801e04 	addi	r6,sp,120
10003608:	b80b883a 	mov	r5,r23
1000360c:	0009bfc0 	call	10009bfc <__sprint_r>
10003610:	103c861e 	bne	r2,zero,1000282c <__alt_data_end+0xf800282c>
10003614:	d8c02017 	ldw	r3,128(sp)
10003618:	da000404 	addi	r8,sp,16
1000361c:	003e0406 	br	10002e30 <__alt_data_end+0xf8002e30>
10003620:	d9002d17 	ldw	r4,180(sp)
10003624:	d9801e04 	addi	r6,sp,120
10003628:	b80b883a 	mov	r5,r23
1000362c:	0009bfc0 	call	10009bfc <__sprint_r>
10003630:	103e3b26 	beq	r2,zero,10002f20 <__alt_data_end+0xf8002f20>
10003634:	003c7d06 	br	1000282c <__alt_data_end+0xf800282c>
10003638:	d9002d17 	ldw	r4,180(sp)
1000363c:	d9801e04 	addi	r6,sp,120
10003640:	b80b883a 	mov	r5,r23
10003644:	0009bfc0 	call	10009bfc <__sprint_r>
10003648:	103c781e 	bne	r2,zero,1000282c <__alt_data_end+0xf800282c>
1000364c:	d8c02017 	ldw	r3,128(sp)
10003650:	da000404 	addi	r8,sp,16
10003654:	003de906 	br	10002dfc <__alt_data_end+0xf8002dfc>
10003658:	d9002d17 	ldw	r4,180(sp)
1000365c:	d9801e04 	addi	r6,sp,120
10003660:	b80b883a 	mov	r5,r23
10003664:	0009bfc0 	call	10009bfc <__sprint_r>
10003668:	103c701e 	bne	r2,zero,1000282c <__alt_data_end+0xf800282c>
1000366c:	d8c02017 	ldw	r3,128(sp)
10003670:	da000404 	addi	r8,sp,16
10003674:	003d9b06 	br	10002ce4 <__alt_data_end+0xf8002ce4>
10003678:	d9002d17 	ldw	r4,180(sp)
1000367c:	d9801e04 	addi	r6,sp,120
10003680:	b80b883a 	mov	r5,r23
10003684:	0009bfc0 	call	10009bfc <__sprint_r>
10003688:	103c681e 	bne	r2,zero,1000282c <__alt_data_end+0xf800282c>
1000368c:	d8c02017 	ldw	r3,128(sp)
10003690:	da000404 	addi	r8,sp,16
10003694:	003da106 	br	10002d1c <__alt_data_end+0xf8002d1c>
10003698:	d9402a17 	ldw	r5,168(sp)
1000369c:	d8002785 	stb	zero,158(sp)
100036a0:	283f0616 	blt	r5,zero,100032bc <__alt_data_end+0xf80032bc>
100036a4:	00ffdfc4 	movi	r3,-129
100036a8:	9d84b03a 	or	r2,r19,r22
100036ac:	90e4703a 	and	r18,r18,r3
100036b0:	103c3b26 	beq	r2,zero,100027a0 <__alt_data_end+0xf80027a0>
100036b4:	0039883a 	mov	fp,zero
100036b8:	003e5806 	br	1000301c <__alt_data_end+0xf800301c>
100036bc:	9080040c 	andi	r2,r18,16
100036c0:	1001b326 	beq	r2,zero,10003d90 <___vfprintf_internal_r+0x1974>
100036c4:	d8c02e17 	ldw	r3,184(sp)
100036c8:	d9002a17 	ldw	r4,168(sp)
100036cc:	d8002785 	stb	zero,158(sp)
100036d0:	18800104 	addi	r2,r3,4
100036d4:	1cc00017 	ldw	r19,0(r3)
100036d8:	002d883a 	mov	r22,zero
100036dc:	2001b516 	blt	r4,zero,10003db4 <___vfprintf_internal_r+0x1998>
100036e0:	00ffdfc4 	movi	r3,-129
100036e4:	d8802e15 	stw	r2,184(sp)
100036e8:	90e4703a 	and	r18,r18,r3
100036ec:	983d0526 	beq	r19,zero,10002b04 <__alt_data_end+0xf8002b04>
100036f0:	0039883a 	mov	fp,zero
100036f4:	003d0806 	br	10002b18 <__alt_data_end+0xf8002b18>
100036f8:	dc402617 	ldw	r17,152(sp)
100036fc:	0441d30e 	bge	zero,r17,10003e4c <___vfprintf_internal_r+0x1a30>
10003700:	dc403217 	ldw	r17,200(sp)
10003704:	d8803317 	ldw	r2,204(sp)
10003708:	1440010e 	bge	r2,r17,10003710 <___vfprintf_internal_r+0x12f4>
1000370c:	1023883a 	mov	r17,r2
10003710:	04400a0e 	bge	zero,r17,1000373c <___vfprintf_internal_r+0x1320>
10003714:	d8801f17 	ldw	r2,124(sp)
10003718:	1c47883a 	add	r3,r3,r17
1000371c:	44000015 	stw	r16,0(r8)
10003720:	10800044 	addi	r2,r2,1
10003724:	44400115 	stw	r17,4(r8)
10003728:	d8c02015 	stw	r3,128(sp)
1000372c:	d8801f15 	stw	r2,124(sp)
10003730:	010001c4 	movi	r4,7
10003734:	20826516 	blt	r4,r2,100040cc <___vfprintf_internal_r+0x1cb0>
10003738:	42000204 	addi	r8,r8,8
1000373c:	88026116 	blt	r17,zero,100040c4 <___vfprintf_internal_r+0x1ca8>
10003740:	d9003217 	ldw	r4,200(sp)
10003744:	2463c83a 	sub	r17,r4,r17
10003748:	04407b0e 	bge	zero,r17,10003938 <___vfprintf_internal_r+0x151c>
1000374c:	05800404 	movi	r22,16
10003750:	d8801f17 	ldw	r2,124(sp)
10003754:	b4419d0e 	bge	r22,r17,10003dcc <___vfprintf_internal_r+0x19b0>
10003758:	01040074 	movhi	r4,4097
1000375c:	21085884 	addi	r4,r4,8546
10003760:	d9002c15 	stw	r4,176(sp)
10003764:	070001c4 	movi	fp,7
10003768:	dcc02d17 	ldw	r19,180(sp)
1000376c:	00000306 	br	1000377c <___vfprintf_internal_r+0x1360>
10003770:	42000204 	addi	r8,r8,8
10003774:	8c7ffc04 	addi	r17,r17,-16
10003778:	b441970e 	bge	r22,r17,10003dd8 <___vfprintf_internal_r+0x19bc>
1000377c:	18c00404 	addi	r3,r3,16
10003780:	10800044 	addi	r2,r2,1
10003784:	45000015 	stw	r20,0(r8)
10003788:	45800115 	stw	r22,4(r8)
1000378c:	d8c02015 	stw	r3,128(sp)
10003790:	d8801f15 	stw	r2,124(sp)
10003794:	e0bff60e 	bge	fp,r2,10003770 <__alt_data_end+0xf8003770>
10003798:	d9801e04 	addi	r6,sp,120
1000379c:	b80b883a 	mov	r5,r23
100037a0:	9809883a 	mov	r4,r19
100037a4:	0009bfc0 	call	10009bfc <__sprint_r>
100037a8:	103c201e 	bne	r2,zero,1000282c <__alt_data_end+0xf800282c>
100037ac:	d8c02017 	ldw	r3,128(sp)
100037b0:	d8801f17 	ldw	r2,124(sp)
100037b4:	da000404 	addi	r8,sp,16
100037b8:	003fee06 	br	10003774 <__alt_data_end+0xf8003774>
100037bc:	d9002d17 	ldw	r4,180(sp)
100037c0:	d9801e04 	addi	r6,sp,120
100037c4:	b80b883a 	mov	r5,r23
100037c8:	0009bfc0 	call	10009bfc <__sprint_r>
100037cc:	103c171e 	bne	r2,zero,1000282c <__alt_data_end+0xf800282c>
100037d0:	d8c02017 	ldw	r3,128(sp)
100037d4:	df002787 	ldb	fp,158(sp)
100037d8:	da000404 	addi	r8,sp,16
100037dc:	003d3406 	br	10002cb0 <__alt_data_end+0xf8002cb0>
100037e0:	9080040c 	andi	r2,r18,16
100037e4:	10016126 	beq	r2,zero,10003d6c <___vfprintf_internal_r+0x1950>
100037e8:	d9402e17 	ldw	r5,184(sp)
100037ec:	2cc00017 	ldw	r19,0(r5)
100037f0:	29400104 	addi	r5,r5,4
100037f4:	d9402e15 	stw	r5,184(sp)
100037f8:	982dd7fa 	srai	r22,r19,31
100037fc:	b005883a 	mov	r2,r22
10003800:	003c5a06 	br	1000296c <__alt_data_end+0xf800296c>
10003804:	9080040c 	andi	r2,r18,16
10003808:	10003526 	beq	r2,zero,100038e0 <___vfprintf_internal_r+0x14c4>
1000380c:	d8c02e17 	ldw	r3,184(sp)
10003810:	d9002a17 	ldw	r4,168(sp)
10003814:	d8002785 	stb	zero,158(sp)
10003818:	18800104 	addi	r2,r3,4
1000381c:	1cc00017 	ldw	r19,0(r3)
10003820:	002d883a 	mov	r22,zero
10003824:	20003716 	blt	r4,zero,10003904 <___vfprintf_internal_r+0x14e8>
10003828:	00ffdfc4 	movi	r3,-129
1000382c:	d8802e15 	stw	r2,184(sp)
10003830:	90e4703a 	and	r18,r18,r3
10003834:	0039883a 	mov	fp,zero
10003838:	983dd426 	beq	r19,zero,10002f8c <__alt_data_end+0xf8002f8c>
1000383c:	00800244 	movi	r2,9
10003840:	14fc5336 	bltu	r2,r19,10002990 <__alt_data_end+0xf8002990>
10003844:	d8c02817 	ldw	r3,160(sp)
10003848:	dc001dc4 	addi	r16,sp,119
1000384c:	9cc00c04 	addi	r19,r19,48
10003850:	1c07c83a 	sub	r3,r3,r16
10003854:	dcc01dc5 	stb	r19,119(sp)
10003858:	d8c02b15 	stw	r3,172(sp)
1000385c:	003cc606 	br	10002b78 <__alt_data_end+0xf8002b78>
10003860:	d8803317 	ldw	r2,204(sp)
10003864:	143fffc4 	addi	r16,r2,-1
10003868:	043f4d0e 	bge	zero,r16,100035a0 <__alt_data_end+0xf80035a0>
1000386c:	07000404 	movi	fp,16
10003870:	e400810e 	bge	fp,r16,10003a78 <___vfprintf_internal_r+0x165c>
10003874:	01440074 	movhi	r5,4097
10003878:	29485884 	addi	r5,r5,8546
1000387c:	d9402c15 	stw	r5,176(sp)
10003880:	01c001c4 	movi	r7,7
10003884:	dcc02d17 	ldw	r19,180(sp)
10003888:	00000306 	br	10003898 <___vfprintf_internal_r+0x147c>
1000388c:	b5800204 	addi	r22,r22,8
10003890:	843ffc04 	addi	r16,r16,-16
10003894:	e4007b0e 	bge	fp,r16,10003a84 <___vfprintf_internal_r+0x1668>
10003898:	18c00404 	addi	r3,r3,16
1000389c:	8c400044 	addi	r17,r17,1
100038a0:	b5000015 	stw	r20,0(r22)
100038a4:	b7000115 	stw	fp,4(r22)
100038a8:	d8c02015 	stw	r3,128(sp)
100038ac:	dc401f15 	stw	r17,124(sp)
100038b0:	3c7ff60e 	bge	r7,r17,1000388c <__alt_data_end+0xf800388c>
100038b4:	d9801e04 	addi	r6,sp,120
100038b8:	b80b883a 	mov	r5,r23
100038bc:	9809883a 	mov	r4,r19
100038c0:	d9c03c15 	stw	r7,240(sp)
100038c4:	0009bfc0 	call	10009bfc <__sprint_r>
100038c8:	d9c03c17 	ldw	r7,240(sp)
100038cc:	103bd71e 	bne	r2,zero,1000282c <__alt_data_end+0xf800282c>
100038d0:	d8c02017 	ldw	r3,128(sp)
100038d4:	dc401f17 	ldw	r17,124(sp)
100038d8:	dd800404 	addi	r22,sp,16
100038dc:	003fec06 	br	10003890 <__alt_data_end+0xf8003890>
100038e0:	9080100c 	andi	r2,r18,64
100038e4:	d8002785 	stb	zero,158(sp)
100038e8:	10010e26 	beq	r2,zero,10003d24 <___vfprintf_internal_r+0x1908>
100038ec:	d9402e17 	ldw	r5,184(sp)
100038f0:	d8c02a17 	ldw	r3,168(sp)
100038f4:	002d883a 	mov	r22,zero
100038f8:	28800104 	addi	r2,r5,4
100038fc:	2cc0000b 	ldhu	r19,0(r5)
10003900:	183fc90e 	bge	r3,zero,10003828 <__alt_data_end+0xf8003828>
10003904:	d8802e15 	stw	r2,184(sp)
10003908:	0039883a 	mov	fp,zero
1000390c:	9d84b03a 	or	r2,r19,r22
10003910:	103c1e1e 	bne	r2,zero,1000298c <__alt_data_end+0xf800298c>
10003914:	00800044 	movi	r2,1
10003918:	003e6c06 	br	100032cc <__alt_data_end+0xf80032cc>
1000391c:	d9002d17 	ldw	r4,180(sp)
10003920:	d9801e04 	addi	r6,sp,120
10003924:	b80b883a 	mov	r5,r23
10003928:	0009bfc0 	call	10009bfc <__sprint_r>
1000392c:	103bbf1e 	bne	r2,zero,1000282c <__alt_data_end+0xf800282c>
10003930:	d8c02017 	ldw	r3,128(sp)
10003934:	da000404 	addi	r8,sp,16
10003938:	d9003217 	ldw	r4,200(sp)
1000393c:	d8802617 	ldw	r2,152(sp)
10003940:	d9403317 	ldw	r5,204(sp)
10003944:	8123883a 	add	r17,r16,r4
10003948:	11400216 	blt	r2,r5,10003954 <___vfprintf_internal_r+0x1538>
1000394c:	9100004c 	andi	r4,r18,1
10003950:	20000d26 	beq	r4,zero,10003988 <___vfprintf_internal_r+0x156c>
10003954:	d9003717 	ldw	r4,220(sp)
10003958:	d9403417 	ldw	r5,208(sp)
1000395c:	1907883a 	add	r3,r3,r4
10003960:	d9001f17 	ldw	r4,124(sp)
10003964:	41400015 	stw	r5,0(r8)
10003968:	d9403717 	ldw	r5,220(sp)
1000396c:	21000044 	addi	r4,r4,1
10003970:	d8c02015 	stw	r3,128(sp)
10003974:	41400115 	stw	r5,4(r8)
10003978:	d9001f15 	stw	r4,124(sp)
1000397c:	014001c4 	movi	r5,7
10003980:	2901e816 	blt	r5,r4,10004124 <___vfprintf_internal_r+0x1d08>
10003984:	42000204 	addi	r8,r8,8
10003988:	d9003317 	ldw	r4,204(sp)
1000398c:	8121883a 	add	r16,r16,r4
10003990:	2085c83a 	sub	r2,r4,r2
10003994:	8461c83a 	sub	r16,r16,r17
10003998:	1400010e 	bge	r2,r16,100039a0 <___vfprintf_internal_r+0x1584>
1000399c:	1021883a 	mov	r16,r2
100039a0:	04000a0e 	bge	zero,r16,100039cc <___vfprintf_internal_r+0x15b0>
100039a4:	d9001f17 	ldw	r4,124(sp)
100039a8:	1c07883a 	add	r3,r3,r16
100039ac:	44400015 	stw	r17,0(r8)
100039b0:	21000044 	addi	r4,r4,1
100039b4:	44000115 	stw	r16,4(r8)
100039b8:	d8c02015 	stw	r3,128(sp)
100039bc:	d9001f15 	stw	r4,124(sp)
100039c0:	014001c4 	movi	r5,7
100039c4:	2901fb16 	blt	r5,r4,100041b4 <___vfprintf_internal_r+0x1d98>
100039c8:	42000204 	addi	r8,r8,8
100039cc:	8001f716 	blt	r16,zero,100041ac <___vfprintf_internal_r+0x1d90>
100039d0:	1421c83a 	sub	r16,r2,r16
100039d4:	043d160e 	bge	zero,r16,10002e30 <__alt_data_end+0xf8002e30>
100039d8:	04400404 	movi	r17,16
100039dc:	d8801f17 	ldw	r2,124(sp)
100039e0:	8c3efb0e 	bge	r17,r16,100035d0 <__alt_data_end+0xf80035d0>
100039e4:	01440074 	movhi	r5,4097
100039e8:	29485884 	addi	r5,r5,8546
100039ec:	d9402c15 	stw	r5,176(sp)
100039f0:	058001c4 	movi	r22,7
100039f4:	dcc02d17 	ldw	r19,180(sp)
100039f8:	00000306 	br	10003a08 <___vfprintf_internal_r+0x15ec>
100039fc:	42000204 	addi	r8,r8,8
10003a00:	843ffc04 	addi	r16,r16,-16
10003a04:	8c3ef50e 	bge	r17,r16,100035dc <__alt_data_end+0xf80035dc>
10003a08:	18c00404 	addi	r3,r3,16
10003a0c:	10800044 	addi	r2,r2,1
10003a10:	45000015 	stw	r20,0(r8)
10003a14:	44400115 	stw	r17,4(r8)
10003a18:	d8c02015 	stw	r3,128(sp)
10003a1c:	d8801f15 	stw	r2,124(sp)
10003a20:	b0bff60e 	bge	r22,r2,100039fc <__alt_data_end+0xf80039fc>
10003a24:	d9801e04 	addi	r6,sp,120
10003a28:	b80b883a 	mov	r5,r23
10003a2c:	9809883a 	mov	r4,r19
10003a30:	0009bfc0 	call	10009bfc <__sprint_r>
10003a34:	103b7d1e 	bne	r2,zero,1000282c <__alt_data_end+0xf800282c>
10003a38:	d8c02017 	ldw	r3,128(sp)
10003a3c:	d8801f17 	ldw	r2,124(sp)
10003a40:	da000404 	addi	r8,sp,16
10003a44:	003fee06 	br	10003a00 <__alt_data_end+0xf8003a00>
10003a48:	9088703a 	and	r4,r18,r2
10003a4c:	203eab1e 	bne	r4,zero,100034fc <__alt_data_end+0xf80034fc>
10003a50:	dc401f17 	ldw	r17,124(sp)
10003a54:	40800115 	stw	r2,4(r8)
10003a58:	44000015 	stw	r16,0(r8)
10003a5c:	8c400044 	addi	r17,r17,1
10003a60:	d8c02015 	stw	r3,128(sp)
10003a64:	dc401f15 	stw	r17,124(sp)
10003a68:	008001c4 	movi	r2,7
10003a6c:	14400e16 	blt	r2,r17,10003aa8 <___vfprintf_internal_r+0x168c>
10003a70:	45800204 	addi	r22,r8,8
10003a74:	003eca06 	br	100035a0 <__alt_data_end+0xf80035a0>
10003a78:	01040074 	movhi	r4,4097
10003a7c:	21085884 	addi	r4,r4,8546
10003a80:	d9002c15 	stw	r4,176(sp)
10003a84:	d8802c17 	ldw	r2,176(sp)
10003a88:	1c07883a 	add	r3,r3,r16
10003a8c:	8c400044 	addi	r17,r17,1
10003a90:	b0800015 	stw	r2,0(r22)
10003a94:	b4000115 	stw	r16,4(r22)
10003a98:	d8c02015 	stw	r3,128(sp)
10003a9c:	dc401f15 	stw	r17,124(sp)
10003aa0:	008001c4 	movi	r2,7
10003aa4:	147ebd0e 	bge	r2,r17,1000359c <__alt_data_end+0xf800359c>
10003aa8:	d9002d17 	ldw	r4,180(sp)
10003aac:	d9801e04 	addi	r6,sp,120
10003ab0:	b80b883a 	mov	r5,r23
10003ab4:	0009bfc0 	call	10009bfc <__sprint_r>
10003ab8:	103b5c1e 	bne	r2,zero,1000282c <__alt_data_end+0xf800282c>
10003abc:	d8c02017 	ldw	r3,128(sp)
10003ac0:	dc401f17 	ldw	r17,124(sp)
10003ac4:	dd800404 	addi	r22,sp,16
10003ac8:	003eb506 	br	100035a0 <__alt_data_end+0xf80035a0>
10003acc:	d9002d17 	ldw	r4,180(sp)
10003ad0:	d9801e04 	addi	r6,sp,120
10003ad4:	b80b883a 	mov	r5,r23
10003ad8:	0009bfc0 	call	10009bfc <__sprint_r>
10003adc:	103b531e 	bne	r2,zero,1000282c <__alt_data_end+0xf800282c>
10003ae0:	d8c02017 	ldw	r3,128(sp)
10003ae4:	dc401f17 	ldw	r17,124(sp)
10003ae8:	da000404 	addi	r8,sp,16
10003aec:	003e8d06 	br	10003524 <__alt_data_end+0xf8003524>
10003af0:	d9002d17 	ldw	r4,180(sp)
10003af4:	d9801e04 	addi	r6,sp,120
10003af8:	b80b883a 	mov	r5,r23
10003afc:	0009bfc0 	call	10009bfc <__sprint_r>
10003b00:	103b4a1e 	bne	r2,zero,1000282c <__alt_data_end+0xf800282c>
10003b04:	d8c02017 	ldw	r3,128(sp)
10003b08:	dc401f17 	ldw	r17,124(sp)
10003b0c:	dd800404 	addi	r22,sp,16
10003b10:	003e8f06 	br	10003550 <__alt_data_end+0xf8003550>
10003b14:	0027883a 	mov	r19,zero
10003b18:	003f4a06 	br	10003844 <__alt_data_end+0xf8003844>
10003b1c:	d9002d17 	ldw	r4,180(sp)
10003b20:	d9801e04 	addi	r6,sp,120
10003b24:	b80b883a 	mov	r5,r23
10003b28:	0009bfc0 	call	10009bfc <__sprint_r>
10003b2c:	103b3f1e 	bne	r2,zero,1000282c <__alt_data_end+0xf800282c>
10003b30:	d8c02017 	ldw	r3,128(sp)
10003b34:	da000404 	addi	r8,sp,16
10003b38:	003c7b06 	br	10002d28 <__alt_data_end+0xf8002d28>
10003b3c:	d9402a17 	ldw	r5,168(sp)
10003b40:	04e7c83a 	sub	r19,zero,r19
10003b44:	07000b44 	movi	fp,45
10003b48:	9804c03a 	cmpne	r2,r19,zero
10003b4c:	05adc83a 	sub	r22,zero,r22
10003b50:	df002785 	stb	fp,158(sp)
10003b54:	b0adc83a 	sub	r22,r22,r2
10003b58:	28017b16 	blt	r5,zero,10004148 <___vfprintf_internal_r+0x1d2c>
10003b5c:	00bfdfc4 	movi	r2,-129
10003b60:	90a4703a 	and	r18,r18,r2
10003b64:	003b8906 	br	1000298c <__alt_data_end+0xf800298c>
10003b68:	d9003617 	ldw	r4,216(sp)
10003b6c:	d9403817 	ldw	r5,224(sp)
10003b70:	da003d15 	stw	r8,244(sp)
10003b74:	00098200 	call	10009820 <__fpclassifyd>
10003b78:	da003d17 	ldw	r8,244(sp)
10003b7c:	1000f026 	beq	r2,zero,10003f40 <___vfprintf_internal_r+0x1b24>
10003b80:	d9002a17 	ldw	r4,168(sp)
10003b84:	05bff7c4 	movi	r22,-33
10003b88:	00bfffc4 	movi	r2,-1
10003b8c:	8dac703a 	and	r22,r17,r22
10003b90:	20820026 	beq	r4,r2,10004394 <___vfprintf_internal_r+0x1f78>
10003b94:	008011c4 	movi	r2,71
10003b98:	b081f726 	beq	r22,r2,10004378 <___vfprintf_internal_r+0x1f5c>
10003b9c:	d9003817 	ldw	r4,224(sp)
10003ba0:	90c04014 	ori	r3,r18,256
10003ba4:	d8c02c15 	stw	r3,176(sp)
10003ba8:	20021516 	blt	r4,zero,10004400 <___vfprintf_internal_r+0x1fe4>
10003bac:	dcc03817 	ldw	r19,224(sp)
10003bb0:	d8002905 	stb	zero,164(sp)
10003bb4:	00801984 	movi	r2,102
10003bb8:	8881f926 	beq	r17,r2,100043a0 <___vfprintf_internal_r+0x1f84>
10003bbc:	00801184 	movi	r2,70
10003bc0:	88821c26 	beq	r17,r2,10004434 <___vfprintf_internal_r+0x2018>
10003bc4:	00801144 	movi	r2,69
10003bc8:	b081ef26 	beq	r22,r2,10004388 <___vfprintf_internal_r+0x1f6c>
10003bcc:	d8c02a17 	ldw	r3,168(sp)
10003bd0:	d8802104 	addi	r2,sp,132
10003bd4:	d8800315 	stw	r2,12(sp)
10003bd8:	d9403617 	ldw	r5,216(sp)
10003bdc:	d8802504 	addi	r2,sp,148
10003be0:	d9002d17 	ldw	r4,180(sp)
10003be4:	d8800215 	stw	r2,8(sp)
10003be8:	d8802604 	addi	r2,sp,152
10003bec:	d8c00015 	stw	r3,0(sp)
10003bf0:	d8800115 	stw	r2,4(sp)
10003bf4:	01c00084 	movi	r7,2
10003bf8:	980d883a 	mov	r6,r19
10003bfc:	d8c03c15 	stw	r3,240(sp)
10003c00:	da003d15 	stw	r8,244(sp)
10003c04:	0004b4c0 	call	10004b4c <_dtoa_r>
10003c08:	1021883a 	mov	r16,r2
10003c0c:	008019c4 	movi	r2,103
10003c10:	d8c03c17 	ldw	r3,240(sp)
10003c14:	da003d17 	ldw	r8,244(sp)
10003c18:	88817126 	beq	r17,r2,100041e0 <___vfprintf_internal_r+0x1dc4>
10003c1c:	008011c4 	movi	r2,71
10003c20:	88829126 	beq	r17,r2,10004668 <___vfprintf_internal_r+0x224c>
10003c24:	80f9883a 	add	fp,r16,r3
10003c28:	d9003617 	ldw	r4,216(sp)
10003c2c:	000d883a 	mov	r6,zero
10003c30:	000f883a 	mov	r7,zero
10003c34:	980b883a 	mov	r5,r19
10003c38:	da003d15 	stw	r8,244(sp)
10003c3c:	000db5c0 	call	1000db5c <__eqdf2>
10003c40:	da003d17 	ldw	r8,244(sp)
10003c44:	10018d26 	beq	r2,zero,1000427c <___vfprintf_internal_r+0x1e60>
10003c48:	d8802117 	ldw	r2,132(sp)
10003c4c:	1700062e 	bgeu	r2,fp,10003c68 <___vfprintf_internal_r+0x184c>
10003c50:	01000c04 	movi	r4,48
10003c54:	10c00044 	addi	r3,r2,1
10003c58:	d8c02115 	stw	r3,132(sp)
10003c5c:	11000005 	stb	r4,0(r2)
10003c60:	d8802117 	ldw	r2,132(sp)
10003c64:	173ffb36 	bltu	r2,fp,10003c54 <__alt_data_end+0xf8003c54>
10003c68:	1405c83a 	sub	r2,r2,r16
10003c6c:	d8803315 	stw	r2,204(sp)
10003c70:	008011c4 	movi	r2,71
10003c74:	b0817626 	beq	r22,r2,10004250 <___vfprintf_internal_r+0x1e34>
10003c78:	00801944 	movi	r2,101
10003c7c:	1442800e 	bge	r2,r17,10004680 <___vfprintf_internal_r+0x2264>
10003c80:	d8c02617 	ldw	r3,152(sp)
10003c84:	00801984 	movi	r2,102
10003c88:	d8c03215 	stw	r3,200(sp)
10003c8c:	8881fe26 	beq	r17,r2,10004488 <___vfprintf_internal_r+0x206c>
10003c90:	d8c03217 	ldw	r3,200(sp)
10003c94:	d9003317 	ldw	r4,204(sp)
10003c98:	1901dd16 	blt	r3,r4,10004410 <___vfprintf_internal_r+0x1ff4>
10003c9c:	9480004c 	andi	r18,r18,1
10003ca0:	90022b1e 	bne	r18,zero,10004550 <___vfprintf_internal_r+0x2134>
10003ca4:	1805883a 	mov	r2,r3
10003ca8:	18028316 	blt	r3,zero,100046b8 <___vfprintf_internal_r+0x229c>
10003cac:	d8c03217 	ldw	r3,200(sp)
10003cb0:	044019c4 	movi	r17,103
10003cb4:	d8c02b15 	stw	r3,172(sp)
10003cb8:	df002907 	ldb	fp,164(sp)
10003cbc:	e001531e 	bne	fp,zero,1000420c <___vfprintf_internal_r+0x1df0>
10003cc0:	df002783 	ldbu	fp,158(sp)
10003cc4:	d8802915 	stw	r2,164(sp)
10003cc8:	dc802c17 	ldw	r18,176(sp)
10003ccc:	d8002a15 	stw	zero,168(sp)
10003cd0:	003baf06 	br	10002b90 <__alt_data_end+0xf8002b90>
10003cd4:	d8c02e17 	ldw	r3,184(sp)
10003cd8:	d9002e17 	ldw	r4,184(sp)
10003cdc:	d9402e17 	ldw	r5,184(sp)
10003ce0:	18c00017 	ldw	r3,0(r3)
10003ce4:	21000117 	ldw	r4,4(r4)
10003ce8:	29400204 	addi	r5,r5,8
10003cec:	d8c03615 	stw	r3,216(sp)
10003cf0:	d9003815 	stw	r4,224(sp)
10003cf4:	d9402e15 	stw	r5,184(sp)
10003cf8:	003b5006 	br	10002a3c <__alt_data_end+0xf8002a3c>
10003cfc:	ac400007 	ldb	r17,0(r21)
10003d00:	003a2806 	br	100025a4 <__alt_data_end+0xf80025a4>
10003d04:	9080100c 	andi	r2,r18,64
10003d08:	1000a826 	beq	r2,zero,10003fac <___vfprintf_internal_r+0x1b90>
10003d0c:	d8c02e17 	ldw	r3,184(sp)
10003d10:	002d883a 	mov	r22,zero
10003d14:	1cc0000b 	ldhu	r19,0(r3)
10003d18:	18c00104 	addi	r3,r3,4
10003d1c:	d8c02e15 	stw	r3,184(sp)
10003d20:	003caf06 	br	10002fe0 <__alt_data_end+0xf8002fe0>
10003d24:	d9002e17 	ldw	r4,184(sp)
10003d28:	d9402a17 	ldw	r5,168(sp)
10003d2c:	002d883a 	mov	r22,zero
10003d30:	20800104 	addi	r2,r4,4
10003d34:	24c00017 	ldw	r19,0(r4)
10003d38:	283ebb0e 	bge	r5,zero,10003828 <__alt_data_end+0xf8003828>
10003d3c:	003ef106 	br	10003904 <__alt_data_end+0xf8003904>
10003d40:	9080040c 	andi	r2,r18,16
10003d44:	1000921e 	bne	r2,zero,10003f90 <___vfprintf_internal_r+0x1b74>
10003d48:	9480100c 	andi	r18,r18,64
10003d4c:	90013926 	beq	r18,zero,10004234 <___vfprintf_internal_r+0x1e18>
10003d50:	d9402e17 	ldw	r5,184(sp)
10003d54:	d8c02f17 	ldw	r3,188(sp)
10003d58:	28800017 	ldw	r2,0(r5)
10003d5c:	29400104 	addi	r5,r5,4
10003d60:	d9402e15 	stw	r5,184(sp)
10003d64:	10c0000d 	sth	r3,0(r2)
10003d68:	0039e406 	br	100024fc <__alt_data_end+0xf80024fc>
10003d6c:	9080100c 	andi	r2,r18,64
10003d70:	10008026 	beq	r2,zero,10003f74 <___vfprintf_internal_r+0x1b58>
10003d74:	d8802e17 	ldw	r2,184(sp)
10003d78:	14c0000f 	ldh	r19,0(r2)
10003d7c:	10800104 	addi	r2,r2,4
10003d80:	d8802e15 	stw	r2,184(sp)
10003d84:	982dd7fa 	srai	r22,r19,31
10003d88:	b005883a 	mov	r2,r22
10003d8c:	003af706 	br	1000296c <__alt_data_end+0xf800296c>
10003d90:	9080100c 	andi	r2,r18,64
10003d94:	d8002785 	stb	zero,158(sp)
10003d98:	10008a1e 	bne	r2,zero,10003fc4 <___vfprintf_internal_r+0x1ba8>
10003d9c:	d9002e17 	ldw	r4,184(sp)
10003da0:	d9402a17 	ldw	r5,168(sp)
10003da4:	002d883a 	mov	r22,zero
10003da8:	20800104 	addi	r2,r4,4
10003dac:	24c00017 	ldw	r19,0(r4)
10003db0:	283e4b0e 	bge	r5,zero,100036e0 <__alt_data_end+0xf80036e0>
10003db4:	9d86b03a 	or	r3,r19,r22
10003db8:	d8802e15 	stw	r2,184(sp)
10003dbc:	183e4c1e 	bne	r3,zero,100036f0 <__alt_data_end+0xf80036f0>
10003dc0:	0039883a 	mov	fp,zero
10003dc4:	0005883a 	mov	r2,zero
10003dc8:	003d4006 	br	100032cc <__alt_data_end+0xf80032cc>
10003dcc:	01440074 	movhi	r5,4097
10003dd0:	29485884 	addi	r5,r5,8546
10003dd4:	d9402c15 	stw	r5,176(sp)
10003dd8:	d9402c17 	ldw	r5,176(sp)
10003ddc:	1c47883a 	add	r3,r3,r17
10003de0:	10800044 	addi	r2,r2,1
10003de4:	41400015 	stw	r5,0(r8)
10003de8:	44400115 	stw	r17,4(r8)
10003dec:	d8c02015 	stw	r3,128(sp)
10003df0:	d8801f15 	stw	r2,124(sp)
10003df4:	010001c4 	movi	r4,7
10003df8:	20bec816 	blt	r4,r2,1000391c <__alt_data_end+0xf800391c>
10003dfc:	42000204 	addi	r8,r8,8
10003e00:	003ecd06 	br	10003938 <__alt_data_end+0xf8003938>
10003e04:	d9002a17 	ldw	r4,168(sp)
10003e08:	d8002785 	stb	zero,158(sp)
10003e0c:	203d2d16 	blt	r4,zero,100032c4 <__alt_data_end+0xf80032c4>
10003e10:	00bfdfc4 	movi	r2,-129
10003e14:	90a4703a 	and	r18,r18,r2
10003e18:	003a6106 	br	100027a0 <__alt_data_end+0xf80027a0>
10003e1c:	01040074 	movhi	r4,4097
10003e20:	21085884 	addi	r4,r4,8546
10003e24:	d9002c15 	stw	r4,176(sp)
10003e28:	003bea06 	br	10002dd4 <__alt_data_end+0xf8002dd4>
10003e2c:	d9002d17 	ldw	r4,180(sp)
10003e30:	d9801e04 	addi	r6,sp,120
10003e34:	b80b883a 	mov	r5,r23
10003e38:	0009bfc0 	call	10009bfc <__sprint_r>
10003e3c:	103a7b1e 	bne	r2,zero,1000282c <__alt_data_end+0xf800282c>
10003e40:	d8c02017 	ldw	r3,128(sp)
10003e44:	da000404 	addi	r8,sp,16
10003e48:	003d4106 	br	10003350 <__alt_data_end+0xf8003350>
10003e4c:	d8801f17 	ldw	r2,124(sp)
10003e50:	01440074 	movhi	r5,4097
10003e54:	01000044 	movi	r4,1
10003e58:	18c00044 	addi	r3,r3,1
10003e5c:	10800044 	addi	r2,r2,1
10003e60:	29485804 	addi	r5,r5,8544
10003e64:	41000115 	stw	r4,4(r8)
10003e68:	41400015 	stw	r5,0(r8)
10003e6c:	d8c02015 	stw	r3,128(sp)
10003e70:	d8801f15 	stw	r2,124(sp)
10003e74:	010001c4 	movi	r4,7
10003e78:	20805c16 	blt	r4,r2,10003fec <___vfprintf_internal_r+0x1bd0>
10003e7c:	42000204 	addi	r8,r8,8
10003e80:	8800041e 	bne	r17,zero,10003e94 <___vfprintf_internal_r+0x1a78>
10003e84:	d8803317 	ldw	r2,204(sp)
10003e88:	1000021e 	bne	r2,zero,10003e94 <___vfprintf_internal_r+0x1a78>
10003e8c:	9080004c 	andi	r2,r18,1
10003e90:	103be726 	beq	r2,zero,10002e30 <__alt_data_end+0xf8002e30>
10003e94:	d9003717 	ldw	r4,220(sp)
10003e98:	d8801f17 	ldw	r2,124(sp)
10003e9c:	d9403417 	ldw	r5,208(sp)
10003ea0:	20c7883a 	add	r3,r4,r3
10003ea4:	10800044 	addi	r2,r2,1
10003ea8:	41000115 	stw	r4,4(r8)
10003eac:	41400015 	stw	r5,0(r8)
10003eb0:	d8c02015 	stw	r3,128(sp)
10003eb4:	d8801f15 	stw	r2,124(sp)
10003eb8:	010001c4 	movi	r4,7
10003ebc:	20812116 	blt	r4,r2,10004344 <___vfprintf_internal_r+0x1f28>
10003ec0:	42000204 	addi	r8,r8,8
10003ec4:	0463c83a 	sub	r17,zero,r17
10003ec8:	0440730e 	bge	zero,r17,10004098 <___vfprintf_internal_r+0x1c7c>
10003ecc:	05800404 	movi	r22,16
10003ed0:	b440860e 	bge	r22,r17,100040ec <___vfprintf_internal_r+0x1cd0>
10003ed4:	01440074 	movhi	r5,4097
10003ed8:	29485884 	addi	r5,r5,8546
10003edc:	d9402c15 	stw	r5,176(sp)
10003ee0:	070001c4 	movi	fp,7
10003ee4:	dcc02d17 	ldw	r19,180(sp)
10003ee8:	00000306 	br	10003ef8 <___vfprintf_internal_r+0x1adc>
10003eec:	42000204 	addi	r8,r8,8
10003ef0:	8c7ffc04 	addi	r17,r17,-16
10003ef4:	b440800e 	bge	r22,r17,100040f8 <___vfprintf_internal_r+0x1cdc>
10003ef8:	18c00404 	addi	r3,r3,16
10003efc:	10800044 	addi	r2,r2,1
10003f00:	45000015 	stw	r20,0(r8)
10003f04:	45800115 	stw	r22,4(r8)
10003f08:	d8c02015 	stw	r3,128(sp)
10003f0c:	d8801f15 	stw	r2,124(sp)
10003f10:	e0bff60e 	bge	fp,r2,10003eec <__alt_data_end+0xf8003eec>
10003f14:	d9801e04 	addi	r6,sp,120
10003f18:	b80b883a 	mov	r5,r23
10003f1c:	9809883a 	mov	r4,r19
10003f20:	0009bfc0 	call	10009bfc <__sprint_r>
10003f24:	103a411e 	bne	r2,zero,1000282c <__alt_data_end+0xf800282c>
10003f28:	d8c02017 	ldw	r3,128(sp)
10003f2c:	d8801f17 	ldw	r2,124(sp)
10003f30:	da000404 	addi	r8,sp,16
10003f34:	003fee06 	br	10003ef0 <__alt_data_end+0xf8003ef0>
10003f38:	00bfffc4 	movi	r2,-1
10003f3c:	003a3f06 	br	1000283c <__alt_data_end+0xf800283c>
10003f40:	008011c4 	movi	r2,71
10003f44:	1440b816 	blt	r2,r17,10004228 <___vfprintf_internal_r+0x1e0c>
10003f48:	04040074 	movhi	r16,4097
10003f4c:	84084a04 	addi	r16,r16,8488
10003f50:	00c000c4 	movi	r3,3
10003f54:	00bfdfc4 	movi	r2,-129
10003f58:	d8c02915 	stw	r3,164(sp)
10003f5c:	90a4703a 	and	r18,r18,r2
10003f60:	df002783 	ldbu	fp,158(sp)
10003f64:	d8c02b15 	stw	r3,172(sp)
10003f68:	d8002a15 	stw	zero,168(sp)
10003f6c:	d8003215 	stw	zero,200(sp)
10003f70:	003b0706 	br	10002b90 <__alt_data_end+0xf8002b90>
10003f74:	d8c02e17 	ldw	r3,184(sp)
10003f78:	1cc00017 	ldw	r19,0(r3)
10003f7c:	18c00104 	addi	r3,r3,4
10003f80:	d8c02e15 	stw	r3,184(sp)
10003f84:	982dd7fa 	srai	r22,r19,31
10003f88:	b005883a 	mov	r2,r22
10003f8c:	003a7706 	br	1000296c <__alt_data_end+0xf800296c>
10003f90:	d8c02e17 	ldw	r3,184(sp)
10003f94:	d9002f17 	ldw	r4,188(sp)
10003f98:	18800017 	ldw	r2,0(r3)
10003f9c:	18c00104 	addi	r3,r3,4
10003fa0:	d8c02e15 	stw	r3,184(sp)
10003fa4:	11000015 	stw	r4,0(r2)
10003fa8:	00395406 	br	100024fc <__alt_data_end+0xf80024fc>
10003fac:	d9002e17 	ldw	r4,184(sp)
10003fb0:	002d883a 	mov	r22,zero
10003fb4:	24c00017 	ldw	r19,0(r4)
10003fb8:	21000104 	addi	r4,r4,4
10003fbc:	d9002e15 	stw	r4,184(sp)
10003fc0:	003c0706 	br	10002fe0 <__alt_data_end+0xf8002fe0>
10003fc4:	d9402e17 	ldw	r5,184(sp)
10003fc8:	d8c02a17 	ldw	r3,168(sp)
10003fcc:	002d883a 	mov	r22,zero
10003fd0:	28800104 	addi	r2,r5,4
10003fd4:	2cc0000b 	ldhu	r19,0(r5)
10003fd8:	183dc10e 	bge	r3,zero,100036e0 <__alt_data_end+0xf80036e0>
10003fdc:	003f7506 	br	10003db4 <__alt_data_end+0xf8003db4>
10003fe0:	04040074 	movhi	r16,4097
10003fe4:	84084804 	addi	r16,r16,8480
10003fe8:	003aa706 	br	10002a88 <__alt_data_end+0xf8002a88>
10003fec:	d9002d17 	ldw	r4,180(sp)
10003ff0:	d9801e04 	addi	r6,sp,120
10003ff4:	b80b883a 	mov	r5,r23
10003ff8:	0009bfc0 	call	10009bfc <__sprint_r>
10003ffc:	103a0b1e 	bne	r2,zero,1000282c <__alt_data_end+0xf800282c>
10004000:	dc402617 	ldw	r17,152(sp)
10004004:	d8c02017 	ldw	r3,128(sp)
10004008:	da000404 	addi	r8,sp,16
1000400c:	003f9c06 	br	10003e80 <__alt_data_end+0xf8003e80>
10004010:	ac400043 	ldbu	r17,1(r21)
10004014:	84000814 	ori	r16,r16,32
10004018:	ad400044 	addi	r21,r21,1
1000401c:	8c403fcc 	andi	r17,r17,255
10004020:	8c40201c 	xori	r17,r17,128
10004024:	8c7fe004 	addi	r17,r17,-128
10004028:	00395e06 	br	100025a4 <__alt_data_end+0xf80025a4>
1000402c:	d8c02e15 	stw	r3,184(sp)
10004030:	0039883a 	mov	fp,zero
10004034:	003e3506 	br	1000390c <__alt_data_end+0xf800390c>
10004038:	d9002d17 	ldw	r4,180(sp)
1000403c:	d9801e04 	addi	r6,sp,120
10004040:	b80b883a 	mov	r5,r23
10004044:	0009bfc0 	call	10009bfc <__sprint_r>
10004048:	1039f81e 	bne	r2,zero,1000282c <__alt_data_end+0xf800282c>
1000404c:	d8c02017 	ldw	r3,128(sp)
10004050:	da000404 	addi	r8,sp,16
10004054:	003cd006 	br	10003398 <__alt_data_end+0xf8003398>
10004058:	8009883a 	mov	r4,r16
1000405c:	df003d15 	stw	fp,244(sp)
10004060:	00023840 	call	10002384 <strlen>
10004064:	d8802b15 	stw	r2,172(sp)
10004068:	da003d17 	ldw	r8,244(sp)
1000406c:	103c200e 	bge	r2,zero,100030f0 <__alt_data_end+0xf80030f0>
10004070:	0005883a 	mov	r2,zero
10004074:	003c1e06 	br	100030f0 <__alt_data_end+0xf80030f0>
10004078:	d9002d17 	ldw	r4,180(sp)
1000407c:	d9801e04 	addi	r6,sp,120
10004080:	b80b883a 	mov	r5,r23
10004084:	0009bfc0 	call	10009bfc <__sprint_r>
10004088:	1039e81e 	bne	r2,zero,1000282c <__alt_data_end+0xf800282c>
1000408c:	d8c02017 	ldw	r3,128(sp)
10004090:	d8801f17 	ldw	r2,124(sp)
10004094:	da000404 	addi	r8,sp,16
10004098:	d9403317 	ldw	r5,204(sp)
1000409c:	10800044 	addi	r2,r2,1
100040a0:	44000015 	stw	r16,0(r8)
100040a4:	28c7883a 	add	r3,r5,r3
100040a8:	003b5b06 	br	10002e18 <__alt_data_end+0xf8002e18>
100040ac:	01040074 	movhi	r4,4097
100040b0:	21085c84 	addi	r4,r4,8562
100040b4:	d9003515 	stw	r4,212(sp)
100040b8:	003af206 	br	10002c84 <__alt_data_end+0xf8002c84>
100040bc:	013fffc4 	movi	r4,-1
100040c0:	003a0806 	br	100028e4 <__alt_data_end+0xf80028e4>
100040c4:	0023883a 	mov	r17,zero
100040c8:	003d9d06 	br	10003740 <__alt_data_end+0xf8003740>
100040cc:	d9002d17 	ldw	r4,180(sp)
100040d0:	d9801e04 	addi	r6,sp,120
100040d4:	b80b883a 	mov	r5,r23
100040d8:	0009bfc0 	call	10009bfc <__sprint_r>
100040dc:	1039d31e 	bne	r2,zero,1000282c <__alt_data_end+0xf800282c>
100040e0:	d8c02017 	ldw	r3,128(sp)
100040e4:	da000404 	addi	r8,sp,16
100040e8:	003d9406 	br	1000373c <__alt_data_end+0xf800373c>
100040ec:	01040074 	movhi	r4,4097
100040f0:	21085884 	addi	r4,r4,8546
100040f4:	d9002c15 	stw	r4,176(sp)
100040f8:	d9002c17 	ldw	r4,176(sp)
100040fc:	1c47883a 	add	r3,r3,r17
10004100:	10800044 	addi	r2,r2,1
10004104:	41000015 	stw	r4,0(r8)
10004108:	44400115 	stw	r17,4(r8)
1000410c:	d8c02015 	stw	r3,128(sp)
10004110:	d8801f15 	stw	r2,124(sp)
10004114:	010001c4 	movi	r4,7
10004118:	20bfd716 	blt	r4,r2,10004078 <__alt_data_end+0xf8004078>
1000411c:	42000204 	addi	r8,r8,8
10004120:	003fdd06 	br	10004098 <__alt_data_end+0xf8004098>
10004124:	d9002d17 	ldw	r4,180(sp)
10004128:	d9801e04 	addi	r6,sp,120
1000412c:	b80b883a 	mov	r5,r23
10004130:	0009bfc0 	call	10009bfc <__sprint_r>
10004134:	1039bd1e 	bne	r2,zero,1000282c <__alt_data_end+0xf800282c>
10004138:	d8802617 	ldw	r2,152(sp)
1000413c:	d8c02017 	ldw	r3,128(sp)
10004140:	da000404 	addi	r8,sp,16
10004144:	003e1006 	br	10003988 <__alt_data_end+0xf8003988>
10004148:	00800044 	movi	r2,1
1000414c:	10803fcc 	andi	r2,r2,255
10004150:	00c00044 	movi	r3,1
10004154:	10fa0d26 	beq	r2,r3,1000298c <__alt_data_end+0xf800298c>
10004158:	00c00084 	movi	r3,2
1000415c:	10fbaf26 	beq	r2,r3,1000301c <__alt_data_end+0xf800301c>
10004160:	003a6d06 	br	10002b18 <__alt_data_end+0xf8002b18>
10004164:	01040074 	movhi	r4,4097
10004168:	21085c84 	addi	r4,r4,8562
1000416c:	d9003515 	stw	r4,212(sp)
10004170:	003b5406 	br	10002ec4 <__alt_data_end+0xf8002ec4>
10004174:	d8802a17 	ldw	r2,168(sp)
10004178:	00c00184 	movi	r3,6
1000417c:	1880012e 	bgeu	r3,r2,10004184 <___vfprintf_internal_r+0x1d68>
10004180:	1805883a 	mov	r2,r3
10004184:	d8802b15 	stw	r2,172(sp)
10004188:	1000ef16 	blt	r2,zero,10004548 <___vfprintf_internal_r+0x212c>
1000418c:	04040074 	movhi	r16,4097
10004190:	d8802915 	stw	r2,164(sp)
10004194:	dcc02e15 	stw	r19,184(sp)
10004198:	d8002a15 	stw	zero,168(sp)
1000419c:	d8003215 	stw	zero,200(sp)
100041a0:	84085604 	addi	r16,r16,8536
100041a4:	0039883a 	mov	fp,zero
100041a8:	003a8006 	br	10002bac <__alt_data_end+0xf8002bac>
100041ac:	0021883a 	mov	r16,zero
100041b0:	003e0706 	br	100039d0 <__alt_data_end+0xf80039d0>
100041b4:	d9002d17 	ldw	r4,180(sp)
100041b8:	d9801e04 	addi	r6,sp,120
100041bc:	b80b883a 	mov	r5,r23
100041c0:	0009bfc0 	call	10009bfc <__sprint_r>
100041c4:	1039991e 	bne	r2,zero,1000282c <__alt_data_end+0xf800282c>
100041c8:	d8802617 	ldw	r2,152(sp)
100041cc:	d9403317 	ldw	r5,204(sp)
100041d0:	d8c02017 	ldw	r3,128(sp)
100041d4:	da000404 	addi	r8,sp,16
100041d8:	2885c83a 	sub	r2,r5,r2
100041dc:	003dfb06 	br	100039cc <__alt_data_end+0xf80039cc>
100041e0:	9080004c 	andi	r2,r18,1
100041e4:	103e8f1e 	bne	r2,zero,10003c24 <__alt_data_end+0xf8003c24>
100041e8:	d8802117 	ldw	r2,132(sp)
100041ec:	003e9e06 	br	10003c68 <__alt_data_end+0xf8003c68>
100041f0:	1025883a 	mov	r18,r2
100041f4:	0039883a 	mov	fp,zero
100041f8:	00800084 	movi	r2,2
100041fc:	003fd306 	br	1000414c <__alt_data_end+0xf800414c>
10004200:	07000b44 	movi	fp,45
10004204:	df002785 	stb	fp,158(sp)
10004208:	003a1b06 	br	10002a78 <__alt_data_end+0xf8002a78>
1000420c:	00c00b44 	movi	r3,45
10004210:	d8c02785 	stb	r3,158(sp)
10004214:	d8802915 	stw	r2,164(sp)
10004218:	dc802c17 	ldw	r18,176(sp)
1000421c:	d8002a15 	stw	zero,168(sp)
10004220:	07000b44 	movi	fp,45
10004224:	003a5e06 	br	10002ba0 <__alt_data_end+0xf8002ba0>
10004228:	04040074 	movhi	r16,4097
1000422c:	84084b04 	addi	r16,r16,8492
10004230:	003f4706 	br	10003f50 <__alt_data_end+0xf8003f50>
10004234:	d9002e17 	ldw	r4,184(sp)
10004238:	d9402f17 	ldw	r5,188(sp)
1000423c:	20800017 	ldw	r2,0(r4)
10004240:	21000104 	addi	r4,r4,4
10004244:	d9002e15 	stw	r4,184(sp)
10004248:	11400015 	stw	r5,0(r2)
1000424c:	0038ab06 	br	100024fc <__alt_data_end+0xf80024fc>
10004250:	dd802617 	ldw	r22,152(sp)
10004254:	00bfff44 	movi	r2,-3
10004258:	b0801c16 	blt	r22,r2,100042cc <___vfprintf_internal_r+0x1eb0>
1000425c:	d9402a17 	ldw	r5,168(sp)
10004260:	2d801a16 	blt	r5,r22,100042cc <___vfprintf_internal_r+0x1eb0>
10004264:	dd803215 	stw	r22,200(sp)
10004268:	003e8906 	br	10003c90 <__alt_data_end+0xf8003c90>
1000426c:	01040074 	movhi	r4,4097
10004270:	21085884 	addi	r4,r4,8546
10004274:	d9002c15 	stw	r4,176(sp)
10004278:	003c9106 	br	100034c0 <__alt_data_end+0xf80034c0>
1000427c:	e005883a 	mov	r2,fp
10004280:	003e7906 	br	10003c68 <__alt_data_end+0xf8003c68>
10004284:	d9002a17 	ldw	r4,168(sp)
10004288:	df002783 	ldbu	fp,158(sp)
1000428c:	dcc02e15 	stw	r19,184(sp)
10004290:	d9002915 	stw	r4,164(sp)
10004294:	d9002b15 	stw	r4,172(sp)
10004298:	d8002a15 	stw	zero,168(sp)
1000429c:	d8003215 	stw	zero,200(sp)
100042a0:	003a3b06 	br	10002b90 <__alt_data_end+0xf8002b90>
100042a4:	9080004c 	andi	r2,r18,1
100042a8:	0039883a 	mov	fp,zero
100042ac:	10000426 	beq	r2,zero,100042c0 <___vfprintf_internal_r+0x1ea4>
100042b0:	00800c04 	movi	r2,48
100042b4:	dc001dc4 	addi	r16,sp,119
100042b8:	d8801dc5 	stb	r2,119(sp)
100042bc:	003b6406 	br	10003050 <__alt_data_end+0xf8003050>
100042c0:	d8002b15 	stw	zero,172(sp)
100042c4:	dc001e04 	addi	r16,sp,120
100042c8:	003a2b06 	br	10002b78 <__alt_data_end+0xf8002b78>
100042cc:	8c7fff84 	addi	r17,r17,-2
100042d0:	b5bfffc4 	addi	r22,r22,-1
100042d4:	dd802615 	stw	r22,152(sp)
100042d8:	dc4022c5 	stb	r17,139(sp)
100042dc:	b000bf16 	blt	r22,zero,100045dc <___vfprintf_internal_r+0x21c0>
100042e0:	00800ac4 	movi	r2,43
100042e4:	d8802305 	stb	r2,140(sp)
100042e8:	00800244 	movi	r2,9
100042ec:	15807016 	blt	r2,r22,100044b0 <___vfprintf_internal_r+0x2094>
100042f0:	00800c04 	movi	r2,48
100042f4:	b5800c04 	addi	r22,r22,48
100042f8:	d8802345 	stb	r2,141(sp)
100042fc:	dd802385 	stb	r22,142(sp)
10004300:	d88023c4 	addi	r2,sp,143
10004304:	df0022c4 	addi	fp,sp,139
10004308:	d8c03317 	ldw	r3,204(sp)
1000430c:	1739c83a 	sub	fp,r2,fp
10004310:	d9003317 	ldw	r4,204(sp)
10004314:	e0c7883a 	add	r3,fp,r3
10004318:	df003a15 	stw	fp,232(sp)
1000431c:	d8c02b15 	stw	r3,172(sp)
10004320:	00800044 	movi	r2,1
10004324:	1100b30e 	bge	r2,r4,100045f4 <___vfprintf_internal_r+0x21d8>
10004328:	d8c02b17 	ldw	r3,172(sp)
1000432c:	18c00044 	addi	r3,r3,1
10004330:	d8c02b15 	stw	r3,172(sp)
10004334:	1805883a 	mov	r2,r3
10004338:	1800ac16 	blt	r3,zero,100045ec <___vfprintf_internal_r+0x21d0>
1000433c:	d8003215 	stw	zero,200(sp)
10004340:	003e5d06 	br	10003cb8 <__alt_data_end+0xf8003cb8>
10004344:	d9002d17 	ldw	r4,180(sp)
10004348:	d9801e04 	addi	r6,sp,120
1000434c:	b80b883a 	mov	r5,r23
10004350:	0009bfc0 	call	10009bfc <__sprint_r>
10004354:	1039351e 	bne	r2,zero,1000282c <__alt_data_end+0xf800282c>
10004358:	dc402617 	ldw	r17,152(sp)
1000435c:	d8c02017 	ldw	r3,128(sp)
10004360:	d8801f17 	ldw	r2,124(sp)
10004364:	da000404 	addi	r8,sp,16
10004368:	003ed606 	br	10003ec4 <__alt_data_end+0xf8003ec4>
1000436c:	182b883a 	mov	r21,r3
10004370:	d8002a15 	stw	zero,168(sp)
10004374:	00388c06 	br	100025a8 <__alt_data_end+0xf80025a8>
10004378:	d8802a17 	ldw	r2,168(sp)
1000437c:	103e071e 	bne	r2,zero,10003b9c <__alt_data_end+0xf8003b9c>
10004380:	dc002a15 	stw	r16,168(sp)
10004384:	003e0506 	br	10003b9c <__alt_data_end+0xf8003b9c>
10004388:	d9002a17 	ldw	r4,168(sp)
1000438c:	20c00044 	addi	r3,r4,1
10004390:	003e0f06 	br	10003bd0 <__alt_data_end+0xf8003bd0>
10004394:	01400184 	movi	r5,6
10004398:	d9402a15 	stw	r5,168(sp)
1000439c:	003dff06 	br	10003b9c <__alt_data_end+0xf8003b9c>
100043a0:	d8802104 	addi	r2,sp,132
100043a4:	d8800315 	stw	r2,12(sp)
100043a8:	d8802504 	addi	r2,sp,148
100043ac:	d8800215 	stw	r2,8(sp)
100043b0:	d8802604 	addi	r2,sp,152
100043b4:	d8800115 	stw	r2,4(sp)
100043b8:	d8802a17 	ldw	r2,168(sp)
100043bc:	d9403617 	ldw	r5,216(sp)
100043c0:	d9002d17 	ldw	r4,180(sp)
100043c4:	d8800015 	stw	r2,0(sp)
100043c8:	01c000c4 	movi	r7,3
100043cc:	980d883a 	mov	r6,r19
100043d0:	da003d15 	stw	r8,244(sp)
100043d4:	0004b4c0 	call	10004b4c <_dtoa_r>
100043d8:	d8c02a17 	ldw	r3,168(sp)
100043dc:	da003d17 	ldw	r8,244(sp)
100043e0:	1021883a 	mov	r16,r2
100043e4:	10f9883a 	add	fp,r2,r3
100043e8:	81000007 	ldb	r4,0(r16)
100043ec:	00800c04 	movi	r2,48
100043f0:	20805e26 	beq	r4,r2,1000456c <___vfprintf_internal_r+0x2150>
100043f4:	d8c02617 	ldw	r3,152(sp)
100043f8:	e0f9883a 	add	fp,fp,r3
100043fc:	003e0a06 	br	10003c28 <__alt_data_end+0xf8003c28>
10004400:	00c00b44 	movi	r3,45
10004404:	24e0003c 	xorhi	r19,r4,32768
10004408:	d8c02905 	stb	r3,164(sp)
1000440c:	003de906 	br	10003bb4 <__alt_data_end+0xf8003bb4>
10004410:	d8c03217 	ldw	r3,200(sp)
10004414:	00c07a0e 	bge	zero,r3,10004600 <___vfprintf_internal_r+0x21e4>
10004418:	00800044 	movi	r2,1
1000441c:	d9003317 	ldw	r4,204(sp)
10004420:	1105883a 	add	r2,r2,r4
10004424:	d8802b15 	stw	r2,172(sp)
10004428:	10004e16 	blt	r2,zero,10004564 <___vfprintf_internal_r+0x2148>
1000442c:	044019c4 	movi	r17,103
10004430:	003e2106 	br	10003cb8 <__alt_data_end+0xf8003cb8>
10004434:	d9002a17 	ldw	r4,168(sp)
10004438:	d8802104 	addi	r2,sp,132
1000443c:	d8800315 	stw	r2,12(sp)
10004440:	d9000015 	stw	r4,0(sp)
10004444:	d8802504 	addi	r2,sp,148
10004448:	d9403617 	ldw	r5,216(sp)
1000444c:	d9002d17 	ldw	r4,180(sp)
10004450:	d8800215 	stw	r2,8(sp)
10004454:	d8802604 	addi	r2,sp,152
10004458:	d8800115 	stw	r2,4(sp)
1000445c:	01c000c4 	movi	r7,3
10004460:	980d883a 	mov	r6,r19
10004464:	da003d15 	stw	r8,244(sp)
10004468:	0004b4c0 	call	10004b4c <_dtoa_r>
1000446c:	d8c02a17 	ldw	r3,168(sp)
10004470:	da003d17 	ldw	r8,244(sp)
10004474:	1021883a 	mov	r16,r2
10004478:	00801184 	movi	r2,70
1000447c:	80f9883a 	add	fp,r16,r3
10004480:	88bfd926 	beq	r17,r2,100043e8 <__alt_data_end+0xf80043e8>
10004484:	003de806 	br	10003c28 <__alt_data_end+0xf8003c28>
10004488:	d9002a17 	ldw	r4,168(sp)
1000448c:	00c04d0e 	bge	zero,r3,100045c4 <___vfprintf_internal_r+0x21a8>
10004490:	2000441e 	bne	r4,zero,100045a4 <___vfprintf_internal_r+0x2188>
10004494:	9480004c 	andi	r18,r18,1
10004498:	9000421e 	bne	r18,zero,100045a4 <___vfprintf_internal_r+0x2188>
1000449c:	1805883a 	mov	r2,r3
100044a0:	18006f16 	blt	r3,zero,10004660 <___vfprintf_internal_r+0x2244>
100044a4:	d8c03217 	ldw	r3,200(sp)
100044a8:	d8c02b15 	stw	r3,172(sp)
100044ac:	003e0206 	br	10003cb8 <__alt_data_end+0xf8003cb8>
100044b0:	df0022c4 	addi	fp,sp,139
100044b4:	dc002a15 	stw	r16,168(sp)
100044b8:	4027883a 	mov	r19,r8
100044bc:	e021883a 	mov	r16,fp
100044c0:	b009883a 	mov	r4,r22
100044c4:	01400284 	movi	r5,10
100044c8:	000c7880 	call	1000c788 <__modsi3>
100044cc:	10800c04 	addi	r2,r2,48
100044d0:	843fffc4 	addi	r16,r16,-1
100044d4:	b009883a 	mov	r4,r22
100044d8:	01400284 	movi	r5,10
100044dc:	80800005 	stb	r2,0(r16)
100044e0:	000c7040 	call	1000c704 <__divsi3>
100044e4:	102d883a 	mov	r22,r2
100044e8:	00800244 	movi	r2,9
100044ec:	15bff416 	blt	r2,r22,100044c0 <__alt_data_end+0xf80044c0>
100044f0:	9811883a 	mov	r8,r19
100044f4:	b0800c04 	addi	r2,r22,48
100044f8:	8027883a 	mov	r19,r16
100044fc:	997fffc4 	addi	r5,r19,-1
10004500:	98bfffc5 	stb	r2,-1(r19)
10004504:	dc002a17 	ldw	r16,168(sp)
10004508:	2f006d2e 	bgeu	r5,fp,100046c0 <___vfprintf_internal_r+0x22a4>
1000450c:	d9c02384 	addi	r7,sp,142
10004510:	3ccfc83a 	sub	r7,r7,r19
10004514:	d9002344 	addi	r4,sp,141
10004518:	e1cf883a 	add	r7,fp,r7
1000451c:	00000106 	br	10004524 <___vfprintf_internal_r+0x2108>
10004520:	28800003 	ldbu	r2,0(r5)
10004524:	20800005 	stb	r2,0(r4)
10004528:	21000044 	addi	r4,r4,1
1000452c:	29400044 	addi	r5,r5,1
10004530:	393ffb1e 	bne	r7,r4,10004520 <__alt_data_end+0xf8004520>
10004534:	d8802304 	addi	r2,sp,140
10004538:	14c5c83a 	sub	r2,r2,r19
1000453c:	d8c02344 	addi	r3,sp,141
10004540:	1885883a 	add	r2,r3,r2
10004544:	003f7006 	br	10004308 <__alt_data_end+0xf8004308>
10004548:	0005883a 	mov	r2,zero
1000454c:	003f0f06 	br	1000418c <__alt_data_end+0xf800418c>
10004550:	d8c03217 	ldw	r3,200(sp)
10004554:	18c00044 	addi	r3,r3,1
10004558:	d8c02b15 	stw	r3,172(sp)
1000455c:	1805883a 	mov	r2,r3
10004560:	183fb20e 	bge	r3,zero,1000442c <__alt_data_end+0xf800442c>
10004564:	0005883a 	mov	r2,zero
10004568:	003fb006 	br	1000442c <__alt_data_end+0xf800442c>
1000456c:	d9003617 	ldw	r4,216(sp)
10004570:	000d883a 	mov	r6,zero
10004574:	000f883a 	mov	r7,zero
10004578:	980b883a 	mov	r5,r19
1000457c:	d8c03c15 	stw	r3,240(sp)
10004580:	da003d15 	stw	r8,244(sp)
10004584:	000db5c0 	call	1000db5c <__eqdf2>
10004588:	d8c03c17 	ldw	r3,240(sp)
1000458c:	da003d17 	ldw	r8,244(sp)
10004590:	103f9826 	beq	r2,zero,100043f4 <__alt_data_end+0xf80043f4>
10004594:	00800044 	movi	r2,1
10004598:	10c7c83a 	sub	r3,r2,r3
1000459c:	d8c02615 	stw	r3,152(sp)
100045a0:	003f9506 	br	100043f8 <__alt_data_end+0xf80043f8>
100045a4:	d9002a17 	ldw	r4,168(sp)
100045a8:	d8c03217 	ldw	r3,200(sp)
100045ac:	20800044 	addi	r2,r4,1
100045b0:	1885883a 	add	r2,r3,r2
100045b4:	d8802b15 	stw	r2,172(sp)
100045b8:	103dbf0e 	bge	r2,zero,10003cb8 <__alt_data_end+0xf8003cb8>
100045bc:	0005883a 	mov	r2,zero
100045c0:	003dbd06 	br	10003cb8 <__alt_data_end+0xf8003cb8>
100045c4:	2000201e 	bne	r4,zero,10004648 <___vfprintf_internal_r+0x222c>
100045c8:	9480004c 	andi	r18,r18,1
100045cc:	90001e1e 	bne	r18,zero,10004648 <___vfprintf_internal_r+0x222c>
100045d0:	00800044 	movi	r2,1
100045d4:	d8802b15 	stw	r2,172(sp)
100045d8:	003db706 	br	10003cb8 <__alt_data_end+0xf8003cb8>
100045dc:	00800b44 	movi	r2,45
100045e0:	05adc83a 	sub	r22,zero,r22
100045e4:	d8802305 	stb	r2,140(sp)
100045e8:	003f3f06 	br	100042e8 <__alt_data_end+0xf80042e8>
100045ec:	0005883a 	mov	r2,zero
100045f0:	003f5206 	br	1000433c <__alt_data_end+0xf800433c>
100045f4:	90a4703a 	and	r18,r18,r2
100045f8:	903f4e26 	beq	r18,zero,10004334 <__alt_data_end+0xf8004334>
100045fc:	003f4a06 	br	10004328 <__alt_data_end+0xf8004328>
10004600:	00800084 	movi	r2,2
10004604:	10c5c83a 	sub	r2,r2,r3
10004608:	003f8406 	br	1000441c <__alt_data_end+0xf800441c>
1000460c:	d9402e17 	ldw	r5,184(sp)
10004610:	d9002e17 	ldw	r4,184(sp)
10004614:	ac400043 	ldbu	r17,1(r21)
10004618:	29400017 	ldw	r5,0(r5)
1000461c:	20800104 	addi	r2,r4,4
10004620:	d8802e15 	stw	r2,184(sp)
10004624:	d9402a15 	stw	r5,168(sp)
10004628:	182b883a 	mov	r21,r3
1000462c:	283e7b0e 	bge	r5,zero,1000401c <__alt_data_end+0xf800401c>
10004630:	8c403fcc 	andi	r17,r17,255
10004634:	017fffc4 	movi	r5,-1
10004638:	8c40201c 	xori	r17,r17,128
1000463c:	d9402a15 	stw	r5,168(sp)
10004640:	8c7fe004 	addi	r17,r17,-128
10004644:	0037d706 	br	100025a4 <__alt_data_end+0xf80025a4>
10004648:	d8c02a17 	ldw	r3,168(sp)
1000464c:	18c00084 	addi	r3,r3,2
10004650:	d8c02b15 	stw	r3,172(sp)
10004654:	1805883a 	mov	r2,r3
10004658:	183d970e 	bge	r3,zero,10003cb8 <__alt_data_end+0xf8003cb8>
1000465c:	003fd706 	br	100045bc <__alt_data_end+0xf80045bc>
10004660:	0005883a 	mov	r2,zero
10004664:	003f8f06 	br	100044a4 <__alt_data_end+0xf80044a4>
10004668:	9080004c 	andi	r2,r18,1
1000466c:	103f821e 	bne	r2,zero,10004478 <__alt_data_end+0xf8004478>
10004670:	d8802117 	ldw	r2,132(sp)
10004674:	1405c83a 	sub	r2,r2,r16
10004678:	d8803315 	stw	r2,204(sp)
1000467c:	b47ef426 	beq	r22,r17,10004250 <__alt_data_end+0xf8004250>
10004680:	dd802617 	ldw	r22,152(sp)
10004684:	003f1206 	br	100042d0 <__alt_data_end+0xf80042d0>
10004688:	d8c02b03 	ldbu	r3,172(sp)
1000468c:	d8c02785 	stb	r3,158(sp)
10004690:	0038df06 	br	10002a10 <__alt_data_end+0xf8002a10>
10004694:	d8c02b03 	ldbu	r3,172(sp)
10004698:	d8c02785 	stb	r3,158(sp)
1000469c:	0038aa06 	br	10002948 <__alt_data_end+0xf8002948>
100046a0:	d8c02b03 	ldbu	r3,172(sp)
100046a4:	d8c02785 	stb	r3,158(sp)
100046a8:	003a4306 	br	10002fb8 <__alt_data_end+0xf8002fb8>
100046ac:	d8c02b03 	ldbu	r3,172(sp)
100046b0:	d8c02785 	stb	r3,158(sp)
100046b4:	003af506 	br	1000328c <__alt_data_end+0xf800328c>
100046b8:	0005883a 	mov	r2,zero
100046bc:	003d7b06 	br	10003cac <__alt_data_end+0xf8003cac>
100046c0:	d8802344 	addi	r2,sp,141
100046c4:	003f1006 	br	10004308 <__alt_data_end+0xf8004308>
100046c8:	d8c02b03 	ldbu	r3,172(sp)
100046cc:	d8c02785 	stb	r3,158(sp)
100046d0:	0038fd06 	br	10002ac8 <__alt_data_end+0xf8002ac8>
100046d4:	d8c02b03 	ldbu	r3,172(sp)
100046d8:	d8c02785 	stb	r3,158(sp)
100046dc:	003a9706 	br	1000313c <__alt_data_end+0xf800313c>
100046e0:	d8c02b03 	ldbu	r3,172(sp)
100046e4:	d8c02785 	stb	r3,158(sp)
100046e8:	003a1806 	br	10002f4c <__alt_data_end+0xf8002f4c>
100046ec:	d8c02b03 	ldbu	r3,172(sp)
100046f0:	d8c02785 	stb	r3,158(sp)
100046f4:	003abe06 	br	100031f0 <__alt_data_end+0xf80031f0>

100046f8 <__vfprintf_internal>:
100046f8:	00840074 	movhi	r2,4097
100046fc:	108fb304 	addi	r2,r2,16076
10004700:	300f883a 	mov	r7,r6
10004704:	280d883a 	mov	r6,r5
10004708:	200b883a 	mov	r5,r4
1000470c:	11000017 	ldw	r4,0(r2)
10004710:	000241c1 	jmpi	1000241c <___vfprintf_internal_r>

10004714 <__sbprintf>:
10004714:	2880030b 	ldhu	r2,12(r5)
10004718:	2ac01917 	ldw	r11,100(r5)
1000471c:	2a80038b 	ldhu	r10,14(r5)
10004720:	2a400717 	ldw	r9,28(r5)
10004724:	2a000917 	ldw	r8,36(r5)
10004728:	defee204 	addi	sp,sp,-1144
1000472c:	00c10004 	movi	r3,1024
10004730:	dc011a15 	stw	r16,1128(sp)
10004734:	10bfff4c 	andi	r2,r2,65533
10004738:	2821883a 	mov	r16,r5
1000473c:	d8cb883a 	add	r5,sp,r3
10004740:	dc811c15 	stw	r18,1136(sp)
10004744:	dc411b15 	stw	r17,1132(sp)
10004748:	dfc11d15 	stw	ra,1140(sp)
1000474c:	2025883a 	mov	r18,r4
10004750:	d881030d 	sth	r2,1036(sp)
10004754:	dac11915 	stw	r11,1124(sp)
10004758:	da81038d 	sth	r10,1038(sp)
1000475c:	da410715 	stw	r9,1052(sp)
10004760:	da010915 	stw	r8,1060(sp)
10004764:	dec10015 	stw	sp,1024(sp)
10004768:	dec10415 	stw	sp,1040(sp)
1000476c:	d8c10215 	stw	r3,1032(sp)
10004770:	d8c10515 	stw	r3,1044(sp)
10004774:	d8010615 	stw	zero,1048(sp)
10004778:	000241c0 	call	1000241c <___vfprintf_internal_r>
1000477c:	1023883a 	mov	r17,r2
10004780:	10000416 	blt	r2,zero,10004794 <__sbprintf+0x80>
10004784:	d9410004 	addi	r5,sp,1024
10004788:	9009883a 	mov	r4,r18
1000478c:	00063f00 	call	100063f0 <_fflush_r>
10004790:	10000d1e 	bne	r2,zero,100047c8 <__sbprintf+0xb4>
10004794:	d881030b 	ldhu	r2,1036(sp)
10004798:	1080100c 	andi	r2,r2,64
1000479c:	10000326 	beq	r2,zero,100047ac <__sbprintf+0x98>
100047a0:	8080030b 	ldhu	r2,12(r16)
100047a4:	10801014 	ori	r2,r2,64
100047a8:	8080030d 	sth	r2,12(r16)
100047ac:	8805883a 	mov	r2,r17
100047b0:	dfc11d17 	ldw	ra,1140(sp)
100047b4:	dc811c17 	ldw	r18,1136(sp)
100047b8:	dc411b17 	ldw	r17,1132(sp)
100047bc:	dc011a17 	ldw	r16,1128(sp)
100047c0:	dec11e04 	addi	sp,sp,1144
100047c4:	f800283a 	ret
100047c8:	047fffc4 	movi	r17,-1
100047cc:	003ff106 	br	10004794 <__alt_data_end+0xf8004794>

100047d0 <__swsetup_r>:
100047d0:	00840074 	movhi	r2,4097
100047d4:	defffd04 	addi	sp,sp,-12
100047d8:	108fb304 	addi	r2,r2,16076
100047dc:	dc400115 	stw	r17,4(sp)
100047e0:	2023883a 	mov	r17,r4
100047e4:	11000017 	ldw	r4,0(r2)
100047e8:	dc000015 	stw	r16,0(sp)
100047ec:	dfc00215 	stw	ra,8(sp)
100047f0:	2821883a 	mov	r16,r5
100047f4:	20000226 	beq	r4,zero,10004800 <__swsetup_r+0x30>
100047f8:	20800e17 	ldw	r2,56(r4)
100047fc:	10003126 	beq	r2,zero,100048c4 <__swsetup_r+0xf4>
10004800:	8080030b 	ldhu	r2,12(r16)
10004804:	10c0020c 	andi	r3,r2,8
10004808:	1009883a 	mov	r4,r2
1000480c:	18000f26 	beq	r3,zero,1000484c <__swsetup_r+0x7c>
10004810:	80c00417 	ldw	r3,16(r16)
10004814:	18001526 	beq	r3,zero,1000486c <__swsetup_r+0x9c>
10004818:	1100004c 	andi	r4,r2,1
1000481c:	20001c1e 	bne	r4,zero,10004890 <__swsetup_r+0xc0>
10004820:	1080008c 	andi	r2,r2,2
10004824:	1000291e 	bne	r2,zero,100048cc <__swsetup_r+0xfc>
10004828:	80800517 	ldw	r2,20(r16)
1000482c:	80800215 	stw	r2,8(r16)
10004830:	18001c26 	beq	r3,zero,100048a4 <__swsetup_r+0xd4>
10004834:	0005883a 	mov	r2,zero
10004838:	dfc00217 	ldw	ra,8(sp)
1000483c:	dc400117 	ldw	r17,4(sp)
10004840:	dc000017 	ldw	r16,0(sp)
10004844:	dec00304 	addi	sp,sp,12
10004848:	f800283a 	ret
1000484c:	2080040c 	andi	r2,r4,16
10004850:	10002e26 	beq	r2,zero,1000490c <__swsetup_r+0x13c>
10004854:	2080010c 	andi	r2,r4,4
10004858:	10001e1e 	bne	r2,zero,100048d4 <__swsetup_r+0x104>
1000485c:	80c00417 	ldw	r3,16(r16)
10004860:	20800214 	ori	r2,r4,8
10004864:	8080030d 	sth	r2,12(r16)
10004868:	183feb1e 	bne	r3,zero,10004818 <__alt_data_end+0xf8004818>
1000486c:	1100a00c 	andi	r4,r2,640
10004870:	01408004 	movi	r5,512
10004874:	217fe826 	beq	r4,r5,10004818 <__alt_data_end+0xf8004818>
10004878:	800b883a 	mov	r5,r16
1000487c:	8809883a 	mov	r4,r17
10004880:	000738c0 	call	1000738c <__smakebuf_r>
10004884:	8080030b 	ldhu	r2,12(r16)
10004888:	80c00417 	ldw	r3,16(r16)
1000488c:	003fe206 	br	10004818 <__alt_data_end+0xf8004818>
10004890:	80800517 	ldw	r2,20(r16)
10004894:	80000215 	stw	zero,8(r16)
10004898:	0085c83a 	sub	r2,zero,r2
1000489c:	80800615 	stw	r2,24(r16)
100048a0:	183fe41e 	bne	r3,zero,10004834 <__alt_data_end+0xf8004834>
100048a4:	80c0030b 	ldhu	r3,12(r16)
100048a8:	0005883a 	mov	r2,zero
100048ac:	1900200c 	andi	r4,r3,128
100048b0:	203fe126 	beq	r4,zero,10004838 <__alt_data_end+0xf8004838>
100048b4:	18c01014 	ori	r3,r3,64
100048b8:	80c0030d 	sth	r3,12(r16)
100048bc:	00bfffc4 	movi	r2,-1
100048c0:	003fdd06 	br	10004838 <__alt_data_end+0xf8004838>
100048c4:	00067dc0 	call	100067dc <__sinit>
100048c8:	003fcd06 	br	10004800 <__alt_data_end+0xf8004800>
100048cc:	0005883a 	mov	r2,zero
100048d0:	003fd606 	br	1000482c <__alt_data_end+0xf800482c>
100048d4:	81400c17 	ldw	r5,48(r16)
100048d8:	28000626 	beq	r5,zero,100048f4 <__swsetup_r+0x124>
100048dc:	80801004 	addi	r2,r16,64
100048e0:	28800326 	beq	r5,r2,100048f0 <__swsetup_r+0x120>
100048e4:	8809883a 	mov	r4,r17
100048e8:	00069500 	call	10006950 <_free_r>
100048ec:	8100030b 	ldhu	r4,12(r16)
100048f0:	80000c15 	stw	zero,48(r16)
100048f4:	80c00417 	ldw	r3,16(r16)
100048f8:	00bff6c4 	movi	r2,-37
100048fc:	1108703a 	and	r4,r2,r4
10004900:	80000115 	stw	zero,4(r16)
10004904:	80c00015 	stw	r3,0(r16)
10004908:	003fd506 	br	10004860 <__alt_data_end+0xf8004860>
1000490c:	00800244 	movi	r2,9
10004910:	88800015 	stw	r2,0(r17)
10004914:	20801014 	ori	r2,r4,64
10004918:	8080030d 	sth	r2,12(r16)
1000491c:	00bfffc4 	movi	r2,-1
10004920:	003fc506 	br	10004838 <__alt_data_end+0xf8004838>

10004924 <quorem>:
10004924:	defff204 	addi	sp,sp,-56
10004928:	ddc00b15 	stw	r23,44(sp)
1000492c:	20800417 	ldw	r2,16(r4)
10004930:	2dc00417 	ldw	r23,16(r5)
10004934:	dfc00d15 	stw	ra,52(sp)
10004938:	df000c15 	stw	fp,48(sp)
1000493c:	dd800a15 	stw	r22,40(sp)
10004940:	dd400915 	stw	r21,36(sp)
10004944:	dd000815 	stw	r20,32(sp)
10004948:	dcc00715 	stw	r19,28(sp)
1000494c:	dc800615 	stw	r18,24(sp)
10004950:	dc400515 	stw	r17,20(sp)
10004954:	dc000415 	stw	r16,16(sp)
10004958:	15c07a16 	blt	r2,r23,10004b44 <quorem+0x220>
1000495c:	bdffffc4 	addi	r23,r23,-1
10004960:	bde9883a 	add	r20,r23,r23
10004964:	28c00504 	addi	r3,r5,20
10004968:	a529883a 	add	r20,r20,r20
1000496c:	1d39883a 	add	fp,r3,r20
10004970:	24c00504 	addi	r19,r4,20
10004974:	d9400215 	stw	r5,8(sp)
10004978:	9d29883a 	add	r20,r19,r20
1000497c:	e1400017 	ldw	r5,0(fp)
10004980:	d9000015 	stw	r4,0(sp)
10004984:	a1000017 	ldw	r4,0(r20)
10004988:	29400044 	addi	r5,r5,1
1000498c:	d8c00115 	stw	r3,4(sp)
10004990:	dd000315 	stw	r20,12(sp)
10004994:	000c7fc0 	call	1000c7fc <__udivsi3>
10004998:	1025883a 	mov	r18,r2
1000499c:	10003026 	beq	r2,zero,10004a60 <quorem+0x13c>
100049a0:	dc400117 	ldw	r17,4(sp)
100049a4:	9829883a 	mov	r20,r19
100049a8:	002d883a 	mov	r22,zero
100049ac:	0021883a 	mov	r16,zero
100049b0:	8d400017 	ldw	r21,0(r17)
100049b4:	900b883a 	mov	r5,r18
100049b8:	8c400104 	addi	r17,r17,4
100049bc:	a93fffcc 	andi	r4,r21,65535
100049c0:	000c8b80 	call	1000c8b8 <__mulsi3>
100049c4:	a808d43a 	srli	r4,r21,16
100049c8:	900b883a 	mov	r5,r18
100049cc:	15ad883a 	add	r22,r2,r22
100049d0:	000c8b80 	call	1000c8b8 <__mulsi3>
100049d4:	a1000017 	ldw	r4,0(r20)
100049d8:	b00cd43a 	srli	r6,r22,16
100049dc:	b0ffffcc 	andi	r3,r22,65535
100049e0:	217fffcc 	andi	r5,r4,65535
100049e4:	2c21883a 	add	r16,r5,r16
100049e8:	80c7c83a 	sub	r3,r16,r3
100049ec:	2008d43a 	srli	r4,r4,16
100049f0:	1185883a 	add	r2,r2,r6
100049f4:	1821d43a 	srai	r16,r3,16
100049f8:	117fffcc 	andi	r5,r2,65535
100049fc:	2149c83a 	sub	r4,r4,r5
10004a00:	2421883a 	add	r16,r4,r16
10004a04:	8008943a 	slli	r4,r16,16
10004a08:	18ffffcc 	andi	r3,r3,65535
10004a0c:	102cd43a 	srli	r22,r2,16
10004a10:	20c8b03a 	or	r4,r4,r3
10004a14:	a1000015 	stw	r4,0(r20)
10004a18:	8021d43a 	srai	r16,r16,16
10004a1c:	a5000104 	addi	r20,r20,4
10004a20:	e47fe32e 	bgeu	fp,r17,100049b0 <__alt_data_end+0xf80049b0>
10004a24:	d8c00317 	ldw	r3,12(sp)
10004a28:	18800017 	ldw	r2,0(r3)
10004a2c:	10000c1e 	bne	r2,zero,10004a60 <quorem+0x13c>
10004a30:	18bfff04 	addi	r2,r3,-4
10004a34:	9880082e 	bgeu	r19,r2,10004a58 <quorem+0x134>
10004a38:	18ffff17 	ldw	r3,-4(r3)
10004a3c:	18000326 	beq	r3,zero,10004a4c <quorem+0x128>
10004a40:	00000506 	br	10004a58 <quorem+0x134>
10004a44:	10c00017 	ldw	r3,0(r2)
10004a48:	1800031e 	bne	r3,zero,10004a58 <quorem+0x134>
10004a4c:	10bfff04 	addi	r2,r2,-4
10004a50:	bdffffc4 	addi	r23,r23,-1
10004a54:	98bffb36 	bltu	r19,r2,10004a44 <__alt_data_end+0xf8004a44>
10004a58:	d8c00017 	ldw	r3,0(sp)
10004a5c:	1dc00415 	stw	r23,16(r3)
10004a60:	d9400217 	ldw	r5,8(sp)
10004a64:	d9000017 	ldw	r4,0(sp)
10004a68:	0008b880 	call	10008b88 <__mcmp>
10004a6c:	10002816 	blt	r2,zero,10004b10 <quorem+0x1ec>
10004a70:	dc400117 	ldw	r17,4(sp)
10004a74:	94800044 	addi	r18,r18,1
10004a78:	980d883a 	mov	r6,r19
10004a7c:	0007883a 	mov	r3,zero
10004a80:	31000017 	ldw	r4,0(r6)
10004a84:	89400017 	ldw	r5,0(r17)
10004a88:	31800104 	addi	r6,r6,4
10004a8c:	20bfffcc 	andi	r2,r4,65535
10004a90:	10c7883a 	add	r3,r2,r3
10004a94:	28bfffcc 	andi	r2,r5,65535
10004a98:	1885c83a 	sub	r2,r3,r2
10004a9c:	280ad43a 	srli	r5,r5,16
10004aa0:	2008d43a 	srli	r4,r4,16
10004aa4:	1007d43a 	srai	r3,r2,16
10004aa8:	10bfffcc 	andi	r2,r2,65535
10004aac:	2149c83a 	sub	r4,r4,r5
10004ab0:	20c9883a 	add	r4,r4,r3
10004ab4:	200a943a 	slli	r5,r4,16
10004ab8:	8c400104 	addi	r17,r17,4
10004abc:	2007d43a 	srai	r3,r4,16
10004ac0:	2884b03a 	or	r2,r5,r2
10004ac4:	30bfff15 	stw	r2,-4(r6)
10004ac8:	e47fed2e 	bgeu	fp,r17,10004a80 <__alt_data_end+0xf8004a80>
10004acc:	bdc5883a 	add	r2,r23,r23
10004ad0:	1085883a 	add	r2,r2,r2
10004ad4:	9887883a 	add	r3,r19,r2
10004ad8:	18800017 	ldw	r2,0(r3)
10004adc:	10000c1e 	bne	r2,zero,10004b10 <quorem+0x1ec>
10004ae0:	18bfff04 	addi	r2,r3,-4
10004ae4:	9880082e 	bgeu	r19,r2,10004b08 <quorem+0x1e4>
10004ae8:	18ffff17 	ldw	r3,-4(r3)
10004aec:	18000326 	beq	r3,zero,10004afc <quorem+0x1d8>
10004af0:	00000506 	br	10004b08 <quorem+0x1e4>
10004af4:	10c00017 	ldw	r3,0(r2)
10004af8:	1800031e 	bne	r3,zero,10004b08 <quorem+0x1e4>
10004afc:	10bfff04 	addi	r2,r2,-4
10004b00:	bdffffc4 	addi	r23,r23,-1
10004b04:	98bffb36 	bltu	r19,r2,10004af4 <__alt_data_end+0xf8004af4>
10004b08:	d8c00017 	ldw	r3,0(sp)
10004b0c:	1dc00415 	stw	r23,16(r3)
10004b10:	9005883a 	mov	r2,r18
10004b14:	dfc00d17 	ldw	ra,52(sp)
10004b18:	df000c17 	ldw	fp,48(sp)
10004b1c:	ddc00b17 	ldw	r23,44(sp)
10004b20:	dd800a17 	ldw	r22,40(sp)
10004b24:	dd400917 	ldw	r21,36(sp)
10004b28:	dd000817 	ldw	r20,32(sp)
10004b2c:	dcc00717 	ldw	r19,28(sp)
10004b30:	dc800617 	ldw	r18,24(sp)
10004b34:	dc400517 	ldw	r17,20(sp)
10004b38:	dc000417 	ldw	r16,16(sp)
10004b3c:	dec00e04 	addi	sp,sp,56
10004b40:	f800283a 	ret
10004b44:	0005883a 	mov	r2,zero
10004b48:	003ff206 	br	10004b14 <__alt_data_end+0xf8004b14>

10004b4c <_dtoa_r>:
10004b4c:	20801017 	ldw	r2,64(r4)
10004b50:	deffde04 	addi	sp,sp,-136
10004b54:	df002015 	stw	fp,128(sp)
10004b58:	dcc01b15 	stw	r19,108(sp)
10004b5c:	dc801a15 	stw	r18,104(sp)
10004b60:	dc401915 	stw	r17,100(sp)
10004b64:	dc001815 	stw	r16,96(sp)
10004b68:	dfc02115 	stw	ra,132(sp)
10004b6c:	ddc01f15 	stw	r23,124(sp)
10004b70:	dd801e15 	stw	r22,120(sp)
10004b74:	dd401d15 	stw	r21,116(sp)
10004b78:	dd001c15 	stw	r20,112(sp)
10004b7c:	d9c00315 	stw	r7,12(sp)
10004b80:	2039883a 	mov	fp,r4
10004b84:	3023883a 	mov	r17,r6
10004b88:	2825883a 	mov	r18,r5
10004b8c:	dc002417 	ldw	r16,144(sp)
10004b90:	3027883a 	mov	r19,r6
10004b94:	10000826 	beq	r2,zero,10004bb8 <_dtoa_r+0x6c>
10004b98:	21801117 	ldw	r6,68(r4)
10004b9c:	00c00044 	movi	r3,1
10004ba0:	100b883a 	mov	r5,r2
10004ba4:	1986983a 	sll	r3,r3,r6
10004ba8:	11800115 	stw	r6,4(r2)
10004bac:	10c00215 	stw	r3,8(r2)
10004bb0:	00082ac0 	call	100082ac <_Bfree>
10004bb4:	e0001015 	stw	zero,64(fp)
10004bb8:	88002e16 	blt	r17,zero,10004c74 <_dtoa_r+0x128>
10004bbc:	80000015 	stw	zero,0(r16)
10004bc0:	889ffc2c 	andhi	r2,r17,32752
10004bc4:	00dffc34 	movhi	r3,32752
10004bc8:	10c01c26 	beq	r2,r3,10004c3c <_dtoa_r+0xf0>
10004bcc:	000d883a 	mov	r6,zero
10004bd0:	000f883a 	mov	r7,zero
10004bd4:	9009883a 	mov	r4,r18
10004bd8:	980b883a 	mov	r5,r19
10004bdc:	000db5c0 	call	1000db5c <__eqdf2>
10004be0:	10002b1e 	bne	r2,zero,10004c90 <_dtoa_r+0x144>
10004be4:	d9c02317 	ldw	r7,140(sp)
10004be8:	00800044 	movi	r2,1
10004bec:	38800015 	stw	r2,0(r7)
10004bf0:	d8802517 	ldw	r2,148(sp)
10004bf4:	10019e26 	beq	r2,zero,10005270 <_dtoa_r+0x724>
10004bf8:	d8c02517 	ldw	r3,148(sp)
10004bfc:	00840074 	movhi	r2,4097
10004c00:	10885844 	addi	r2,r2,8545
10004c04:	18800015 	stw	r2,0(r3)
10004c08:	10bfffc4 	addi	r2,r2,-1
10004c0c:	dfc02117 	ldw	ra,132(sp)
10004c10:	df002017 	ldw	fp,128(sp)
10004c14:	ddc01f17 	ldw	r23,124(sp)
10004c18:	dd801e17 	ldw	r22,120(sp)
10004c1c:	dd401d17 	ldw	r21,116(sp)
10004c20:	dd001c17 	ldw	r20,112(sp)
10004c24:	dcc01b17 	ldw	r19,108(sp)
10004c28:	dc801a17 	ldw	r18,104(sp)
10004c2c:	dc401917 	ldw	r17,100(sp)
10004c30:	dc001817 	ldw	r16,96(sp)
10004c34:	dec02204 	addi	sp,sp,136
10004c38:	f800283a 	ret
10004c3c:	d8c02317 	ldw	r3,140(sp)
10004c40:	0089c3c4 	movi	r2,9999
10004c44:	18800015 	stw	r2,0(r3)
10004c48:	90017726 	beq	r18,zero,10005228 <_dtoa_r+0x6dc>
10004c4c:	00840074 	movhi	r2,4097
10004c50:	10886404 	addi	r2,r2,8592
10004c54:	d9002517 	ldw	r4,148(sp)
10004c58:	203fec26 	beq	r4,zero,10004c0c <__alt_data_end+0xf8004c0c>
10004c5c:	10c000c7 	ldb	r3,3(r2)
10004c60:	1801781e 	bne	r3,zero,10005244 <_dtoa_r+0x6f8>
10004c64:	10c000c4 	addi	r3,r2,3
10004c68:	d9802517 	ldw	r6,148(sp)
10004c6c:	30c00015 	stw	r3,0(r6)
10004c70:	003fe606 	br	10004c0c <__alt_data_end+0xf8004c0c>
10004c74:	04e00034 	movhi	r19,32768
10004c78:	9cffffc4 	addi	r19,r19,-1
10004c7c:	00800044 	movi	r2,1
10004c80:	8ce6703a 	and	r19,r17,r19
10004c84:	80800015 	stw	r2,0(r16)
10004c88:	9823883a 	mov	r17,r19
10004c8c:	003fcc06 	br	10004bc0 <__alt_data_end+0xf8004bc0>
10004c90:	d8800204 	addi	r2,sp,8
10004c94:	d8800015 	stw	r2,0(sp)
10004c98:	d9c00104 	addi	r7,sp,4
10004c9c:	900b883a 	mov	r5,r18
10004ca0:	980d883a 	mov	r6,r19
10004ca4:	e009883a 	mov	r4,fp
10004ca8:	8820d53a 	srli	r16,r17,20
10004cac:	0008f540 	call	10008f54 <__d2b>
10004cb0:	d8800915 	stw	r2,36(sp)
10004cb4:	8001651e 	bne	r16,zero,1000524c <_dtoa_r+0x700>
10004cb8:	dd800217 	ldw	r22,8(sp)
10004cbc:	dc000117 	ldw	r16,4(sp)
10004cc0:	00800804 	movi	r2,32
10004cc4:	b421883a 	add	r16,r22,r16
10004cc8:	80c10c84 	addi	r3,r16,1074
10004ccc:	10c2d10e 	bge	r2,r3,10005814 <_dtoa_r+0xcc8>
10004cd0:	00801004 	movi	r2,64
10004cd4:	81010484 	addi	r4,r16,1042
10004cd8:	10c7c83a 	sub	r3,r2,r3
10004cdc:	9108d83a 	srl	r4,r18,r4
10004ce0:	88e2983a 	sll	r17,r17,r3
10004ce4:	2448b03a 	or	r4,r4,r17
10004ce8:	000f0780 	call	1000f078 <__floatunsidf>
10004cec:	017f8434 	movhi	r5,65040
10004cf0:	01800044 	movi	r6,1
10004cf4:	1009883a 	mov	r4,r2
10004cf8:	194b883a 	add	r5,r3,r5
10004cfc:	843fffc4 	addi	r16,r16,-1
10004d00:	d9801115 	stw	r6,68(sp)
10004d04:	000d883a 	mov	r6,zero
10004d08:	01cffe34 	movhi	r7,16376
10004d0c:	000e6200 	call	1000e620 <__subdf3>
10004d10:	0198dbf4 	movhi	r6,25455
10004d14:	01cff4f4 	movhi	r7,16339
10004d18:	3190d844 	addi	r6,r6,17249
10004d1c:	39e1e9c4 	addi	r7,r7,-30809
10004d20:	1009883a 	mov	r4,r2
10004d24:	180b883a 	mov	r5,r3
10004d28:	000ddb40 	call	1000ddb4 <__muldf3>
10004d2c:	01a2d874 	movhi	r6,35681
10004d30:	01cff1f4 	movhi	r7,16327
10004d34:	31b22cc4 	addi	r6,r6,-14157
10004d38:	39e28a04 	addi	r7,r7,-30168
10004d3c:	180b883a 	mov	r5,r3
10004d40:	1009883a 	mov	r4,r2
10004d44:	000c8e00 	call	1000c8e0 <__adddf3>
10004d48:	8009883a 	mov	r4,r16
10004d4c:	1029883a 	mov	r20,r2
10004d50:	1823883a 	mov	r17,r3
10004d54:	000ef9c0 	call	1000ef9c <__floatsidf>
10004d58:	019427f4 	movhi	r6,20639
10004d5c:	01cff4f4 	movhi	r7,16339
10004d60:	319e7ec4 	addi	r6,r6,31227
10004d64:	39d104c4 	addi	r7,r7,17427
10004d68:	1009883a 	mov	r4,r2
10004d6c:	180b883a 	mov	r5,r3
10004d70:	000ddb40 	call	1000ddb4 <__muldf3>
10004d74:	100d883a 	mov	r6,r2
10004d78:	180f883a 	mov	r7,r3
10004d7c:	a009883a 	mov	r4,r20
10004d80:	880b883a 	mov	r5,r17
10004d84:	000c8e00 	call	1000c8e0 <__adddf3>
10004d88:	1009883a 	mov	r4,r2
10004d8c:	180b883a 	mov	r5,r3
10004d90:	1029883a 	mov	r20,r2
10004d94:	1823883a 	mov	r17,r3
10004d98:	000ef1c0 	call	1000ef1c <__fixdfsi>
10004d9c:	000d883a 	mov	r6,zero
10004da0:	000f883a 	mov	r7,zero
10004da4:	a009883a 	mov	r4,r20
10004da8:	880b883a 	mov	r5,r17
10004dac:	d8800515 	stw	r2,20(sp)
10004db0:	000dcc00 	call	1000dcc0 <__ledf2>
10004db4:	10028716 	blt	r2,zero,100057d4 <_dtoa_r+0xc88>
10004db8:	d8c00517 	ldw	r3,20(sp)
10004dbc:	00800584 	movi	r2,22
10004dc0:	10c27536 	bltu	r2,r3,10005798 <_dtoa_r+0xc4c>
10004dc4:	180490fa 	slli	r2,r3,3
10004dc8:	00c40074 	movhi	r3,4097
10004dcc:	18c88004 	addi	r3,r3,8704
10004dd0:	1885883a 	add	r2,r3,r2
10004dd4:	11000017 	ldw	r4,0(r2)
10004dd8:	11400117 	ldw	r5,4(r2)
10004ddc:	900d883a 	mov	r6,r18
10004de0:	980f883a 	mov	r7,r19
10004de4:	000dbe40 	call	1000dbe4 <__gedf2>
10004de8:	00828d0e 	bge	zero,r2,10005820 <_dtoa_r+0xcd4>
10004dec:	d9000517 	ldw	r4,20(sp)
10004df0:	d8000e15 	stw	zero,56(sp)
10004df4:	213fffc4 	addi	r4,r4,-1
10004df8:	d9000515 	stw	r4,20(sp)
10004dfc:	b42dc83a 	sub	r22,r22,r16
10004e00:	b5bfffc4 	addi	r22,r22,-1
10004e04:	b0026f16 	blt	r22,zero,100057c4 <_dtoa_r+0xc78>
10004e08:	d8000815 	stw	zero,32(sp)
10004e0c:	d9c00517 	ldw	r7,20(sp)
10004e10:	38026416 	blt	r7,zero,100057a4 <_dtoa_r+0xc58>
10004e14:	b1ed883a 	add	r22,r22,r7
10004e18:	d9c00d15 	stw	r7,52(sp)
10004e1c:	d8000a15 	stw	zero,40(sp)
10004e20:	d9800317 	ldw	r6,12(sp)
10004e24:	00800244 	movi	r2,9
10004e28:	11811436 	bltu	r2,r6,1000527c <_dtoa_r+0x730>
10004e2c:	00800144 	movi	r2,5
10004e30:	1184e10e 	bge	r2,r6,100061b8 <_dtoa_r+0x166c>
10004e34:	31bfff04 	addi	r6,r6,-4
10004e38:	d9800315 	stw	r6,12(sp)
10004e3c:	0023883a 	mov	r17,zero
10004e40:	d9800317 	ldw	r6,12(sp)
10004e44:	008000c4 	movi	r2,3
10004e48:	30836726 	beq	r6,r2,10005be8 <_dtoa_r+0x109c>
10004e4c:	1183410e 	bge	r2,r6,10005b54 <_dtoa_r+0x1008>
10004e50:	d9c00317 	ldw	r7,12(sp)
10004e54:	00800104 	movi	r2,4
10004e58:	38827c26 	beq	r7,r2,1000584c <_dtoa_r+0xd00>
10004e5c:	00800144 	movi	r2,5
10004e60:	3884c41e 	bne	r7,r2,10006174 <_dtoa_r+0x1628>
10004e64:	00800044 	movi	r2,1
10004e68:	d8800b15 	stw	r2,44(sp)
10004e6c:	d8c00517 	ldw	r3,20(sp)
10004e70:	d9002217 	ldw	r4,136(sp)
10004e74:	1907883a 	add	r3,r3,r4
10004e78:	19800044 	addi	r6,r3,1
10004e7c:	d8c00c15 	stw	r3,48(sp)
10004e80:	d9800615 	stw	r6,24(sp)
10004e84:	0183a40e 	bge	zero,r6,10005d18 <_dtoa_r+0x11cc>
10004e88:	d9800617 	ldw	r6,24(sp)
10004e8c:	3021883a 	mov	r16,r6
10004e90:	e0001115 	stw	zero,68(fp)
10004e94:	008005c4 	movi	r2,23
10004e98:	1184c92e 	bgeu	r2,r6,100061c0 <_dtoa_r+0x1674>
10004e9c:	00c00044 	movi	r3,1
10004ea0:	00800104 	movi	r2,4
10004ea4:	1085883a 	add	r2,r2,r2
10004ea8:	11000504 	addi	r4,r2,20
10004eac:	180b883a 	mov	r5,r3
10004eb0:	18c00044 	addi	r3,r3,1
10004eb4:	313ffb2e 	bgeu	r6,r4,10004ea4 <__alt_data_end+0xf8004ea4>
10004eb8:	e1401115 	stw	r5,68(fp)
10004ebc:	e009883a 	mov	r4,fp
10004ec0:	00082040 	call	10008204 <_Balloc>
10004ec4:	d8800715 	stw	r2,28(sp)
10004ec8:	e0801015 	stw	r2,64(fp)
10004ecc:	00800384 	movi	r2,14
10004ed0:	1400f736 	bltu	r2,r16,100052b0 <_dtoa_r+0x764>
10004ed4:	8800f626 	beq	r17,zero,100052b0 <_dtoa_r+0x764>
10004ed8:	d9c00517 	ldw	r7,20(sp)
10004edc:	01c39a0e 	bge	zero,r7,10005d48 <_dtoa_r+0x11fc>
10004ee0:	388003cc 	andi	r2,r7,15
10004ee4:	100490fa 	slli	r2,r2,3
10004ee8:	382bd13a 	srai	r21,r7,4
10004eec:	00c40074 	movhi	r3,4097
10004ef0:	18c88004 	addi	r3,r3,8704
10004ef4:	1885883a 	add	r2,r3,r2
10004ef8:	a8c0040c 	andi	r3,r21,16
10004efc:	12400017 	ldw	r9,0(r2)
10004f00:	12000117 	ldw	r8,4(r2)
10004f04:	18037926 	beq	r3,zero,10005cec <_dtoa_r+0x11a0>
10004f08:	00840074 	movhi	r2,4097
10004f0c:	10887604 	addi	r2,r2,8664
10004f10:	11800817 	ldw	r6,32(r2)
10004f14:	11c00917 	ldw	r7,36(r2)
10004f18:	9009883a 	mov	r4,r18
10004f1c:	980b883a 	mov	r5,r19
10004f20:	da001715 	stw	r8,92(sp)
10004f24:	da401615 	stw	r9,88(sp)
10004f28:	000d18c0 	call	1000d18c <__divdf3>
10004f2c:	da001717 	ldw	r8,92(sp)
10004f30:	da401617 	ldw	r9,88(sp)
10004f34:	ad4003cc 	andi	r21,r21,15
10004f38:	040000c4 	movi	r16,3
10004f3c:	1023883a 	mov	r17,r2
10004f40:	1829883a 	mov	r20,r3
10004f44:	a8001126 	beq	r21,zero,10004f8c <_dtoa_r+0x440>
10004f48:	05c40074 	movhi	r23,4097
10004f4c:	bdc87604 	addi	r23,r23,8664
10004f50:	4805883a 	mov	r2,r9
10004f54:	4007883a 	mov	r3,r8
10004f58:	a980004c 	andi	r6,r21,1
10004f5c:	1009883a 	mov	r4,r2
10004f60:	a82bd07a 	srai	r21,r21,1
10004f64:	180b883a 	mov	r5,r3
10004f68:	30000426 	beq	r6,zero,10004f7c <_dtoa_r+0x430>
10004f6c:	b9800017 	ldw	r6,0(r23)
10004f70:	b9c00117 	ldw	r7,4(r23)
10004f74:	84000044 	addi	r16,r16,1
10004f78:	000ddb40 	call	1000ddb4 <__muldf3>
10004f7c:	bdc00204 	addi	r23,r23,8
10004f80:	a83ff51e 	bne	r21,zero,10004f58 <__alt_data_end+0xf8004f58>
10004f84:	1013883a 	mov	r9,r2
10004f88:	1811883a 	mov	r8,r3
10004f8c:	480d883a 	mov	r6,r9
10004f90:	400f883a 	mov	r7,r8
10004f94:	8809883a 	mov	r4,r17
10004f98:	a00b883a 	mov	r5,r20
10004f9c:	000d18c0 	call	1000d18c <__divdf3>
10004fa0:	d8800f15 	stw	r2,60(sp)
10004fa4:	d8c01015 	stw	r3,64(sp)
10004fa8:	d8c00e17 	ldw	r3,56(sp)
10004fac:	18000626 	beq	r3,zero,10004fc8 <_dtoa_r+0x47c>
10004fb0:	d9000f17 	ldw	r4,60(sp)
10004fb4:	d9401017 	ldw	r5,64(sp)
10004fb8:	000d883a 	mov	r6,zero
10004fbc:	01cffc34 	movhi	r7,16368
10004fc0:	000dcc00 	call	1000dcc0 <__ledf2>
10004fc4:	10040b16 	blt	r2,zero,10005ff4 <_dtoa_r+0x14a8>
10004fc8:	8009883a 	mov	r4,r16
10004fcc:	000ef9c0 	call	1000ef9c <__floatsidf>
10004fd0:	d9800f17 	ldw	r6,60(sp)
10004fd4:	d9c01017 	ldw	r7,64(sp)
10004fd8:	1009883a 	mov	r4,r2
10004fdc:	180b883a 	mov	r5,r3
10004fe0:	000ddb40 	call	1000ddb4 <__muldf3>
10004fe4:	000d883a 	mov	r6,zero
10004fe8:	01d00734 	movhi	r7,16412
10004fec:	1009883a 	mov	r4,r2
10004ff0:	180b883a 	mov	r5,r3
10004ff4:	000c8e00 	call	1000c8e0 <__adddf3>
10004ff8:	1021883a 	mov	r16,r2
10004ffc:	d8800617 	ldw	r2,24(sp)
10005000:	047f3034 	movhi	r17,64704
10005004:	1c63883a 	add	r17,r3,r17
10005008:	10031826 	beq	r2,zero,10005c6c <_dtoa_r+0x1120>
1000500c:	d8c00517 	ldw	r3,20(sp)
10005010:	db000617 	ldw	r12,24(sp)
10005014:	d8c01315 	stw	r3,76(sp)
10005018:	d9000b17 	ldw	r4,44(sp)
1000501c:	20038f26 	beq	r4,zero,10005e5c <_dtoa_r+0x1310>
10005020:	60bfffc4 	addi	r2,r12,-1
10005024:	100490fa 	slli	r2,r2,3
10005028:	00c40074 	movhi	r3,4097
1000502c:	18c88004 	addi	r3,r3,8704
10005030:	1885883a 	add	r2,r3,r2
10005034:	11800017 	ldw	r6,0(r2)
10005038:	11c00117 	ldw	r7,4(r2)
1000503c:	d8800717 	ldw	r2,28(sp)
10005040:	0009883a 	mov	r4,zero
10005044:	014ff834 	movhi	r5,16352
10005048:	db001615 	stw	r12,88(sp)
1000504c:	15c00044 	addi	r23,r2,1
10005050:	000d18c0 	call	1000d18c <__divdf3>
10005054:	800d883a 	mov	r6,r16
10005058:	880f883a 	mov	r7,r17
1000505c:	1009883a 	mov	r4,r2
10005060:	180b883a 	mov	r5,r3
10005064:	000e6200 	call	1000e620 <__subdf3>
10005068:	d9401017 	ldw	r5,64(sp)
1000506c:	d9000f17 	ldw	r4,60(sp)
10005070:	102b883a 	mov	r21,r2
10005074:	d8c01215 	stw	r3,72(sp)
10005078:	000ef1c0 	call	1000ef1c <__fixdfsi>
1000507c:	1009883a 	mov	r4,r2
10005080:	1029883a 	mov	r20,r2
10005084:	000ef9c0 	call	1000ef9c <__floatsidf>
10005088:	d9000f17 	ldw	r4,60(sp)
1000508c:	d9401017 	ldw	r5,64(sp)
10005090:	100d883a 	mov	r6,r2
10005094:	180f883a 	mov	r7,r3
10005098:	000e6200 	call	1000e620 <__subdf3>
1000509c:	1823883a 	mov	r17,r3
100050a0:	d8c00717 	ldw	r3,28(sp)
100050a4:	d9401217 	ldw	r5,72(sp)
100050a8:	a2000c04 	addi	r8,r20,48
100050ac:	1021883a 	mov	r16,r2
100050b0:	1a000005 	stb	r8,0(r3)
100050b4:	800d883a 	mov	r6,r16
100050b8:	880f883a 	mov	r7,r17
100050bc:	a809883a 	mov	r4,r21
100050c0:	4029883a 	mov	r20,r8
100050c4:	000dbe40 	call	1000dbe4 <__gedf2>
100050c8:	00841d16 	blt	zero,r2,10006140 <_dtoa_r+0x15f4>
100050cc:	800d883a 	mov	r6,r16
100050d0:	880f883a 	mov	r7,r17
100050d4:	0009883a 	mov	r4,zero
100050d8:	014ffc34 	movhi	r5,16368
100050dc:	000e6200 	call	1000e620 <__subdf3>
100050e0:	d9401217 	ldw	r5,72(sp)
100050e4:	100d883a 	mov	r6,r2
100050e8:	180f883a 	mov	r7,r3
100050ec:	a809883a 	mov	r4,r21
100050f0:	000dbe40 	call	1000dbe4 <__gedf2>
100050f4:	db001617 	ldw	r12,88(sp)
100050f8:	00840e16 	blt	zero,r2,10006134 <_dtoa_r+0x15e8>
100050fc:	00800044 	movi	r2,1
10005100:	13006b0e 	bge	r2,r12,100052b0 <_dtoa_r+0x764>
10005104:	d9000717 	ldw	r4,28(sp)
10005108:	dd800f15 	stw	r22,60(sp)
1000510c:	dcc01015 	stw	r19,64(sp)
10005110:	2319883a 	add	r12,r4,r12
10005114:	dcc01217 	ldw	r19,72(sp)
10005118:	602d883a 	mov	r22,r12
1000511c:	dc801215 	stw	r18,72(sp)
10005120:	b825883a 	mov	r18,r23
10005124:	00000906 	br	1000514c <_dtoa_r+0x600>
10005128:	000e6200 	call	1000e620 <__subdf3>
1000512c:	a80d883a 	mov	r6,r21
10005130:	980f883a 	mov	r7,r19
10005134:	1009883a 	mov	r4,r2
10005138:	180b883a 	mov	r5,r3
1000513c:	000dcc00 	call	1000dcc0 <__ledf2>
10005140:	1003e816 	blt	r2,zero,100060e4 <_dtoa_r+0x1598>
10005144:	b825883a 	mov	r18,r23
10005148:	bd83e926 	beq	r23,r22,100060f0 <_dtoa_r+0x15a4>
1000514c:	a809883a 	mov	r4,r21
10005150:	980b883a 	mov	r5,r19
10005154:	000d883a 	mov	r6,zero
10005158:	01d00934 	movhi	r7,16420
1000515c:	000ddb40 	call	1000ddb4 <__muldf3>
10005160:	000d883a 	mov	r6,zero
10005164:	01d00934 	movhi	r7,16420
10005168:	8009883a 	mov	r4,r16
1000516c:	880b883a 	mov	r5,r17
10005170:	102b883a 	mov	r21,r2
10005174:	1827883a 	mov	r19,r3
10005178:	000ddb40 	call	1000ddb4 <__muldf3>
1000517c:	180b883a 	mov	r5,r3
10005180:	1009883a 	mov	r4,r2
10005184:	1821883a 	mov	r16,r3
10005188:	1023883a 	mov	r17,r2
1000518c:	000ef1c0 	call	1000ef1c <__fixdfsi>
10005190:	1009883a 	mov	r4,r2
10005194:	1029883a 	mov	r20,r2
10005198:	000ef9c0 	call	1000ef9c <__floatsidf>
1000519c:	8809883a 	mov	r4,r17
100051a0:	800b883a 	mov	r5,r16
100051a4:	100d883a 	mov	r6,r2
100051a8:	180f883a 	mov	r7,r3
100051ac:	000e6200 	call	1000e620 <__subdf3>
100051b0:	a5000c04 	addi	r20,r20,48
100051b4:	a80d883a 	mov	r6,r21
100051b8:	980f883a 	mov	r7,r19
100051bc:	1009883a 	mov	r4,r2
100051c0:	180b883a 	mov	r5,r3
100051c4:	95000005 	stb	r20,0(r18)
100051c8:	1021883a 	mov	r16,r2
100051cc:	1823883a 	mov	r17,r3
100051d0:	000dcc00 	call	1000dcc0 <__ledf2>
100051d4:	bdc00044 	addi	r23,r23,1
100051d8:	800d883a 	mov	r6,r16
100051dc:	880f883a 	mov	r7,r17
100051e0:	0009883a 	mov	r4,zero
100051e4:	014ffc34 	movhi	r5,16368
100051e8:	103fcf0e 	bge	r2,zero,10005128 <__alt_data_end+0xf8005128>
100051ec:	d8c01317 	ldw	r3,76(sp)
100051f0:	d8c00515 	stw	r3,20(sp)
100051f4:	d9400917 	ldw	r5,36(sp)
100051f8:	e009883a 	mov	r4,fp
100051fc:	00082ac0 	call	100082ac <_Bfree>
10005200:	d9000517 	ldw	r4,20(sp)
10005204:	d9802317 	ldw	r6,140(sp)
10005208:	d9c02517 	ldw	r7,148(sp)
1000520c:	b8000005 	stb	zero,0(r23)
10005210:	20800044 	addi	r2,r4,1
10005214:	30800015 	stw	r2,0(r6)
10005218:	3802aa26 	beq	r7,zero,10005cc4 <_dtoa_r+0x1178>
1000521c:	3dc00015 	stw	r23,0(r7)
10005220:	d8800717 	ldw	r2,28(sp)
10005224:	003e7906 	br	10004c0c <__alt_data_end+0xf8004c0c>
10005228:	00800434 	movhi	r2,16
1000522c:	10bfffc4 	addi	r2,r2,-1
10005230:	88a2703a 	and	r17,r17,r2
10005234:	883e851e 	bne	r17,zero,10004c4c <__alt_data_end+0xf8004c4c>
10005238:	00840074 	movhi	r2,4097
1000523c:	10886104 	addi	r2,r2,8580
10005240:	003e8406 	br	10004c54 <__alt_data_end+0xf8004c54>
10005244:	10c00204 	addi	r3,r2,8
10005248:	003e8706 	br	10004c68 <__alt_data_end+0xf8004c68>
1000524c:	01400434 	movhi	r5,16
10005250:	297fffc4 	addi	r5,r5,-1
10005254:	994a703a 	and	r5,r19,r5
10005258:	9009883a 	mov	r4,r18
1000525c:	843f0044 	addi	r16,r16,-1023
10005260:	294ffc34 	orhi	r5,r5,16368
10005264:	dd800217 	ldw	r22,8(sp)
10005268:	d8001115 	stw	zero,68(sp)
1000526c:	003ea506 	br	10004d04 <__alt_data_end+0xf8004d04>
10005270:	00840074 	movhi	r2,4097
10005274:	10885804 	addi	r2,r2,8544
10005278:	003e6406 	br	10004c0c <__alt_data_end+0xf8004c0c>
1000527c:	e0001115 	stw	zero,68(fp)
10005280:	000b883a 	mov	r5,zero
10005284:	e009883a 	mov	r4,fp
10005288:	00082040 	call	10008204 <_Balloc>
1000528c:	01bfffc4 	movi	r6,-1
10005290:	01c00044 	movi	r7,1
10005294:	d8800715 	stw	r2,28(sp)
10005298:	d9800c15 	stw	r6,48(sp)
1000529c:	e0801015 	stw	r2,64(fp)
100052a0:	d8000315 	stw	zero,12(sp)
100052a4:	d9c00b15 	stw	r7,44(sp)
100052a8:	d9800615 	stw	r6,24(sp)
100052ac:	d8002215 	stw	zero,136(sp)
100052b0:	d8800117 	ldw	r2,4(sp)
100052b4:	10008916 	blt	r2,zero,100054dc <_dtoa_r+0x990>
100052b8:	d9000517 	ldw	r4,20(sp)
100052bc:	00c00384 	movi	r3,14
100052c0:	19008616 	blt	r3,r4,100054dc <_dtoa_r+0x990>
100052c4:	200490fa 	slli	r2,r4,3
100052c8:	00c40074 	movhi	r3,4097
100052cc:	d9802217 	ldw	r6,136(sp)
100052d0:	18c88004 	addi	r3,r3,8704
100052d4:	1885883a 	add	r2,r3,r2
100052d8:	14000017 	ldw	r16,0(r2)
100052dc:	14400117 	ldw	r17,4(r2)
100052e0:	30016316 	blt	r6,zero,10005870 <_dtoa_r+0xd24>
100052e4:	800d883a 	mov	r6,r16
100052e8:	880f883a 	mov	r7,r17
100052ec:	9009883a 	mov	r4,r18
100052f0:	980b883a 	mov	r5,r19
100052f4:	000d18c0 	call	1000d18c <__divdf3>
100052f8:	180b883a 	mov	r5,r3
100052fc:	1009883a 	mov	r4,r2
10005300:	000ef1c0 	call	1000ef1c <__fixdfsi>
10005304:	1009883a 	mov	r4,r2
10005308:	102b883a 	mov	r21,r2
1000530c:	000ef9c0 	call	1000ef9c <__floatsidf>
10005310:	800d883a 	mov	r6,r16
10005314:	880f883a 	mov	r7,r17
10005318:	1009883a 	mov	r4,r2
1000531c:	180b883a 	mov	r5,r3
10005320:	000ddb40 	call	1000ddb4 <__muldf3>
10005324:	100d883a 	mov	r6,r2
10005328:	180f883a 	mov	r7,r3
1000532c:	9009883a 	mov	r4,r18
10005330:	980b883a 	mov	r5,r19
10005334:	000e6200 	call	1000e620 <__subdf3>
10005338:	d9c00717 	ldw	r7,28(sp)
1000533c:	1009883a 	mov	r4,r2
10005340:	a8800c04 	addi	r2,r21,48
10005344:	38800005 	stb	r2,0(r7)
10005348:	3dc00044 	addi	r23,r7,1
1000534c:	d9c00617 	ldw	r7,24(sp)
10005350:	01800044 	movi	r6,1
10005354:	180b883a 	mov	r5,r3
10005358:	2005883a 	mov	r2,r4
1000535c:	39803826 	beq	r7,r6,10005440 <_dtoa_r+0x8f4>
10005360:	000d883a 	mov	r6,zero
10005364:	01d00934 	movhi	r7,16420
10005368:	000ddb40 	call	1000ddb4 <__muldf3>
1000536c:	000d883a 	mov	r6,zero
10005370:	000f883a 	mov	r7,zero
10005374:	1009883a 	mov	r4,r2
10005378:	180b883a 	mov	r5,r3
1000537c:	1025883a 	mov	r18,r2
10005380:	1827883a 	mov	r19,r3
10005384:	000db5c0 	call	1000db5c <__eqdf2>
10005388:	103f9a26 	beq	r2,zero,100051f4 <__alt_data_end+0xf80051f4>
1000538c:	d9c00617 	ldw	r7,24(sp)
10005390:	d8c00717 	ldw	r3,28(sp)
10005394:	b829883a 	mov	r20,r23
10005398:	38bfffc4 	addi	r2,r7,-1
1000539c:	18ad883a 	add	r22,r3,r2
100053a0:	00000a06 	br	100053cc <_dtoa_r+0x880>
100053a4:	000ddb40 	call	1000ddb4 <__muldf3>
100053a8:	000d883a 	mov	r6,zero
100053ac:	000f883a 	mov	r7,zero
100053b0:	1009883a 	mov	r4,r2
100053b4:	180b883a 	mov	r5,r3
100053b8:	1025883a 	mov	r18,r2
100053bc:	1827883a 	mov	r19,r3
100053c0:	b829883a 	mov	r20,r23
100053c4:	000db5c0 	call	1000db5c <__eqdf2>
100053c8:	103f8a26 	beq	r2,zero,100051f4 <__alt_data_end+0xf80051f4>
100053cc:	800d883a 	mov	r6,r16
100053d0:	880f883a 	mov	r7,r17
100053d4:	9009883a 	mov	r4,r18
100053d8:	980b883a 	mov	r5,r19
100053dc:	000d18c0 	call	1000d18c <__divdf3>
100053e0:	180b883a 	mov	r5,r3
100053e4:	1009883a 	mov	r4,r2
100053e8:	000ef1c0 	call	1000ef1c <__fixdfsi>
100053ec:	1009883a 	mov	r4,r2
100053f0:	102b883a 	mov	r21,r2
100053f4:	000ef9c0 	call	1000ef9c <__floatsidf>
100053f8:	800d883a 	mov	r6,r16
100053fc:	880f883a 	mov	r7,r17
10005400:	1009883a 	mov	r4,r2
10005404:	180b883a 	mov	r5,r3
10005408:	000ddb40 	call	1000ddb4 <__muldf3>
1000540c:	100d883a 	mov	r6,r2
10005410:	180f883a 	mov	r7,r3
10005414:	9009883a 	mov	r4,r18
10005418:	980b883a 	mov	r5,r19
1000541c:	000e6200 	call	1000e620 <__subdf3>
10005420:	aa000c04 	addi	r8,r21,48
10005424:	a2000005 	stb	r8,0(r20)
10005428:	000d883a 	mov	r6,zero
1000542c:	01d00934 	movhi	r7,16420
10005430:	1009883a 	mov	r4,r2
10005434:	180b883a 	mov	r5,r3
10005438:	a5c00044 	addi	r23,r20,1
1000543c:	b53fd91e 	bne	r22,r20,100053a4 <__alt_data_end+0xf80053a4>
10005440:	100d883a 	mov	r6,r2
10005444:	180f883a 	mov	r7,r3
10005448:	1009883a 	mov	r4,r2
1000544c:	180b883a 	mov	r5,r3
10005450:	000c8e00 	call	1000c8e0 <__adddf3>
10005454:	100d883a 	mov	r6,r2
10005458:	180f883a 	mov	r7,r3
1000545c:	8009883a 	mov	r4,r16
10005460:	880b883a 	mov	r5,r17
10005464:	1027883a 	mov	r19,r2
10005468:	1825883a 	mov	r18,r3
1000546c:	000dcc00 	call	1000dcc0 <__ledf2>
10005470:	10000816 	blt	r2,zero,10005494 <_dtoa_r+0x948>
10005474:	980d883a 	mov	r6,r19
10005478:	900f883a 	mov	r7,r18
1000547c:	8009883a 	mov	r4,r16
10005480:	880b883a 	mov	r5,r17
10005484:	000db5c0 	call	1000db5c <__eqdf2>
10005488:	103f5a1e 	bne	r2,zero,100051f4 <__alt_data_end+0xf80051f4>
1000548c:	ad40004c 	andi	r21,r21,1
10005490:	a83f5826 	beq	r21,zero,100051f4 <__alt_data_end+0xf80051f4>
10005494:	bd3fffc3 	ldbu	r20,-1(r23)
10005498:	b8bfffc4 	addi	r2,r23,-1
1000549c:	1007883a 	mov	r3,r2
100054a0:	01400e44 	movi	r5,57
100054a4:	d9800717 	ldw	r6,28(sp)
100054a8:	00000506 	br	100054c0 <_dtoa_r+0x974>
100054ac:	18ffffc4 	addi	r3,r3,-1
100054b0:	11824726 	beq	r2,r6,10005dd0 <_dtoa_r+0x1284>
100054b4:	1d000003 	ldbu	r20,0(r3)
100054b8:	102f883a 	mov	r23,r2
100054bc:	10bfffc4 	addi	r2,r2,-1
100054c0:	a1003fcc 	andi	r4,r20,255
100054c4:	2100201c 	xori	r4,r4,128
100054c8:	213fe004 	addi	r4,r4,-128
100054cc:	217ff726 	beq	r4,r5,100054ac <__alt_data_end+0xf80054ac>
100054d0:	a2000044 	addi	r8,r20,1
100054d4:	12000005 	stb	r8,0(r2)
100054d8:	003f4606 	br	100051f4 <__alt_data_end+0xf80051f4>
100054dc:	d9000b17 	ldw	r4,44(sp)
100054e0:	2000c826 	beq	r4,zero,10005804 <_dtoa_r+0xcb8>
100054e4:	d9800317 	ldw	r6,12(sp)
100054e8:	00c00044 	movi	r3,1
100054ec:	1980f90e 	bge	r3,r6,100058d4 <_dtoa_r+0xd88>
100054f0:	d8800617 	ldw	r2,24(sp)
100054f4:	d8c00a17 	ldw	r3,40(sp)
100054f8:	157fffc4 	addi	r21,r2,-1
100054fc:	1d41f316 	blt	r3,r21,10005ccc <_dtoa_r+0x1180>
10005500:	1d6bc83a 	sub	r21,r3,r21
10005504:	d9c00617 	ldw	r7,24(sp)
10005508:	3802aa16 	blt	r7,zero,10005fb4 <_dtoa_r+0x1468>
1000550c:	dd000817 	ldw	r20,32(sp)
10005510:	d8800617 	ldw	r2,24(sp)
10005514:	d8c00817 	ldw	r3,32(sp)
10005518:	01400044 	movi	r5,1
1000551c:	e009883a 	mov	r4,fp
10005520:	1887883a 	add	r3,r3,r2
10005524:	d8c00815 	stw	r3,32(sp)
10005528:	b0ad883a 	add	r22,r22,r2
1000552c:	00086380 	call	10008638 <__i2b>
10005530:	1023883a 	mov	r17,r2
10005534:	a0000826 	beq	r20,zero,10005558 <_dtoa_r+0xa0c>
10005538:	0580070e 	bge	zero,r22,10005558 <_dtoa_r+0xa0c>
1000553c:	a005883a 	mov	r2,r20
10005540:	b500b916 	blt	r22,r20,10005828 <_dtoa_r+0xcdc>
10005544:	d9000817 	ldw	r4,32(sp)
10005548:	a0a9c83a 	sub	r20,r20,r2
1000554c:	b0adc83a 	sub	r22,r22,r2
10005550:	2089c83a 	sub	r4,r4,r2
10005554:	d9000815 	stw	r4,32(sp)
10005558:	d9800a17 	ldw	r6,40(sp)
1000555c:	0181810e 	bge	zero,r6,10005b64 <_dtoa_r+0x1018>
10005560:	d9c00b17 	ldw	r7,44(sp)
10005564:	3800b326 	beq	r7,zero,10005834 <_dtoa_r+0xce8>
10005568:	a800b226 	beq	r21,zero,10005834 <_dtoa_r+0xce8>
1000556c:	880b883a 	mov	r5,r17
10005570:	a80d883a 	mov	r6,r21
10005574:	e009883a 	mov	r4,fp
10005578:	00089000 	call	10008900 <__pow5mult>
1000557c:	d9800917 	ldw	r6,36(sp)
10005580:	100b883a 	mov	r5,r2
10005584:	e009883a 	mov	r4,fp
10005588:	1023883a 	mov	r17,r2
1000558c:	00086740 	call	10008674 <__multiply>
10005590:	1021883a 	mov	r16,r2
10005594:	d8800a17 	ldw	r2,40(sp)
10005598:	d9400917 	ldw	r5,36(sp)
1000559c:	e009883a 	mov	r4,fp
100055a0:	1545c83a 	sub	r2,r2,r21
100055a4:	d8800a15 	stw	r2,40(sp)
100055a8:	00082ac0 	call	100082ac <_Bfree>
100055ac:	d8c00a17 	ldw	r3,40(sp)
100055b0:	18009f1e 	bne	r3,zero,10005830 <_dtoa_r+0xce4>
100055b4:	05c00044 	movi	r23,1
100055b8:	e009883a 	mov	r4,fp
100055bc:	b80b883a 	mov	r5,r23
100055c0:	00086380 	call	10008638 <__i2b>
100055c4:	d9000d17 	ldw	r4,52(sp)
100055c8:	102b883a 	mov	r21,r2
100055cc:	2000ce26 	beq	r4,zero,10005908 <_dtoa_r+0xdbc>
100055d0:	200d883a 	mov	r6,r4
100055d4:	100b883a 	mov	r5,r2
100055d8:	e009883a 	mov	r4,fp
100055dc:	00089000 	call	10008900 <__pow5mult>
100055e0:	d9800317 	ldw	r6,12(sp)
100055e4:	102b883a 	mov	r21,r2
100055e8:	b981810e 	bge	r23,r6,10005bf0 <_dtoa_r+0x10a4>
100055ec:	0027883a 	mov	r19,zero
100055f0:	a8800417 	ldw	r2,16(r21)
100055f4:	05c00804 	movi	r23,32
100055f8:	10800104 	addi	r2,r2,4
100055fc:	1085883a 	add	r2,r2,r2
10005600:	1085883a 	add	r2,r2,r2
10005604:	a885883a 	add	r2,r21,r2
10005608:	11000017 	ldw	r4,0(r2)
1000560c:	00085200 	call	10008520 <__hi0bits>
10005610:	b885c83a 	sub	r2,r23,r2
10005614:	1585883a 	add	r2,r2,r22
10005618:	108007cc 	andi	r2,r2,31
1000561c:	1000b326 	beq	r2,zero,100058ec <_dtoa_r+0xda0>
10005620:	00c00804 	movi	r3,32
10005624:	1887c83a 	sub	r3,r3,r2
10005628:	01000104 	movi	r4,4
1000562c:	20c2cd0e 	bge	r4,r3,10006164 <_dtoa_r+0x1618>
10005630:	00c00704 	movi	r3,28
10005634:	1885c83a 	sub	r2,r3,r2
10005638:	d8c00817 	ldw	r3,32(sp)
1000563c:	a0a9883a 	add	r20,r20,r2
10005640:	b0ad883a 	add	r22,r22,r2
10005644:	1887883a 	add	r3,r3,r2
10005648:	d8c00815 	stw	r3,32(sp)
1000564c:	d9800817 	ldw	r6,32(sp)
10005650:	0180040e 	bge	zero,r6,10005664 <_dtoa_r+0xb18>
10005654:	800b883a 	mov	r5,r16
10005658:	e009883a 	mov	r4,fp
1000565c:	0008a400 	call	10008a40 <__lshift>
10005660:	1021883a 	mov	r16,r2
10005664:	0580050e 	bge	zero,r22,1000567c <_dtoa_r+0xb30>
10005668:	a80b883a 	mov	r5,r21
1000566c:	b00d883a 	mov	r6,r22
10005670:	e009883a 	mov	r4,fp
10005674:	0008a400 	call	10008a40 <__lshift>
10005678:	102b883a 	mov	r21,r2
1000567c:	d9c00e17 	ldw	r7,56(sp)
10005680:	3801211e 	bne	r7,zero,10005b08 <_dtoa_r+0xfbc>
10005684:	d9800617 	ldw	r6,24(sp)
10005688:	0181380e 	bge	zero,r6,10005b6c <_dtoa_r+0x1020>
1000568c:	d8c00b17 	ldw	r3,44(sp)
10005690:	1800ab1e 	bne	r3,zero,10005940 <_dtoa_r+0xdf4>
10005694:	dc800717 	ldw	r18,28(sp)
10005698:	dcc00617 	ldw	r19,24(sp)
1000569c:	9029883a 	mov	r20,r18
100056a0:	00000206 	br	100056ac <_dtoa_r+0xb60>
100056a4:	00082d40 	call	100082d4 <__multadd>
100056a8:	1021883a 	mov	r16,r2
100056ac:	a80b883a 	mov	r5,r21
100056b0:	8009883a 	mov	r4,r16
100056b4:	00049240 	call	10004924 <quorem>
100056b8:	10800c04 	addi	r2,r2,48
100056bc:	90800005 	stb	r2,0(r18)
100056c0:	94800044 	addi	r18,r18,1
100056c4:	9507c83a 	sub	r3,r18,r20
100056c8:	000f883a 	mov	r7,zero
100056cc:	01800284 	movi	r6,10
100056d0:	800b883a 	mov	r5,r16
100056d4:	e009883a 	mov	r4,fp
100056d8:	1cfff216 	blt	r3,r19,100056a4 <__alt_data_end+0xf80056a4>
100056dc:	1011883a 	mov	r8,r2
100056e0:	d8800617 	ldw	r2,24(sp)
100056e4:	0082370e 	bge	zero,r2,10005fc4 <_dtoa_r+0x1478>
100056e8:	d9000717 	ldw	r4,28(sp)
100056ec:	0025883a 	mov	r18,zero
100056f0:	20af883a 	add	r23,r4,r2
100056f4:	01800044 	movi	r6,1
100056f8:	800b883a 	mov	r5,r16
100056fc:	e009883a 	mov	r4,fp
10005700:	da001715 	stw	r8,92(sp)
10005704:	0008a400 	call	10008a40 <__lshift>
10005708:	a80b883a 	mov	r5,r21
1000570c:	1009883a 	mov	r4,r2
10005710:	d8800915 	stw	r2,36(sp)
10005714:	0008b880 	call	10008b88 <__mcmp>
10005718:	da001717 	ldw	r8,92(sp)
1000571c:	0081800e 	bge	zero,r2,10005d20 <_dtoa_r+0x11d4>
10005720:	b93fffc3 	ldbu	r4,-1(r23)
10005724:	b8bfffc4 	addi	r2,r23,-1
10005728:	1007883a 	mov	r3,r2
1000572c:	01800e44 	movi	r6,57
10005730:	d9c00717 	ldw	r7,28(sp)
10005734:	00000506 	br	1000574c <_dtoa_r+0xc00>
10005738:	18ffffc4 	addi	r3,r3,-1
1000573c:	11c12326 	beq	r2,r7,10005bcc <_dtoa_r+0x1080>
10005740:	19000003 	ldbu	r4,0(r3)
10005744:	102f883a 	mov	r23,r2
10005748:	10bfffc4 	addi	r2,r2,-1
1000574c:	21403fcc 	andi	r5,r4,255
10005750:	2940201c 	xori	r5,r5,128
10005754:	297fe004 	addi	r5,r5,-128
10005758:	29bff726 	beq	r5,r6,10005738 <__alt_data_end+0xf8005738>
1000575c:	21000044 	addi	r4,r4,1
10005760:	11000005 	stb	r4,0(r2)
10005764:	a80b883a 	mov	r5,r21
10005768:	e009883a 	mov	r4,fp
1000576c:	00082ac0 	call	100082ac <_Bfree>
10005770:	883ea026 	beq	r17,zero,100051f4 <__alt_data_end+0xf80051f4>
10005774:	90000426 	beq	r18,zero,10005788 <_dtoa_r+0xc3c>
10005778:	94400326 	beq	r18,r17,10005788 <_dtoa_r+0xc3c>
1000577c:	900b883a 	mov	r5,r18
10005780:	e009883a 	mov	r4,fp
10005784:	00082ac0 	call	100082ac <_Bfree>
10005788:	880b883a 	mov	r5,r17
1000578c:	e009883a 	mov	r4,fp
10005790:	00082ac0 	call	100082ac <_Bfree>
10005794:	003e9706 	br	100051f4 <__alt_data_end+0xf80051f4>
10005798:	01800044 	movi	r6,1
1000579c:	d9800e15 	stw	r6,56(sp)
100057a0:	003d9606 	br	10004dfc <__alt_data_end+0xf8004dfc>
100057a4:	d8800817 	ldw	r2,32(sp)
100057a8:	d8c00517 	ldw	r3,20(sp)
100057ac:	d8000d15 	stw	zero,52(sp)
100057b0:	10c5c83a 	sub	r2,r2,r3
100057b4:	00c9c83a 	sub	r4,zero,r3
100057b8:	d8800815 	stw	r2,32(sp)
100057bc:	d9000a15 	stw	r4,40(sp)
100057c0:	003d9706 	br	10004e20 <__alt_data_end+0xf8004e20>
100057c4:	05adc83a 	sub	r22,zero,r22
100057c8:	dd800815 	stw	r22,32(sp)
100057cc:	002d883a 	mov	r22,zero
100057d0:	003d8e06 	br	10004e0c <__alt_data_end+0xf8004e0c>
100057d4:	d9000517 	ldw	r4,20(sp)
100057d8:	000ef9c0 	call	1000ef9c <__floatsidf>
100057dc:	100d883a 	mov	r6,r2
100057e0:	180f883a 	mov	r7,r3
100057e4:	a009883a 	mov	r4,r20
100057e8:	880b883a 	mov	r5,r17
100057ec:	000db5c0 	call	1000db5c <__eqdf2>
100057f0:	103d7126 	beq	r2,zero,10004db8 <__alt_data_end+0xf8004db8>
100057f4:	d9c00517 	ldw	r7,20(sp)
100057f8:	39ffffc4 	addi	r7,r7,-1
100057fc:	d9c00515 	stw	r7,20(sp)
10005800:	003d6d06 	br	10004db8 <__alt_data_end+0xf8004db8>
10005804:	dd400a17 	ldw	r21,40(sp)
10005808:	dd000817 	ldw	r20,32(sp)
1000580c:	0023883a 	mov	r17,zero
10005810:	003f4806 	br	10005534 <__alt_data_end+0xf8005534>
10005814:	10e3c83a 	sub	r17,r2,r3
10005818:	9448983a 	sll	r4,r18,r17
1000581c:	003d3206 	br	10004ce8 <__alt_data_end+0xf8004ce8>
10005820:	d8000e15 	stw	zero,56(sp)
10005824:	003d7506 	br	10004dfc <__alt_data_end+0xf8004dfc>
10005828:	b005883a 	mov	r2,r22
1000582c:	003f4506 	br	10005544 <__alt_data_end+0xf8005544>
10005830:	dc000915 	stw	r16,36(sp)
10005834:	d9800a17 	ldw	r6,40(sp)
10005838:	d9400917 	ldw	r5,36(sp)
1000583c:	e009883a 	mov	r4,fp
10005840:	00089000 	call	10008900 <__pow5mult>
10005844:	1021883a 	mov	r16,r2
10005848:	003f5a06 	br	100055b4 <__alt_data_end+0xf80055b4>
1000584c:	01c00044 	movi	r7,1
10005850:	d9c00b15 	stw	r7,44(sp)
10005854:	d8802217 	ldw	r2,136(sp)
10005858:	0081280e 	bge	zero,r2,10005cfc <_dtoa_r+0x11b0>
1000585c:	100d883a 	mov	r6,r2
10005860:	1021883a 	mov	r16,r2
10005864:	d8800c15 	stw	r2,48(sp)
10005868:	d8800615 	stw	r2,24(sp)
1000586c:	003d8806 	br	10004e90 <__alt_data_end+0xf8004e90>
10005870:	d8800617 	ldw	r2,24(sp)
10005874:	00be9b16 	blt	zero,r2,100052e4 <__alt_data_end+0xf80052e4>
10005878:	10010f1e 	bne	r2,zero,10005cb8 <_dtoa_r+0x116c>
1000587c:	880b883a 	mov	r5,r17
10005880:	000d883a 	mov	r6,zero
10005884:	01d00534 	movhi	r7,16404
10005888:	8009883a 	mov	r4,r16
1000588c:	000ddb40 	call	1000ddb4 <__muldf3>
10005890:	900d883a 	mov	r6,r18
10005894:	980f883a 	mov	r7,r19
10005898:	1009883a 	mov	r4,r2
1000589c:	180b883a 	mov	r5,r3
100058a0:	000dbe40 	call	1000dbe4 <__gedf2>
100058a4:	002b883a 	mov	r21,zero
100058a8:	0023883a 	mov	r17,zero
100058ac:	1000bf16 	blt	r2,zero,10005bac <_dtoa_r+0x1060>
100058b0:	d9802217 	ldw	r6,136(sp)
100058b4:	ddc00717 	ldw	r23,28(sp)
100058b8:	018c303a 	nor	r6,zero,r6
100058bc:	d9800515 	stw	r6,20(sp)
100058c0:	a80b883a 	mov	r5,r21
100058c4:	e009883a 	mov	r4,fp
100058c8:	00082ac0 	call	100082ac <_Bfree>
100058cc:	883e4926 	beq	r17,zero,100051f4 <__alt_data_end+0xf80051f4>
100058d0:	003fad06 	br	10005788 <__alt_data_end+0xf8005788>
100058d4:	d9c01117 	ldw	r7,68(sp)
100058d8:	3801bc26 	beq	r7,zero,10005fcc <_dtoa_r+0x1480>
100058dc:	10810cc4 	addi	r2,r2,1075
100058e0:	dd400a17 	ldw	r21,40(sp)
100058e4:	dd000817 	ldw	r20,32(sp)
100058e8:	003f0a06 	br	10005514 <__alt_data_end+0xf8005514>
100058ec:	00800704 	movi	r2,28
100058f0:	d9000817 	ldw	r4,32(sp)
100058f4:	a0a9883a 	add	r20,r20,r2
100058f8:	b0ad883a 	add	r22,r22,r2
100058fc:	2089883a 	add	r4,r4,r2
10005900:	d9000815 	stw	r4,32(sp)
10005904:	003f5106 	br	1000564c <__alt_data_end+0xf800564c>
10005908:	d8c00317 	ldw	r3,12(sp)
1000590c:	b8c1fc0e 	bge	r23,r3,10006100 <_dtoa_r+0x15b4>
10005910:	0027883a 	mov	r19,zero
10005914:	b805883a 	mov	r2,r23
10005918:	003f3e06 	br	10005614 <__alt_data_end+0xf8005614>
1000591c:	880b883a 	mov	r5,r17
10005920:	e009883a 	mov	r4,fp
10005924:	000f883a 	mov	r7,zero
10005928:	01800284 	movi	r6,10
1000592c:	00082d40 	call	100082d4 <__multadd>
10005930:	d9000c17 	ldw	r4,48(sp)
10005934:	1023883a 	mov	r17,r2
10005938:	0102040e 	bge	zero,r4,1000614c <_dtoa_r+0x1600>
1000593c:	d9000615 	stw	r4,24(sp)
10005940:	0500050e 	bge	zero,r20,10005958 <_dtoa_r+0xe0c>
10005944:	880b883a 	mov	r5,r17
10005948:	a00d883a 	mov	r6,r20
1000594c:	e009883a 	mov	r4,fp
10005950:	0008a400 	call	10008a40 <__lshift>
10005954:	1023883a 	mov	r17,r2
10005958:	9801241e 	bne	r19,zero,10005dec <_dtoa_r+0x12a0>
1000595c:	8829883a 	mov	r20,r17
10005960:	d9000617 	ldw	r4,24(sp)
10005964:	dcc00717 	ldw	r19,28(sp)
10005968:	9480004c 	andi	r18,r18,1
1000596c:	20bfffc4 	addi	r2,r4,-1
10005970:	9885883a 	add	r2,r19,r2
10005974:	d8800415 	stw	r2,16(sp)
10005978:	dc800615 	stw	r18,24(sp)
1000597c:	a80b883a 	mov	r5,r21
10005980:	8009883a 	mov	r4,r16
10005984:	00049240 	call	10004924 <quorem>
10005988:	880b883a 	mov	r5,r17
1000598c:	8009883a 	mov	r4,r16
10005990:	102f883a 	mov	r23,r2
10005994:	0008b880 	call	10008b88 <__mcmp>
10005998:	a80b883a 	mov	r5,r21
1000599c:	a00d883a 	mov	r6,r20
100059a0:	e009883a 	mov	r4,fp
100059a4:	102d883a 	mov	r22,r2
100059a8:	0008be80 	call	10008be8 <__mdiff>
100059ac:	1007883a 	mov	r3,r2
100059b0:	10800317 	ldw	r2,12(r2)
100059b4:	bc800c04 	addi	r18,r23,48
100059b8:	180b883a 	mov	r5,r3
100059bc:	10004e1e 	bne	r2,zero,10005af8 <_dtoa_r+0xfac>
100059c0:	8009883a 	mov	r4,r16
100059c4:	d8c01615 	stw	r3,88(sp)
100059c8:	0008b880 	call	10008b88 <__mcmp>
100059cc:	d8c01617 	ldw	r3,88(sp)
100059d0:	e009883a 	mov	r4,fp
100059d4:	d8801615 	stw	r2,88(sp)
100059d8:	180b883a 	mov	r5,r3
100059dc:	00082ac0 	call	100082ac <_Bfree>
100059e0:	d8801617 	ldw	r2,88(sp)
100059e4:	1000041e 	bne	r2,zero,100059f8 <_dtoa_r+0xeac>
100059e8:	d9800317 	ldw	r6,12(sp)
100059ec:	3000021e 	bne	r6,zero,100059f8 <_dtoa_r+0xeac>
100059f0:	d8c00617 	ldw	r3,24(sp)
100059f4:	18003726 	beq	r3,zero,10005ad4 <_dtoa_r+0xf88>
100059f8:	b0002016 	blt	r22,zero,10005a7c <_dtoa_r+0xf30>
100059fc:	b000041e 	bne	r22,zero,10005a10 <_dtoa_r+0xec4>
10005a00:	d9000317 	ldw	r4,12(sp)
10005a04:	2000021e 	bne	r4,zero,10005a10 <_dtoa_r+0xec4>
10005a08:	d8c00617 	ldw	r3,24(sp)
10005a0c:	18001b26 	beq	r3,zero,10005a7c <_dtoa_r+0xf30>
10005a10:	00810716 	blt	zero,r2,10005e30 <_dtoa_r+0x12e4>
10005a14:	d8c00417 	ldw	r3,16(sp)
10005a18:	9d800044 	addi	r22,r19,1
10005a1c:	9c800005 	stb	r18,0(r19)
10005a20:	b02f883a 	mov	r23,r22
10005a24:	98c10626 	beq	r19,r3,10005e40 <_dtoa_r+0x12f4>
10005a28:	800b883a 	mov	r5,r16
10005a2c:	000f883a 	mov	r7,zero
10005a30:	01800284 	movi	r6,10
10005a34:	e009883a 	mov	r4,fp
10005a38:	00082d40 	call	100082d4 <__multadd>
10005a3c:	1021883a 	mov	r16,r2
10005a40:	000f883a 	mov	r7,zero
10005a44:	01800284 	movi	r6,10
10005a48:	880b883a 	mov	r5,r17
10005a4c:	e009883a 	mov	r4,fp
10005a50:	8d002526 	beq	r17,r20,10005ae8 <_dtoa_r+0xf9c>
10005a54:	00082d40 	call	100082d4 <__multadd>
10005a58:	a00b883a 	mov	r5,r20
10005a5c:	000f883a 	mov	r7,zero
10005a60:	01800284 	movi	r6,10
10005a64:	e009883a 	mov	r4,fp
10005a68:	1023883a 	mov	r17,r2
10005a6c:	00082d40 	call	100082d4 <__multadd>
10005a70:	1029883a 	mov	r20,r2
10005a74:	b027883a 	mov	r19,r22
10005a78:	003fc006 	br	1000597c <__alt_data_end+0xf800597c>
10005a7c:	9011883a 	mov	r8,r18
10005a80:	00800e0e 	bge	zero,r2,10005abc <_dtoa_r+0xf70>
10005a84:	800b883a 	mov	r5,r16
10005a88:	01800044 	movi	r6,1
10005a8c:	e009883a 	mov	r4,fp
10005a90:	da001715 	stw	r8,92(sp)
10005a94:	0008a400 	call	10008a40 <__lshift>
10005a98:	a80b883a 	mov	r5,r21
10005a9c:	1009883a 	mov	r4,r2
10005aa0:	1021883a 	mov	r16,r2
10005aa4:	0008b880 	call	10008b88 <__mcmp>
10005aa8:	da001717 	ldw	r8,92(sp)
10005aac:	0081960e 	bge	zero,r2,10006108 <_dtoa_r+0x15bc>
10005ab0:	00800e44 	movi	r2,57
10005ab4:	40817026 	beq	r8,r2,10006078 <_dtoa_r+0x152c>
10005ab8:	ba000c44 	addi	r8,r23,49
10005abc:	8825883a 	mov	r18,r17
10005ac0:	9dc00044 	addi	r23,r19,1
10005ac4:	9a000005 	stb	r8,0(r19)
10005ac8:	a023883a 	mov	r17,r20
10005acc:	dc000915 	stw	r16,36(sp)
10005ad0:	003f2406 	br	10005764 <__alt_data_end+0xf8005764>
10005ad4:	00800e44 	movi	r2,57
10005ad8:	9011883a 	mov	r8,r18
10005adc:	90816626 	beq	r18,r2,10006078 <_dtoa_r+0x152c>
10005ae0:	05bff516 	blt	zero,r22,10005ab8 <__alt_data_end+0xf8005ab8>
10005ae4:	003ff506 	br	10005abc <__alt_data_end+0xf8005abc>
10005ae8:	00082d40 	call	100082d4 <__multadd>
10005aec:	1023883a 	mov	r17,r2
10005af0:	1029883a 	mov	r20,r2
10005af4:	003fdf06 	br	10005a74 <__alt_data_end+0xf8005a74>
10005af8:	e009883a 	mov	r4,fp
10005afc:	00082ac0 	call	100082ac <_Bfree>
10005b00:	00800044 	movi	r2,1
10005b04:	003fbc06 	br	100059f8 <__alt_data_end+0xf80059f8>
10005b08:	a80b883a 	mov	r5,r21
10005b0c:	8009883a 	mov	r4,r16
10005b10:	0008b880 	call	10008b88 <__mcmp>
10005b14:	103edb0e 	bge	r2,zero,10005684 <__alt_data_end+0xf8005684>
10005b18:	800b883a 	mov	r5,r16
10005b1c:	000f883a 	mov	r7,zero
10005b20:	01800284 	movi	r6,10
10005b24:	e009883a 	mov	r4,fp
10005b28:	00082d40 	call	100082d4 <__multadd>
10005b2c:	1021883a 	mov	r16,r2
10005b30:	d8800517 	ldw	r2,20(sp)
10005b34:	d8c00b17 	ldw	r3,44(sp)
10005b38:	10bfffc4 	addi	r2,r2,-1
10005b3c:	d8800515 	stw	r2,20(sp)
10005b40:	183f761e 	bne	r3,zero,1000591c <__alt_data_end+0xf800591c>
10005b44:	d9000c17 	ldw	r4,48(sp)
10005b48:	0101730e 	bge	zero,r4,10006118 <_dtoa_r+0x15cc>
10005b4c:	d9000615 	stw	r4,24(sp)
10005b50:	003ed006 	br	10005694 <__alt_data_end+0xf8005694>
10005b54:	00800084 	movi	r2,2
10005b58:	3081861e 	bne	r6,r2,10006174 <_dtoa_r+0x1628>
10005b5c:	d8000b15 	stw	zero,44(sp)
10005b60:	003f3c06 	br	10005854 <__alt_data_end+0xf8005854>
10005b64:	dc000917 	ldw	r16,36(sp)
10005b68:	003e9206 	br	100055b4 <__alt_data_end+0xf80055b4>
10005b6c:	d9c00317 	ldw	r7,12(sp)
10005b70:	00800084 	movi	r2,2
10005b74:	11fec50e 	bge	r2,r7,1000568c <__alt_data_end+0xf800568c>
10005b78:	d9000617 	ldw	r4,24(sp)
10005b7c:	20013c1e 	bne	r4,zero,10006070 <_dtoa_r+0x1524>
10005b80:	a80b883a 	mov	r5,r21
10005b84:	000f883a 	mov	r7,zero
10005b88:	01800144 	movi	r6,5
10005b8c:	e009883a 	mov	r4,fp
10005b90:	00082d40 	call	100082d4 <__multadd>
10005b94:	100b883a 	mov	r5,r2
10005b98:	8009883a 	mov	r4,r16
10005b9c:	102b883a 	mov	r21,r2
10005ba0:	0008b880 	call	10008b88 <__mcmp>
10005ba4:	dc000915 	stw	r16,36(sp)
10005ba8:	00bf410e 	bge	zero,r2,100058b0 <__alt_data_end+0xf80058b0>
10005bac:	d9c00717 	ldw	r7,28(sp)
10005bb0:	00800c44 	movi	r2,49
10005bb4:	38800005 	stb	r2,0(r7)
10005bb8:	d8800517 	ldw	r2,20(sp)
10005bbc:	3dc00044 	addi	r23,r7,1
10005bc0:	10800044 	addi	r2,r2,1
10005bc4:	d8800515 	stw	r2,20(sp)
10005bc8:	003f3d06 	br	100058c0 <__alt_data_end+0xf80058c0>
10005bcc:	d9800517 	ldw	r6,20(sp)
10005bd0:	d9c00717 	ldw	r7,28(sp)
10005bd4:	00800c44 	movi	r2,49
10005bd8:	31800044 	addi	r6,r6,1
10005bdc:	d9800515 	stw	r6,20(sp)
10005be0:	38800005 	stb	r2,0(r7)
10005be4:	003edf06 	br	10005764 <__alt_data_end+0xf8005764>
10005be8:	d8000b15 	stw	zero,44(sp)
10005bec:	003c9f06 	br	10004e6c <__alt_data_end+0xf8004e6c>
10005bf0:	903e7e1e 	bne	r18,zero,100055ec <__alt_data_end+0xf80055ec>
10005bf4:	00800434 	movhi	r2,16
10005bf8:	10bfffc4 	addi	r2,r2,-1
10005bfc:	9884703a 	and	r2,r19,r2
10005c00:	1000ea1e 	bne	r2,zero,10005fac <_dtoa_r+0x1460>
10005c04:	9cdffc2c 	andhi	r19,r19,32752
10005c08:	9800e826 	beq	r19,zero,10005fac <_dtoa_r+0x1460>
10005c0c:	d9c00817 	ldw	r7,32(sp)
10005c10:	b5800044 	addi	r22,r22,1
10005c14:	04c00044 	movi	r19,1
10005c18:	39c00044 	addi	r7,r7,1
10005c1c:	d9c00815 	stw	r7,32(sp)
10005c20:	d8800d17 	ldw	r2,52(sp)
10005c24:	103e721e 	bne	r2,zero,100055f0 <__alt_data_end+0xf80055f0>
10005c28:	00800044 	movi	r2,1
10005c2c:	003e7906 	br	10005614 <__alt_data_end+0xf8005614>
10005c30:	8009883a 	mov	r4,r16
10005c34:	000ef9c0 	call	1000ef9c <__floatsidf>
10005c38:	d9800f17 	ldw	r6,60(sp)
10005c3c:	d9c01017 	ldw	r7,64(sp)
10005c40:	1009883a 	mov	r4,r2
10005c44:	180b883a 	mov	r5,r3
10005c48:	000ddb40 	call	1000ddb4 <__muldf3>
10005c4c:	000d883a 	mov	r6,zero
10005c50:	01d00734 	movhi	r7,16412
10005c54:	1009883a 	mov	r4,r2
10005c58:	180b883a 	mov	r5,r3
10005c5c:	000c8e00 	call	1000c8e0 <__adddf3>
10005c60:	047f3034 	movhi	r17,64704
10005c64:	1021883a 	mov	r16,r2
10005c68:	1c63883a 	add	r17,r3,r17
10005c6c:	d9000f17 	ldw	r4,60(sp)
10005c70:	d9401017 	ldw	r5,64(sp)
10005c74:	000d883a 	mov	r6,zero
10005c78:	01d00534 	movhi	r7,16404
10005c7c:	000e6200 	call	1000e620 <__subdf3>
10005c80:	800d883a 	mov	r6,r16
10005c84:	880f883a 	mov	r7,r17
10005c88:	1009883a 	mov	r4,r2
10005c8c:	180b883a 	mov	r5,r3
10005c90:	102b883a 	mov	r21,r2
10005c94:	1829883a 	mov	r20,r3
10005c98:	000dbe40 	call	1000dbe4 <__gedf2>
10005c9c:	00806c16 	blt	zero,r2,10005e50 <_dtoa_r+0x1304>
10005ca0:	89e0003c 	xorhi	r7,r17,32768
10005ca4:	800d883a 	mov	r6,r16
10005ca8:	a809883a 	mov	r4,r21
10005cac:	a00b883a 	mov	r5,r20
10005cb0:	000dcc00 	call	1000dcc0 <__ledf2>
10005cb4:	103d7e0e 	bge	r2,zero,100052b0 <__alt_data_end+0xf80052b0>
10005cb8:	002b883a 	mov	r21,zero
10005cbc:	0023883a 	mov	r17,zero
10005cc0:	003efb06 	br	100058b0 <__alt_data_end+0xf80058b0>
10005cc4:	d8800717 	ldw	r2,28(sp)
10005cc8:	003bd006 	br	10004c0c <__alt_data_end+0xf8004c0c>
10005ccc:	d9000a17 	ldw	r4,40(sp)
10005cd0:	d9800d17 	ldw	r6,52(sp)
10005cd4:	dd400a15 	stw	r21,40(sp)
10005cd8:	a905c83a 	sub	r2,r21,r4
10005cdc:	308d883a 	add	r6,r6,r2
10005ce0:	d9800d15 	stw	r6,52(sp)
10005ce4:	002b883a 	mov	r21,zero
10005ce8:	003e0606 	br	10005504 <__alt_data_end+0xf8005504>
10005cec:	9023883a 	mov	r17,r18
10005cf0:	9829883a 	mov	r20,r19
10005cf4:	04000084 	movi	r16,2
10005cf8:	003c9206 	br	10004f44 <__alt_data_end+0xf8004f44>
10005cfc:	04000044 	movi	r16,1
10005d00:	dc000c15 	stw	r16,48(sp)
10005d04:	dc000615 	stw	r16,24(sp)
10005d08:	dc002215 	stw	r16,136(sp)
10005d0c:	e0001115 	stw	zero,68(fp)
10005d10:	000b883a 	mov	r5,zero
10005d14:	003c6906 	br	10004ebc <__alt_data_end+0xf8004ebc>
10005d18:	3021883a 	mov	r16,r6
10005d1c:	003ffb06 	br	10005d0c <__alt_data_end+0xf8005d0c>
10005d20:	1000021e 	bne	r2,zero,10005d2c <_dtoa_r+0x11e0>
10005d24:	4200004c 	andi	r8,r8,1
10005d28:	403e7d1e 	bne	r8,zero,10005720 <__alt_data_end+0xf8005720>
10005d2c:	01000c04 	movi	r4,48
10005d30:	00000106 	br	10005d38 <_dtoa_r+0x11ec>
10005d34:	102f883a 	mov	r23,r2
10005d38:	b8bfffc4 	addi	r2,r23,-1
10005d3c:	10c00007 	ldb	r3,0(r2)
10005d40:	193ffc26 	beq	r3,r4,10005d34 <__alt_data_end+0xf8005d34>
10005d44:	003e8706 	br	10005764 <__alt_data_end+0xf8005764>
10005d48:	d8800517 	ldw	r2,20(sp)
10005d4c:	00a3c83a 	sub	r17,zero,r2
10005d50:	8800a426 	beq	r17,zero,10005fe4 <_dtoa_r+0x1498>
10005d54:	888003cc 	andi	r2,r17,15
10005d58:	100490fa 	slli	r2,r2,3
10005d5c:	00c40074 	movhi	r3,4097
10005d60:	18c88004 	addi	r3,r3,8704
10005d64:	1885883a 	add	r2,r3,r2
10005d68:	11800017 	ldw	r6,0(r2)
10005d6c:	11c00117 	ldw	r7,4(r2)
10005d70:	9009883a 	mov	r4,r18
10005d74:	980b883a 	mov	r5,r19
10005d78:	8823d13a 	srai	r17,r17,4
10005d7c:	000ddb40 	call	1000ddb4 <__muldf3>
10005d80:	d8800f15 	stw	r2,60(sp)
10005d84:	d8c01015 	stw	r3,64(sp)
10005d88:	8800e826 	beq	r17,zero,1000612c <_dtoa_r+0x15e0>
10005d8c:	05040074 	movhi	r20,4097
10005d90:	a5087604 	addi	r20,r20,8664
10005d94:	04000084 	movi	r16,2
10005d98:	8980004c 	andi	r6,r17,1
10005d9c:	1009883a 	mov	r4,r2
10005da0:	8823d07a 	srai	r17,r17,1
10005da4:	180b883a 	mov	r5,r3
10005da8:	30000426 	beq	r6,zero,10005dbc <_dtoa_r+0x1270>
10005dac:	a1800017 	ldw	r6,0(r20)
10005db0:	a1c00117 	ldw	r7,4(r20)
10005db4:	84000044 	addi	r16,r16,1
10005db8:	000ddb40 	call	1000ddb4 <__muldf3>
10005dbc:	a5000204 	addi	r20,r20,8
10005dc0:	883ff51e 	bne	r17,zero,10005d98 <__alt_data_end+0xf8005d98>
10005dc4:	d8800f15 	stw	r2,60(sp)
10005dc8:	d8c01015 	stw	r3,64(sp)
10005dcc:	003c7606 	br	10004fa8 <__alt_data_end+0xf8004fa8>
10005dd0:	00c00c04 	movi	r3,48
10005dd4:	10c00005 	stb	r3,0(r2)
10005dd8:	d8c00517 	ldw	r3,20(sp)
10005ddc:	bd3fffc3 	ldbu	r20,-1(r23)
10005de0:	18c00044 	addi	r3,r3,1
10005de4:	d8c00515 	stw	r3,20(sp)
10005de8:	003db906 	br	100054d0 <__alt_data_end+0xf80054d0>
10005dec:	89400117 	ldw	r5,4(r17)
10005df0:	e009883a 	mov	r4,fp
10005df4:	00082040 	call	10008204 <_Balloc>
10005df8:	89800417 	ldw	r6,16(r17)
10005dfc:	89400304 	addi	r5,r17,12
10005e00:	11000304 	addi	r4,r2,12
10005e04:	31800084 	addi	r6,r6,2
10005e08:	318d883a 	add	r6,r6,r6
10005e0c:	318d883a 	add	r6,r6,r6
10005e10:	1027883a 	mov	r19,r2
10005e14:	0007e380 	call	10007e38 <memcpy>
10005e18:	01800044 	movi	r6,1
10005e1c:	980b883a 	mov	r5,r19
10005e20:	e009883a 	mov	r4,fp
10005e24:	0008a400 	call	10008a40 <__lshift>
10005e28:	1029883a 	mov	r20,r2
10005e2c:	003ecc06 	br	10005960 <__alt_data_end+0xf8005960>
10005e30:	00800e44 	movi	r2,57
10005e34:	90809026 	beq	r18,r2,10006078 <_dtoa_r+0x152c>
10005e38:	92000044 	addi	r8,r18,1
10005e3c:	003f1f06 	br	10005abc <__alt_data_end+0xf8005abc>
10005e40:	9011883a 	mov	r8,r18
10005e44:	8825883a 	mov	r18,r17
10005e48:	a023883a 	mov	r17,r20
10005e4c:	003e2906 	br	100056f4 <__alt_data_end+0xf80056f4>
10005e50:	002b883a 	mov	r21,zero
10005e54:	0023883a 	mov	r17,zero
10005e58:	003f5406 	br	10005bac <__alt_data_end+0xf8005bac>
10005e5c:	61bfffc4 	addi	r6,r12,-1
10005e60:	300490fa 	slli	r2,r6,3
10005e64:	00c40074 	movhi	r3,4097
10005e68:	18c88004 	addi	r3,r3,8704
10005e6c:	1885883a 	add	r2,r3,r2
10005e70:	11000017 	ldw	r4,0(r2)
10005e74:	11400117 	ldw	r5,4(r2)
10005e78:	d8800717 	ldw	r2,28(sp)
10005e7c:	880f883a 	mov	r7,r17
10005e80:	d9801215 	stw	r6,72(sp)
10005e84:	800d883a 	mov	r6,r16
10005e88:	db001615 	stw	r12,88(sp)
10005e8c:	15c00044 	addi	r23,r2,1
10005e90:	000ddb40 	call	1000ddb4 <__muldf3>
10005e94:	d9401017 	ldw	r5,64(sp)
10005e98:	d9000f17 	ldw	r4,60(sp)
10005e9c:	d8c01515 	stw	r3,84(sp)
10005ea0:	d8801415 	stw	r2,80(sp)
10005ea4:	000ef1c0 	call	1000ef1c <__fixdfsi>
10005ea8:	1009883a 	mov	r4,r2
10005eac:	1021883a 	mov	r16,r2
10005eb0:	000ef9c0 	call	1000ef9c <__floatsidf>
10005eb4:	d9000f17 	ldw	r4,60(sp)
10005eb8:	d9401017 	ldw	r5,64(sp)
10005ebc:	100d883a 	mov	r6,r2
10005ec0:	180f883a 	mov	r7,r3
10005ec4:	000e6200 	call	1000e620 <__subdf3>
10005ec8:	1829883a 	mov	r20,r3
10005ecc:	d8c00717 	ldw	r3,28(sp)
10005ed0:	84000c04 	addi	r16,r16,48
10005ed4:	1023883a 	mov	r17,r2
10005ed8:	1c000005 	stb	r16,0(r3)
10005edc:	db001617 	ldw	r12,88(sp)
10005ee0:	00800044 	movi	r2,1
10005ee4:	60802226 	beq	r12,r2,10005f70 <_dtoa_r+0x1424>
10005ee8:	d9c00717 	ldw	r7,28(sp)
10005eec:	8805883a 	mov	r2,r17
10005ef0:	b82b883a 	mov	r21,r23
10005ef4:	3b19883a 	add	r12,r7,r12
10005ef8:	6023883a 	mov	r17,r12
10005efc:	a007883a 	mov	r3,r20
10005f00:	dc800f15 	stw	r18,60(sp)
10005f04:	000d883a 	mov	r6,zero
10005f08:	01d00934 	movhi	r7,16420
10005f0c:	1009883a 	mov	r4,r2
10005f10:	180b883a 	mov	r5,r3
10005f14:	000ddb40 	call	1000ddb4 <__muldf3>
10005f18:	180b883a 	mov	r5,r3
10005f1c:	1009883a 	mov	r4,r2
10005f20:	1829883a 	mov	r20,r3
10005f24:	1025883a 	mov	r18,r2
10005f28:	000ef1c0 	call	1000ef1c <__fixdfsi>
10005f2c:	1009883a 	mov	r4,r2
10005f30:	1021883a 	mov	r16,r2
10005f34:	000ef9c0 	call	1000ef9c <__floatsidf>
10005f38:	100d883a 	mov	r6,r2
10005f3c:	180f883a 	mov	r7,r3
10005f40:	9009883a 	mov	r4,r18
10005f44:	a00b883a 	mov	r5,r20
10005f48:	84000c04 	addi	r16,r16,48
10005f4c:	000e6200 	call	1000e620 <__subdf3>
10005f50:	ad400044 	addi	r21,r21,1
10005f54:	ac3fffc5 	stb	r16,-1(r21)
10005f58:	ac7fea1e 	bne	r21,r17,10005f04 <__alt_data_end+0xf8005f04>
10005f5c:	1023883a 	mov	r17,r2
10005f60:	d8801217 	ldw	r2,72(sp)
10005f64:	dc800f17 	ldw	r18,60(sp)
10005f68:	1829883a 	mov	r20,r3
10005f6c:	b8af883a 	add	r23,r23,r2
10005f70:	d9001417 	ldw	r4,80(sp)
10005f74:	d9401517 	ldw	r5,84(sp)
10005f78:	000d883a 	mov	r6,zero
10005f7c:	01cff834 	movhi	r7,16352
10005f80:	000c8e00 	call	1000c8e0 <__adddf3>
10005f84:	880d883a 	mov	r6,r17
10005f88:	a00f883a 	mov	r7,r20
10005f8c:	1009883a 	mov	r4,r2
10005f90:	180b883a 	mov	r5,r3
10005f94:	000dcc00 	call	1000dcc0 <__ledf2>
10005f98:	10003e0e 	bge	r2,zero,10006094 <_dtoa_r+0x1548>
10005f9c:	d9001317 	ldw	r4,76(sp)
10005fa0:	bd3fffc3 	ldbu	r20,-1(r23)
10005fa4:	d9000515 	stw	r4,20(sp)
10005fa8:	003d3b06 	br	10005498 <__alt_data_end+0xf8005498>
10005fac:	0027883a 	mov	r19,zero
10005fb0:	003f1b06 	br	10005c20 <__alt_data_end+0xf8005c20>
10005fb4:	d8800817 	ldw	r2,32(sp)
10005fb8:	11e9c83a 	sub	r20,r2,r7
10005fbc:	0005883a 	mov	r2,zero
10005fc0:	003d5406 	br	10005514 <__alt_data_end+0xf8005514>
10005fc4:	00800044 	movi	r2,1
10005fc8:	003dc706 	br	100056e8 <__alt_data_end+0xf80056e8>
10005fcc:	d8c00217 	ldw	r3,8(sp)
10005fd0:	00800d84 	movi	r2,54
10005fd4:	dd400a17 	ldw	r21,40(sp)
10005fd8:	10c5c83a 	sub	r2,r2,r3
10005fdc:	dd000817 	ldw	r20,32(sp)
10005fe0:	003d4c06 	br	10005514 <__alt_data_end+0xf8005514>
10005fe4:	dc800f15 	stw	r18,60(sp)
10005fe8:	dcc01015 	stw	r19,64(sp)
10005fec:	04000084 	movi	r16,2
10005ff0:	003bed06 	br	10004fa8 <__alt_data_end+0xf8004fa8>
10005ff4:	d9000617 	ldw	r4,24(sp)
10005ff8:	203f0d26 	beq	r4,zero,10005c30 <__alt_data_end+0xf8005c30>
10005ffc:	d9800c17 	ldw	r6,48(sp)
10006000:	01bcab0e 	bge	zero,r6,100052b0 <__alt_data_end+0xf80052b0>
10006004:	d9401017 	ldw	r5,64(sp)
10006008:	d9000f17 	ldw	r4,60(sp)
1000600c:	000d883a 	mov	r6,zero
10006010:	01d00934 	movhi	r7,16420
10006014:	000ddb40 	call	1000ddb4 <__muldf3>
10006018:	81000044 	addi	r4,r16,1
1000601c:	d8800f15 	stw	r2,60(sp)
10006020:	d8c01015 	stw	r3,64(sp)
10006024:	000ef9c0 	call	1000ef9c <__floatsidf>
10006028:	d9800f17 	ldw	r6,60(sp)
1000602c:	d9c01017 	ldw	r7,64(sp)
10006030:	1009883a 	mov	r4,r2
10006034:	180b883a 	mov	r5,r3
10006038:	000ddb40 	call	1000ddb4 <__muldf3>
1000603c:	01d00734 	movhi	r7,16412
10006040:	000d883a 	mov	r6,zero
10006044:	1009883a 	mov	r4,r2
10006048:	180b883a 	mov	r5,r3
1000604c:	000c8e00 	call	1000c8e0 <__adddf3>
10006050:	d9c00517 	ldw	r7,20(sp)
10006054:	047f3034 	movhi	r17,64704
10006058:	1021883a 	mov	r16,r2
1000605c:	39ffffc4 	addi	r7,r7,-1
10006060:	d9c01315 	stw	r7,76(sp)
10006064:	1c63883a 	add	r17,r3,r17
10006068:	db000c17 	ldw	r12,48(sp)
1000606c:	003bea06 	br	10005018 <__alt_data_end+0xf8005018>
10006070:	dc000915 	stw	r16,36(sp)
10006074:	003e0e06 	br	100058b0 <__alt_data_end+0xf80058b0>
10006078:	01000e44 	movi	r4,57
1000607c:	8825883a 	mov	r18,r17
10006080:	9dc00044 	addi	r23,r19,1
10006084:	99000005 	stb	r4,0(r19)
10006088:	a023883a 	mov	r17,r20
1000608c:	dc000915 	stw	r16,36(sp)
10006090:	003da406 	br	10005724 <__alt_data_end+0xf8005724>
10006094:	d9801417 	ldw	r6,80(sp)
10006098:	d9c01517 	ldw	r7,84(sp)
1000609c:	0009883a 	mov	r4,zero
100060a0:	014ff834 	movhi	r5,16352
100060a4:	000e6200 	call	1000e620 <__subdf3>
100060a8:	880d883a 	mov	r6,r17
100060ac:	a00f883a 	mov	r7,r20
100060b0:	1009883a 	mov	r4,r2
100060b4:	180b883a 	mov	r5,r3
100060b8:	000dbe40 	call	1000dbe4 <__gedf2>
100060bc:	00bc7c0e 	bge	zero,r2,100052b0 <__alt_data_end+0xf80052b0>
100060c0:	01000c04 	movi	r4,48
100060c4:	00000106 	br	100060cc <_dtoa_r+0x1580>
100060c8:	102f883a 	mov	r23,r2
100060cc:	b8bfffc4 	addi	r2,r23,-1
100060d0:	10c00007 	ldb	r3,0(r2)
100060d4:	193ffc26 	beq	r3,r4,100060c8 <__alt_data_end+0xf80060c8>
100060d8:	d9801317 	ldw	r6,76(sp)
100060dc:	d9800515 	stw	r6,20(sp)
100060e0:	003c4406 	br	100051f4 <__alt_data_end+0xf80051f4>
100060e4:	d9801317 	ldw	r6,76(sp)
100060e8:	d9800515 	stw	r6,20(sp)
100060ec:	003cea06 	br	10005498 <__alt_data_end+0xf8005498>
100060f0:	dd800f17 	ldw	r22,60(sp)
100060f4:	dcc01017 	ldw	r19,64(sp)
100060f8:	dc801217 	ldw	r18,72(sp)
100060fc:	003c6c06 	br	100052b0 <__alt_data_end+0xf80052b0>
10006100:	903e031e 	bne	r18,zero,10005910 <__alt_data_end+0xf8005910>
10006104:	003ebb06 	br	10005bf4 <__alt_data_end+0xf8005bf4>
10006108:	103e6c1e 	bne	r2,zero,10005abc <__alt_data_end+0xf8005abc>
1000610c:	4080004c 	andi	r2,r8,1
10006110:	103e6a26 	beq	r2,zero,10005abc <__alt_data_end+0xf8005abc>
10006114:	003e6606 	br	10005ab0 <__alt_data_end+0xf8005ab0>
10006118:	d8c00317 	ldw	r3,12(sp)
1000611c:	00800084 	movi	r2,2
10006120:	10c02916 	blt	r2,r3,100061c8 <_dtoa_r+0x167c>
10006124:	d9000c17 	ldw	r4,48(sp)
10006128:	003e8806 	br	10005b4c <__alt_data_end+0xf8005b4c>
1000612c:	04000084 	movi	r16,2
10006130:	003b9d06 	br	10004fa8 <__alt_data_end+0xf8004fa8>
10006134:	d9001317 	ldw	r4,76(sp)
10006138:	d9000515 	stw	r4,20(sp)
1000613c:	003cd606 	br	10005498 <__alt_data_end+0xf8005498>
10006140:	d8801317 	ldw	r2,76(sp)
10006144:	d8800515 	stw	r2,20(sp)
10006148:	003c2a06 	br	100051f4 <__alt_data_end+0xf80051f4>
1000614c:	d9800317 	ldw	r6,12(sp)
10006150:	00800084 	movi	r2,2
10006154:	11801516 	blt	r2,r6,100061ac <_dtoa_r+0x1660>
10006158:	d9c00c17 	ldw	r7,48(sp)
1000615c:	d9c00615 	stw	r7,24(sp)
10006160:	003df706 	br	10005940 <__alt_data_end+0xf8005940>
10006164:	193d3926 	beq	r3,r4,1000564c <__alt_data_end+0xf800564c>
10006168:	00c00f04 	movi	r3,60
1000616c:	1885c83a 	sub	r2,r3,r2
10006170:	003ddf06 	br	100058f0 <__alt_data_end+0xf80058f0>
10006174:	e009883a 	mov	r4,fp
10006178:	e0001115 	stw	zero,68(fp)
1000617c:	000b883a 	mov	r5,zero
10006180:	00082040 	call	10008204 <_Balloc>
10006184:	d8800715 	stw	r2,28(sp)
10006188:	d8c00717 	ldw	r3,28(sp)
1000618c:	00bfffc4 	movi	r2,-1
10006190:	01000044 	movi	r4,1
10006194:	d8800c15 	stw	r2,48(sp)
10006198:	e0c01015 	stw	r3,64(fp)
1000619c:	d9000b15 	stw	r4,44(sp)
100061a0:	d8800615 	stw	r2,24(sp)
100061a4:	d8002215 	stw	zero,136(sp)
100061a8:	003c4106 	br	100052b0 <__alt_data_end+0xf80052b0>
100061ac:	d8c00c17 	ldw	r3,48(sp)
100061b0:	d8c00615 	stw	r3,24(sp)
100061b4:	003e7006 	br	10005b78 <__alt_data_end+0xf8005b78>
100061b8:	04400044 	movi	r17,1
100061bc:	003b2006 	br	10004e40 <__alt_data_end+0xf8004e40>
100061c0:	000b883a 	mov	r5,zero
100061c4:	003b3d06 	br	10004ebc <__alt_data_end+0xf8004ebc>
100061c8:	d8800c17 	ldw	r2,48(sp)
100061cc:	d8800615 	stw	r2,24(sp)
100061d0:	003e6906 	br	10005b78 <__alt_data_end+0xf8005b78>

100061d4 <__sflush_r>:
100061d4:	2880030b 	ldhu	r2,12(r5)
100061d8:	defffb04 	addi	sp,sp,-20
100061dc:	dcc00315 	stw	r19,12(sp)
100061e0:	dc400115 	stw	r17,4(sp)
100061e4:	dfc00415 	stw	ra,16(sp)
100061e8:	dc800215 	stw	r18,8(sp)
100061ec:	dc000015 	stw	r16,0(sp)
100061f0:	10c0020c 	andi	r3,r2,8
100061f4:	2823883a 	mov	r17,r5
100061f8:	2027883a 	mov	r19,r4
100061fc:	1800311e 	bne	r3,zero,100062c4 <__sflush_r+0xf0>
10006200:	28c00117 	ldw	r3,4(r5)
10006204:	10820014 	ori	r2,r2,2048
10006208:	2880030d 	sth	r2,12(r5)
1000620c:	00c04b0e 	bge	zero,r3,1000633c <__sflush_r+0x168>
10006210:	8a000a17 	ldw	r8,40(r17)
10006214:	40002326 	beq	r8,zero,100062a4 <__sflush_r+0xd0>
10006218:	9c000017 	ldw	r16,0(r19)
1000621c:	10c4000c 	andi	r3,r2,4096
10006220:	98000015 	stw	zero,0(r19)
10006224:	18004826 	beq	r3,zero,10006348 <__sflush_r+0x174>
10006228:	89801417 	ldw	r6,80(r17)
1000622c:	10c0010c 	andi	r3,r2,4
10006230:	18000626 	beq	r3,zero,1000624c <__sflush_r+0x78>
10006234:	88c00117 	ldw	r3,4(r17)
10006238:	88800c17 	ldw	r2,48(r17)
1000623c:	30cdc83a 	sub	r6,r6,r3
10006240:	10000226 	beq	r2,zero,1000624c <__sflush_r+0x78>
10006244:	88800f17 	ldw	r2,60(r17)
10006248:	308dc83a 	sub	r6,r6,r2
1000624c:	89400717 	ldw	r5,28(r17)
10006250:	000f883a 	mov	r7,zero
10006254:	9809883a 	mov	r4,r19
10006258:	403ee83a 	callr	r8
1000625c:	00ffffc4 	movi	r3,-1
10006260:	10c04426 	beq	r2,r3,10006374 <__sflush_r+0x1a0>
10006264:	88c0030b 	ldhu	r3,12(r17)
10006268:	89000417 	ldw	r4,16(r17)
1000626c:	88000115 	stw	zero,4(r17)
10006270:	197dffcc 	andi	r5,r3,63487
10006274:	8940030d 	sth	r5,12(r17)
10006278:	89000015 	stw	r4,0(r17)
1000627c:	18c4000c 	andi	r3,r3,4096
10006280:	18002c1e 	bne	r3,zero,10006334 <__sflush_r+0x160>
10006284:	89400c17 	ldw	r5,48(r17)
10006288:	9c000015 	stw	r16,0(r19)
1000628c:	28000526 	beq	r5,zero,100062a4 <__sflush_r+0xd0>
10006290:	88801004 	addi	r2,r17,64
10006294:	28800226 	beq	r5,r2,100062a0 <__sflush_r+0xcc>
10006298:	9809883a 	mov	r4,r19
1000629c:	00069500 	call	10006950 <_free_r>
100062a0:	88000c15 	stw	zero,48(r17)
100062a4:	0005883a 	mov	r2,zero
100062a8:	dfc00417 	ldw	ra,16(sp)
100062ac:	dcc00317 	ldw	r19,12(sp)
100062b0:	dc800217 	ldw	r18,8(sp)
100062b4:	dc400117 	ldw	r17,4(sp)
100062b8:	dc000017 	ldw	r16,0(sp)
100062bc:	dec00504 	addi	sp,sp,20
100062c0:	f800283a 	ret
100062c4:	2c800417 	ldw	r18,16(r5)
100062c8:	903ff626 	beq	r18,zero,100062a4 <__alt_data_end+0xf80062a4>
100062cc:	2c000017 	ldw	r16,0(r5)
100062d0:	108000cc 	andi	r2,r2,3
100062d4:	2c800015 	stw	r18,0(r5)
100062d8:	84a1c83a 	sub	r16,r16,r18
100062dc:	1000131e 	bne	r2,zero,1000632c <__sflush_r+0x158>
100062e0:	28800517 	ldw	r2,20(r5)
100062e4:	88800215 	stw	r2,8(r17)
100062e8:	04000316 	blt	zero,r16,100062f8 <__sflush_r+0x124>
100062ec:	003fed06 	br	100062a4 <__alt_data_end+0xf80062a4>
100062f0:	90a5883a 	add	r18,r18,r2
100062f4:	043feb0e 	bge	zero,r16,100062a4 <__alt_data_end+0xf80062a4>
100062f8:	88800917 	ldw	r2,36(r17)
100062fc:	89400717 	ldw	r5,28(r17)
10006300:	800f883a 	mov	r7,r16
10006304:	900d883a 	mov	r6,r18
10006308:	9809883a 	mov	r4,r19
1000630c:	103ee83a 	callr	r2
10006310:	80a1c83a 	sub	r16,r16,r2
10006314:	00bff616 	blt	zero,r2,100062f0 <__alt_data_end+0xf80062f0>
10006318:	88c0030b 	ldhu	r3,12(r17)
1000631c:	00bfffc4 	movi	r2,-1
10006320:	18c01014 	ori	r3,r3,64
10006324:	88c0030d 	sth	r3,12(r17)
10006328:	003fdf06 	br	100062a8 <__alt_data_end+0xf80062a8>
1000632c:	0005883a 	mov	r2,zero
10006330:	003fec06 	br	100062e4 <__alt_data_end+0xf80062e4>
10006334:	88801415 	stw	r2,80(r17)
10006338:	003fd206 	br	10006284 <__alt_data_end+0xf8006284>
1000633c:	28c00f17 	ldw	r3,60(r5)
10006340:	00ffb316 	blt	zero,r3,10006210 <__alt_data_end+0xf8006210>
10006344:	003fd706 	br	100062a4 <__alt_data_end+0xf80062a4>
10006348:	89400717 	ldw	r5,28(r17)
1000634c:	000d883a 	mov	r6,zero
10006350:	01c00044 	movi	r7,1
10006354:	9809883a 	mov	r4,r19
10006358:	403ee83a 	callr	r8
1000635c:	100d883a 	mov	r6,r2
10006360:	00bfffc4 	movi	r2,-1
10006364:	30801426 	beq	r6,r2,100063b8 <__sflush_r+0x1e4>
10006368:	8880030b 	ldhu	r2,12(r17)
1000636c:	8a000a17 	ldw	r8,40(r17)
10006370:	003fae06 	br	1000622c <__alt_data_end+0xf800622c>
10006374:	98c00017 	ldw	r3,0(r19)
10006378:	183fba26 	beq	r3,zero,10006264 <__alt_data_end+0xf8006264>
1000637c:	01000744 	movi	r4,29
10006380:	19000626 	beq	r3,r4,1000639c <__sflush_r+0x1c8>
10006384:	01000584 	movi	r4,22
10006388:	19000426 	beq	r3,r4,1000639c <__sflush_r+0x1c8>
1000638c:	88c0030b 	ldhu	r3,12(r17)
10006390:	18c01014 	ori	r3,r3,64
10006394:	88c0030d 	sth	r3,12(r17)
10006398:	003fc306 	br	100062a8 <__alt_data_end+0xf80062a8>
1000639c:	8880030b 	ldhu	r2,12(r17)
100063a0:	88c00417 	ldw	r3,16(r17)
100063a4:	88000115 	stw	zero,4(r17)
100063a8:	10bdffcc 	andi	r2,r2,63487
100063ac:	8880030d 	sth	r2,12(r17)
100063b0:	88c00015 	stw	r3,0(r17)
100063b4:	003fb306 	br	10006284 <__alt_data_end+0xf8006284>
100063b8:	98800017 	ldw	r2,0(r19)
100063bc:	103fea26 	beq	r2,zero,10006368 <__alt_data_end+0xf8006368>
100063c0:	00c00744 	movi	r3,29
100063c4:	10c00226 	beq	r2,r3,100063d0 <__sflush_r+0x1fc>
100063c8:	00c00584 	movi	r3,22
100063cc:	10c0031e 	bne	r2,r3,100063dc <__sflush_r+0x208>
100063d0:	9c000015 	stw	r16,0(r19)
100063d4:	0005883a 	mov	r2,zero
100063d8:	003fb306 	br	100062a8 <__alt_data_end+0xf80062a8>
100063dc:	88c0030b 	ldhu	r3,12(r17)
100063e0:	3005883a 	mov	r2,r6
100063e4:	18c01014 	ori	r3,r3,64
100063e8:	88c0030d 	sth	r3,12(r17)
100063ec:	003fae06 	br	100062a8 <__alt_data_end+0xf80062a8>

100063f0 <_fflush_r>:
100063f0:	defffd04 	addi	sp,sp,-12
100063f4:	dc000115 	stw	r16,4(sp)
100063f8:	dfc00215 	stw	ra,8(sp)
100063fc:	2021883a 	mov	r16,r4
10006400:	20000226 	beq	r4,zero,1000640c <_fflush_r+0x1c>
10006404:	20800e17 	ldw	r2,56(r4)
10006408:	10000c26 	beq	r2,zero,1000643c <_fflush_r+0x4c>
1000640c:	2880030f 	ldh	r2,12(r5)
10006410:	1000051e 	bne	r2,zero,10006428 <_fflush_r+0x38>
10006414:	0005883a 	mov	r2,zero
10006418:	dfc00217 	ldw	ra,8(sp)
1000641c:	dc000117 	ldw	r16,4(sp)
10006420:	dec00304 	addi	sp,sp,12
10006424:	f800283a 	ret
10006428:	8009883a 	mov	r4,r16
1000642c:	dfc00217 	ldw	ra,8(sp)
10006430:	dc000117 	ldw	r16,4(sp)
10006434:	dec00304 	addi	sp,sp,12
10006438:	00061d41 	jmpi	100061d4 <__sflush_r>
1000643c:	d9400015 	stw	r5,0(sp)
10006440:	00067dc0 	call	100067dc <__sinit>
10006444:	d9400017 	ldw	r5,0(sp)
10006448:	003ff006 	br	1000640c <__alt_data_end+0xf800640c>

1000644c <fflush>:
1000644c:	20000526 	beq	r4,zero,10006464 <fflush+0x18>
10006450:	00840074 	movhi	r2,4097
10006454:	108fb304 	addi	r2,r2,16076
10006458:	200b883a 	mov	r5,r4
1000645c:	11000017 	ldw	r4,0(r2)
10006460:	00063f01 	jmpi	100063f0 <_fflush_r>
10006464:	00840074 	movhi	r2,4097
10006468:	108fb204 	addi	r2,r2,16072
1000646c:	11000017 	ldw	r4,0(r2)
10006470:	01440034 	movhi	r5,4096
10006474:	2958fc04 	addi	r5,r5,25584
10006478:	00071ec1 	jmpi	100071ec <_fwalk_reent>

1000647c <__fp_unlock>:
1000647c:	0005883a 	mov	r2,zero
10006480:	f800283a 	ret

10006484 <_cleanup_r>:
10006484:	01440074 	movhi	r5,4097
10006488:	296ce204 	addi	r5,r5,-19576
1000648c:	00071ec1 	jmpi	100071ec <_fwalk_reent>

10006490 <__sinit.part.1>:
10006490:	defff704 	addi	sp,sp,-36
10006494:	00c40034 	movhi	r3,4096
10006498:	dfc00815 	stw	ra,32(sp)
1000649c:	ddc00715 	stw	r23,28(sp)
100064a0:	dd800615 	stw	r22,24(sp)
100064a4:	dd400515 	stw	r21,20(sp)
100064a8:	dd000415 	stw	r20,16(sp)
100064ac:	dcc00315 	stw	r19,12(sp)
100064b0:	dc800215 	stw	r18,8(sp)
100064b4:	dc400115 	stw	r17,4(sp)
100064b8:	dc000015 	stw	r16,0(sp)
100064bc:	18d92104 	addi	r3,r3,25732
100064c0:	24000117 	ldw	r16,4(r4)
100064c4:	20c00f15 	stw	r3,60(r4)
100064c8:	2080bb04 	addi	r2,r4,748
100064cc:	00c000c4 	movi	r3,3
100064d0:	20c0b915 	stw	r3,740(r4)
100064d4:	2080ba15 	stw	r2,744(r4)
100064d8:	2000b815 	stw	zero,736(r4)
100064dc:	05c00204 	movi	r23,8
100064e0:	00800104 	movi	r2,4
100064e4:	2025883a 	mov	r18,r4
100064e8:	b80d883a 	mov	r6,r23
100064ec:	81001704 	addi	r4,r16,92
100064f0:	000b883a 	mov	r5,zero
100064f4:	80000015 	stw	zero,0(r16)
100064f8:	80000115 	stw	zero,4(r16)
100064fc:	80000215 	stw	zero,8(r16)
10006500:	8080030d 	sth	r2,12(r16)
10006504:	80001915 	stw	zero,100(r16)
10006508:	8000038d 	sth	zero,14(r16)
1000650c:	80000415 	stw	zero,16(r16)
10006510:	80000515 	stw	zero,20(r16)
10006514:	80000615 	stw	zero,24(r16)
10006518:	00080dc0 	call	100080dc <memset>
1000651c:	05840074 	movhi	r22,4097
10006520:	94400217 	ldw	r17,8(r18)
10006524:	05440074 	movhi	r21,4097
10006528:	05040074 	movhi	r20,4097
1000652c:	04c40074 	movhi	r19,4097
10006530:	b5a63a04 	addi	r22,r22,-26392
10006534:	ad665104 	addi	r21,r21,-26300
10006538:	a5267004 	addi	r20,r20,-26176
1000653c:	9ce68704 	addi	r19,r19,-26084
10006540:	85800815 	stw	r22,32(r16)
10006544:	85400915 	stw	r21,36(r16)
10006548:	85000a15 	stw	r20,40(r16)
1000654c:	84c00b15 	stw	r19,44(r16)
10006550:	84000715 	stw	r16,28(r16)
10006554:	00800284 	movi	r2,10
10006558:	8880030d 	sth	r2,12(r17)
1000655c:	00800044 	movi	r2,1
10006560:	b80d883a 	mov	r6,r23
10006564:	89001704 	addi	r4,r17,92
10006568:	000b883a 	mov	r5,zero
1000656c:	88000015 	stw	zero,0(r17)
10006570:	88000115 	stw	zero,4(r17)
10006574:	88000215 	stw	zero,8(r17)
10006578:	88001915 	stw	zero,100(r17)
1000657c:	8880038d 	sth	r2,14(r17)
10006580:	88000415 	stw	zero,16(r17)
10006584:	88000515 	stw	zero,20(r17)
10006588:	88000615 	stw	zero,24(r17)
1000658c:	00080dc0 	call	100080dc <memset>
10006590:	94000317 	ldw	r16,12(r18)
10006594:	00800484 	movi	r2,18
10006598:	8c400715 	stw	r17,28(r17)
1000659c:	8d800815 	stw	r22,32(r17)
100065a0:	8d400915 	stw	r21,36(r17)
100065a4:	8d000a15 	stw	r20,40(r17)
100065a8:	8cc00b15 	stw	r19,44(r17)
100065ac:	8080030d 	sth	r2,12(r16)
100065b0:	00800084 	movi	r2,2
100065b4:	80000015 	stw	zero,0(r16)
100065b8:	80000115 	stw	zero,4(r16)
100065bc:	80000215 	stw	zero,8(r16)
100065c0:	80001915 	stw	zero,100(r16)
100065c4:	8080038d 	sth	r2,14(r16)
100065c8:	80000415 	stw	zero,16(r16)
100065cc:	80000515 	stw	zero,20(r16)
100065d0:	80000615 	stw	zero,24(r16)
100065d4:	b80d883a 	mov	r6,r23
100065d8:	000b883a 	mov	r5,zero
100065dc:	81001704 	addi	r4,r16,92
100065e0:	00080dc0 	call	100080dc <memset>
100065e4:	00800044 	movi	r2,1
100065e8:	84000715 	stw	r16,28(r16)
100065ec:	85800815 	stw	r22,32(r16)
100065f0:	85400915 	stw	r21,36(r16)
100065f4:	85000a15 	stw	r20,40(r16)
100065f8:	84c00b15 	stw	r19,44(r16)
100065fc:	90800e15 	stw	r2,56(r18)
10006600:	dfc00817 	ldw	ra,32(sp)
10006604:	ddc00717 	ldw	r23,28(sp)
10006608:	dd800617 	ldw	r22,24(sp)
1000660c:	dd400517 	ldw	r21,20(sp)
10006610:	dd000417 	ldw	r20,16(sp)
10006614:	dcc00317 	ldw	r19,12(sp)
10006618:	dc800217 	ldw	r18,8(sp)
1000661c:	dc400117 	ldw	r17,4(sp)
10006620:	dc000017 	ldw	r16,0(sp)
10006624:	dec00904 	addi	sp,sp,36
10006628:	f800283a 	ret

1000662c <__fp_lock>:
1000662c:	0005883a 	mov	r2,zero
10006630:	f800283a 	ret

10006634 <__sfmoreglue>:
10006634:	defffc04 	addi	sp,sp,-16
10006638:	dc800215 	stw	r18,8(sp)
1000663c:	2825883a 	mov	r18,r5
10006640:	dc000015 	stw	r16,0(sp)
10006644:	01401a04 	movi	r5,104
10006648:	2021883a 	mov	r16,r4
1000664c:	913fffc4 	addi	r4,r18,-1
10006650:	dfc00315 	stw	ra,12(sp)
10006654:	dc400115 	stw	r17,4(sp)
10006658:	000c8b80 	call	1000c8b8 <__mulsi3>
1000665c:	8009883a 	mov	r4,r16
10006660:	11401d04 	addi	r5,r2,116
10006664:	1023883a 	mov	r17,r2
10006668:	00075480 	call	10007548 <_malloc_r>
1000666c:	1021883a 	mov	r16,r2
10006670:	10000726 	beq	r2,zero,10006690 <__sfmoreglue+0x5c>
10006674:	11000304 	addi	r4,r2,12
10006678:	10000015 	stw	zero,0(r2)
1000667c:	14800115 	stw	r18,4(r2)
10006680:	11000215 	stw	r4,8(r2)
10006684:	89801a04 	addi	r6,r17,104
10006688:	000b883a 	mov	r5,zero
1000668c:	00080dc0 	call	100080dc <memset>
10006690:	8005883a 	mov	r2,r16
10006694:	dfc00317 	ldw	ra,12(sp)
10006698:	dc800217 	ldw	r18,8(sp)
1000669c:	dc400117 	ldw	r17,4(sp)
100066a0:	dc000017 	ldw	r16,0(sp)
100066a4:	dec00404 	addi	sp,sp,16
100066a8:	f800283a 	ret

100066ac <__sfp>:
100066ac:	defffb04 	addi	sp,sp,-20
100066b0:	dc000015 	stw	r16,0(sp)
100066b4:	04040074 	movhi	r16,4097
100066b8:	840fb204 	addi	r16,r16,16072
100066bc:	dcc00315 	stw	r19,12(sp)
100066c0:	2027883a 	mov	r19,r4
100066c4:	81000017 	ldw	r4,0(r16)
100066c8:	dfc00415 	stw	ra,16(sp)
100066cc:	dc800215 	stw	r18,8(sp)
100066d0:	20800e17 	ldw	r2,56(r4)
100066d4:	dc400115 	stw	r17,4(sp)
100066d8:	1000021e 	bne	r2,zero,100066e4 <__sfp+0x38>
100066dc:	00064900 	call	10006490 <__sinit.part.1>
100066e0:	81000017 	ldw	r4,0(r16)
100066e4:	2480b804 	addi	r18,r4,736
100066e8:	047fffc4 	movi	r17,-1
100066ec:	91000117 	ldw	r4,4(r18)
100066f0:	94000217 	ldw	r16,8(r18)
100066f4:	213fffc4 	addi	r4,r4,-1
100066f8:	20000a16 	blt	r4,zero,10006724 <__sfp+0x78>
100066fc:	8080030f 	ldh	r2,12(r16)
10006700:	10000c26 	beq	r2,zero,10006734 <__sfp+0x88>
10006704:	80c01d04 	addi	r3,r16,116
10006708:	00000206 	br	10006714 <__sfp+0x68>
1000670c:	18bfe60f 	ldh	r2,-104(r3)
10006710:	10000826 	beq	r2,zero,10006734 <__sfp+0x88>
10006714:	213fffc4 	addi	r4,r4,-1
10006718:	1c3ffd04 	addi	r16,r3,-12
1000671c:	18c01a04 	addi	r3,r3,104
10006720:	247ffa1e 	bne	r4,r17,1000670c <__alt_data_end+0xf800670c>
10006724:	90800017 	ldw	r2,0(r18)
10006728:	10001d26 	beq	r2,zero,100067a0 <__sfp+0xf4>
1000672c:	1025883a 	mov	r18,r2
10006730:	003fee06 	br	100066ec <__alt_data_end+0xf80066ec>
10006734:	00bfffc4 	movi	r2,-1
10006738:	8080038d 	sth	r2,14(r16)
1000673c:	00800044 	movi	r2,1
10006740:	8080030d 	sth	r2,12(r16)
10006744:	80001915 	stw	zero,100(r16)
10006748:	80000015 	stw	zero,0(r16)
1000674c:	80000215 	stw	zero,8(r16)
10006750:	80000115 	stw	zero,4(r16)
10006754:	80000415 	stw	zero,16(r16)
10006758:	80000515 	stw	zero,20(r16)
1000675c:	80000615 	stw	zero,24(r16)
10006760:	01800204 	movi	r6,8
10006764:	000b883a 	mov	r5,zero
10006768:	81001704 	addi	r4,r16,92
1000676c:	00080dc0 	call	100080dc <memset>
10006770:	8005883a 	mov	r2,r16
10006774:	80000c15 	stw	zero,48(r16)
10006778:	80000d15 	stw	zero,52(r16)
1000677c:	80001115 	stw	zero,68(r16)
10006780:	80001215 	stw	zero,72(r16)
10006784:	dfc00417 	ldw	ra,16(sp)
10006788:	dcc00317 	ldw	r19,12(sp)
1000678c:	dc800217 	ldw	r18,8(sp)
10006790:	dc400117 	ldw	r17,4(sp)
10006794:	dc000017 	ldw	r16,0(sp)
10006798:	dec00504 	addi	sp,sp,20
1000679c:	f800283a 	ret
100067a0:	01400104 	movi	r5,4
100067a4:	9809883a 	mov	r4,r19
100067a8:	00066340 	call	10006634 <__sfmoreglue>
100067ac:	90800015 	stw	r2,0(r18)
100067b0:	103fde1e 	bne	r2,zero,1000672c <__alt_data_end+0xf800672c>
100067b4:	00800304 	movi	r2,12
100067b8:	98800015 	stw	r2,0(r19)
100067bc:	0005883a 	mov	r2,zero
100067c0:	003ff006 	br	10006784 <__alt_data_end+0xf8006784>

100067c4 <_cleanup>:
100067c4:	00840074 	movhi	r2,4097
100067c8:	108fb204 	addi	r2,r2,16072
100067cc:	11000017 	ldw	r4,0(r2)
100067d0:	01440074 	movhi	r5,4097
100067d4:	296ce204 	addi	r5,r5,-19576
100067d8:	00071ec1 	jmpi	100071ec <_fwalk_reent>

100067dc <__sinit>:
100067dc:	20800e17 	ldw	r2,56(r4)
100067e0:	10000126 	beq	r2,zero,100067e8 <__sinit+0xc>
100067e4:	f800283a 	ret
100067e8:	00064901 	jmpi	10006490 <__sinit.part.1>

100067ec <__sfp_lock_acquire>:
100067ec:	f800283a 	ret

100067f0 <__sfp_lock_release>:
100067f0:	f800283a 	ret

100067f4 <__sinit_lock_acquire>:
100067f4:	f800283a 	ret

100067f8 <__sinit_lock_release>:
100067f8:	f800283a 	ret

100067fc <__fp_lock_all>:
100067fc:	00840074 	movhi	r2,4097
10006800:	108fb304 	addi	r2,r2,16076
10006804:	11000017 	ldw	r4,0(r2)
10006808:	01440034 	movhi	r5,4096
1000680c:	29598b04 	addi	r5,r5,26156
10006810:	00071281 	jmpi	10007128 <_fwalk>

10006814 <__fp_unlock_all>:
10006814:	00840074 	movhi	r2,4097
10006818:	108fb304 	addi	r2,r2,16076
1000681c:	11000017 	ldw	r4,0(r2)
10006820:	01440034 	movhi	r5,4096
10006824:	29591f04 	addi	r5,r5,25724
10006828:	00071281 	jmpi	10007128 <_fwalk>

1000682c <_malloc_trim_r>:
1000682c:	defffb04 	addi	sp,sp,-20
10006830:	dcc00315 	stw	r19,12(sp)
10006834:	04c40074 	movhi	r19,4097
10006838:	dc800215 	stw	r18,8(sp)
1000683c:	dc400115 	stw	r17,4(sp)
10006840:	dc000015 	stw	r16,0(sp)
10006844:	dfc00415 	stw	ra,16(sp)
10006848:	2821883a 	mov	r16,r5
1000684c:	9cca2e04 	addi	r19,r19,10424
10006850:	2025883a 	mov	r18,r4
10006854:	000f7200 	call	1000f720 <__malloc_lock>
10006858:	98800217 	ldw	r2,8(r19)
1000685c:	14400117 	ldw	r17,4(r2)
10006860:	00bfff04 	movi	r2,-4
10006864:	88a2703a 	and	r17,r17,r2
10006868:	8c21c83a 	sub	r16,r17,r16
1000686c:	8403fbc4 	addi	r16,r16,4079
10006870:	8020d33a 	srli	r16,r16,12
10006874:	0083ffc4 	movi	r2,4095
10006878:	843fffc4 	addi	r16,r16,-1
1000687c:	8020933a 	slli	r16,r16,12
10006880:	1400060e 	bge	r2,r16,1000689c <_malloc_trim_r+0x70>
10006884:	000b883a 	mov	r5,zero
10006888:	9009883a 	mov	r4,r18
1000688c:	00098940 	call	10009894 <_sbrk_r>
10006890:	98c00217 	ldw	r3,8(r19)
10006894:	1c47883a 	add	r3,r3,r17
10006898:	10c00a26 	beq	r2,r3,100068c4 <_malloc_trim_r+0x98>
1000689c:	9009883a 	mov	r4,r18
100068a0:	000f7440 	call	1000f744 <__malloc_unlock>
100068a4:	0005883a 	mov	r2,zero
100068a8:	dfc00417 	ldw	ra,16(sp)
100068ac:	dcc00317 	ldw	r19,12(sp)
100068b0:	dc800217 	ldw	r18,8(sp)
100068b4:	dc400117 	ldw	r17,4(sp)
100068b8:	dc000017 	ldw	r16,0(sp)
100068bc:	dec00504 	addi	sp,sp,20
100068c0:	f800283a 	ret
100068c4:	040bc83a 	sub	r5,zero,r16
100068c8:	9009883a 	mov	r4,r18
100068cc:	00098940 	call	10009894 <_sbrk_r>
100068d0:	00ffffc4 	movi	r3,-1
100068d4:	10c00d26 	beq	r2,r3,1000690c <_malloc_trim_r+0xe0>
100068d8:	00c40074 	movhi	r3,4097
100068dc:	18d68c04 	addi	r3,r3,23088
100068e0:	18800017 	ldw	r2,0(r3)
100068e4:	99000217 	ldw	r4,8(r19)
100068e8:	8c23c83a 	sub	r17,r17,r16
100068ec:	8c400054 	ori	r17,r17,1
100068f0:	1421c83a 	sub	r16,r2,r16
100068f4:	24400115 	stw	r17,4(r4)
100068f8:	9009883a 	mov	r4,r18
100068fc:	1c000015 	stw	r16,0(r3)
10006900:	000f7440 	call	1000f744 <__malloc_unlock>
10006904:	00800044 	movi	r2,1
10006908:	003fe706 	br	100068a8 <__alt_data_end+0xf80068a8>
1000690c:	000b883a 	mov	r5,zero
10006910:	9009883a 	mov	r4,r18
10006914:	00098940 	call	10009894 <_sbrk_r>
10006918:	99000217 	ldw	r4,8(r19)
1000691c:	014003c4 	movi	r5,15
10006920:	1107c83a 	sub	r3,r2,r4
10006924:	28ffdd0e 	bge	r5,r3,1000689c <__alt_data_end+0xf800689c>
10006928:	01440074 	movhi	r5,4097
1000692c:	294fb504 	addi	r5,r5,16084
10006930:	29400017 	ldw	r5,0(r5)
10006934:	18c00054 	ori	r3,r3,1
10006938:	20c00115 	stw	r3,4(r4)
1000693c:	00c40074 	movhi	r3,4097
10006940:	1145c83a 	sub	r2,r2,r5
10006944:	18d68c04 	addi	r3,r3,23088
10006948:	18800015 	stw	r2,0(r3)
1000694c:	003fd306 	br	1000689c <__alt_data_end+0xf800689c>

10006950 <_free_r>:
10006950:	28004126 	beq	r5,zero,10006a58 <_free_r+0x108>
10006954:	defffd04 	addi	sp,sp,-12
10006958:	dc400115 	stw	r17,4(sp)
1000695c:	dc000015 	stw	r16,0(sp)
10006960:	2023883a 	mov	r17,r4
10006964:	2821883a 	mov	r16,r5
10006968:	dfc00215 	stw	ra,8(sp)
1000696c:	000f7200 	call	1000f720 <__malloc_lock>
10006970:	81ffff17 	ldw	r7,-4(r16)
10006974:	00bfff84 	movi	r2,-2
10006978:	01040074 	movhi	r4,4097
1000697c:	81bffe04 	addi	r6,r16,-8
10006980:	3884703a 	and	r2,r7,r2
10006984:	210a2e04 	addi	r4,r4,10424
10006988:	308b883a 	add	r5,r6,r2
1000698c:	2a400117 	ldw	r9,4(r5)
10006990:	22000217 	ldw	r8,8(r4)
10006994:	00ffff04 	movi	r3,-4
10006998:	48c6703a 	and	r3,r9,r3
1000699c:	2a005726 	beq	r5,r8,10006afc <_free_r+0x1ac>
100069a0:	28c00115 	stw	r3,4(r5)
100069a4:	39c0004c 	andi	r7,r7,1
100069a8:	3800091e 	bne	r7,zero,100069d0 <_free_r+0x80>
100069ac:	823ffe17 	ldw	r8,-8(r16)
100069b0:	22400204 	addi	r9,r4,8
100069b4:	320dc83a 	sub	r6,r6,r8
100069b8:	31c00217 	ldw	r7,8(r6)
100069bc:	1205883a 	add	r2,r2,r8
100069c0:	3a406526 	beq	r7,r9,10006b58 <_free_r+0x208>
100069c4:	32000317 	ldw	r8,12(r6)
100069c8:	3a000315 	stw	r8,12(r7)
100069cc:	41c00215 	stw	r7,8(r8)
100069d0:	28cf883a 	add	r7,r5,r3
100069d4:	39c00117 	ldw	r7,4(r7)
100069d8:	39c0004c 	andi	r7,r7,1
100069dc:	38003a26 	beq	r7,zero,10006ac8 <_free_r+0x178>
100069e0:	10c00054 	ori	r3,r2,1
100069e4:	30c00115 	stw	r3,4(r6)
100069e8:	3087883a 	add	r3,r6,r2
100069ec:	18800015 	stw	r2,0(r3)
100069f0:	00c07fc4 	movi	r3,511
100069f4:	18801936 	bltu	r3,r2,10006a5c <_free_r+0x10c>
100069f8:	1004d0fa 	srli	r2,r2,3
100069fc:	01c00044 	movi	r7,1
10006a00:	21400117 	ldw	r5,4(r4)
10006a04:	10c00044 	addi	r3,r2,1
10006a08:	18c7883a 	add	r3,r3,r3
10006a0c:	1005d0ba 	srai	r2,r2,2
10006a10:	18c7883a 	add	r3,r3,r3
10006a14:	18c7883a 	add	r3,r3,r3
10006a18:	1907883a 	add	r3,r3,r4
10006a1c:	3884983a 	sll	r2,r7,r2
10006a20:	19c00017 	ldw	r7,0(r3)
10006a24:	1a3ffe04 	addi	r8,r3,-8
10006a28:	1144b03a 	or	r2,r2,r5
10006a2c:	32000315 	stw	r8,12(r6)
10006a30:	31c00215 	stw	r7,8(r6)
10006a34:	20800115 	stw	r2,4(r4)
10006a38:	19800015 	stw	r6,0(r3)
10006a3c:	39800315 	stw	r6,12(r7)
10006a40:	8809883a 	mov	r4,r17
10006a44:	dfc00217 	ldw	ra,8(sp)
10006a48:	dc400117 	ldw	r17,4(sp)
10006a4c:	dc000017 	ldw	r16,0(sp)
10006a50:	dec00304 	addi	sp,sp,12
10006a54:	000f7441 	jmpi	1000f744 <__malloc_unlock>
10006a58:	f800283a 	ret
10006a5c:	100ad27a 	srli	r5,r2,9
10006a60:	00c00104 	movi	r3,4
10006a64:	19404a36 	bltu	r3,r5,10006b90 <_free_r+0x240>
10006a68:	100ad1ba 	srli	r5,r2,6
10006a6c:	28c00e44 	addi	r3,r5,57
10006a70:	18c7883a 	add	r3,r3,r3
10006a74:	29400e04 	addi	r5,r5,56
10006a78:	18c7883a 	add	r3,r3,r3
10006a7c:	18c7883a 	add	r3,r3,r3
10006a80:	1909883a 	add	r4,r3,r4
10006a84:	20c00017 	ldw	r3,0(r4)
10006a88:	01c40074 	movhi	r7,4097
10006a8c:	213ffe04 	addi	r4,r4,-8
10006a90:	39ca2e04 	addi	r7,r7,10424
10006a94:	20c04426 	beq	r4,r3,10006ba8 <_free_r+0x258>
10006a98:	01ffff04 	movi	r7,-4
10006a9c:	19400117 	ldw	r5,4(r3)
10006aa0:	29ca703a 	and	r5,r5,r7
10006aa4:	1140022e 	bgeu	r2,r5,10006ab0 <_free_r+0x160>
10006aa8:	18c00217 	ldw	r3,8(r3)
10006aac:	20fffb1e 	bne	r4,r3,10006a9c <__alt_data_end+0xf8006a9c>
10006ab0:	19000317 	ldw	r4,12(r3)
10006ab4:	31000315 	stw	r4,12(r6)
10006ab8:	30c00215 	stw	r3,8(r6)
10006abc:	21800215 	stw	r6,8(r4)
10006ac0:	19800315 	stw	r6,12(r3)
10006ac4:	003fde06 	br	10006a40 <__alt_data_end+0xf8006a40>
10006ac8:	29c00217 	ldw	r7,8(r5)
10006acc:	10c5883a 	add	r2,r2,r3
10006ad0:	00c40074 	movhi	r3,4097
10006ad4:	18ca3004 	addi	r3,r3,10432
10006ad8:	38c03b26 	beq	r7,r3,10006bc8 <_free_r+0x278>
10006adc:	2a000317 	ldw	r8,12(r5)
10006ae0:	11400054 	ori	r5,r2,1
10006ae4:	3087883a 	add	r3,r6,r2
10006ae8:	3a000315 	stw	r8,12(r7)
10006aec:	41c00215 	stw	r7,8(r8)
10006af0:	31400115 	stw	r5,4(r6)
10006af4:	18800015 	stw	r2,0(r3)
10006af8:	003fbd06 	br	100069f0 <__alt_data_end+0xf80069f0>
10006afc:	39c0004c 	andi	r7,r7,1
10006b00:	10c5883a 	add	r2,r2,r3
10006b04:	3800071e 	bne	r7,zero,10006b24 <_free_r+0x1d4>
10006b08:	81fffe17 	ldw	r7,-8(r16)
10006b0c:	31cdc83a 	sub	r6,r6,r7
10006b10:	30c00317 	ldw	r3,12(r6)
10006b14:	31400217 	ldw	r5,8(r6)
10006b18:	11c5883a 	add	r2,r2,r7
10006b1c:	28c00315 	stw	r3,12(r5)
10006b20:	19400215 	stw	r5,8(r3)
10006b24:	10c00054 	ori	r3,r2,1
10006b28:	30c00115 	stw	r3,4(r6)
10006b2c:	00c40074 	movhi	r3,4097
10006b30:	18cfb604 	addi	r3,r3,16088
10006b34:	18c00017 	ldw	r3,0(r3)
10006b38:	21800215 	stw	r6,8(r4)
10006b3c:	10ffc036 	bltu	r2,r3,10006a40 <__alt_data_end+0xf8006a40>
10006b40:	00840074 	movhi	r2,4097
10006b44:	10968304 	addi	r2,r2,23052
10006b48:	11400017 	ldw	r5,0(r2)
10006b4c:	8809883a 	mov	r4,r17
10006b50:	000682c0 	call	1000682c <_malloc_trim_r>
10006b54:	003fba06 	br	10006a40 <__alt_data_end+0xf8006a40>
10006b58:	28c9883a 	add	r4,r5,r3
10006b5c:	21000117 	ldw	r4,4(r4)
10006b60:	2100004c 	andi	r4,r4,1
10006b64:	2000391e 	bne	r4,zero,10006c4c <_free_r+0x2fc>
10006b68:	29c00217 	ldw	r7,8(r5)
10006b6c:	29000317 	ldw	r4,12(r5)
10006b70:	1885883a 	add	r2,r3,r2
10006b74:	10c00054 	ori	r3,r2,1
10006b78:	39000315 	stw	r4,12(r7)
10006b7c:	21c00215 	stw	r7,8(r4)
10006b80:	30c00115 	stw	r3,4(r6)
10006b84:	308d883a 	add	r6,r6,r2
10006b88:	30800015 	stw	r2,0(r6)
10006b8c:	003fac06 	br	10006a40 <__alt_data_end+0xf8006a40>
10006b90:	00c00504 	movi	r3,20
10006b94:	19401536 	bltu	r3,r5,10006bec <_free_r+0x29c>
10006b98:	28c01704 	addi	r3,r5,92
10006b9c:	18c7883a 	add	r3,r3,r3
10006ba0:	294016c4 	addi	r5,r5,91
10006ba4:	003fb406 	br	10006a78 <__alt_data_end+0xf8006a78>
10006ba8:	280bd0ba 	srai	r5,r5,2
10006bac:	00c00044 	movi	r3,1
10006bb0:	38800117 	ldw	r2,4(r7)
10006bb4:	194a983a 	sll	r5,r3,r5
10006bb8:	2007883a 	mov	r3,r4
10006bbc:	2884b03a 	or	r2,r5,r2
10006bc0:	38800115 	stw	r2,4(r7)
10006bc4:	003fbb06 	br	10006ab4 <__alt_data_end+0xf8006ab4>
10006bc8:	21800515 	stw	r6,20(r4)
10006bcc:	21800415 	stw	r6,16(r4)
10006bd0:	10c00054 	ori	r3,r2,1
10006bd4:	31c00315 	stw	r7,12(r6)
10006bd8:	31c00215 	stw	r7,8(r6)
10006bdc:	30c00115 	stw	r3,4(r6)
10006be0:	308d883a 	add	r6,r6,r2
10006be4:	30800015 	stw	r2,0(r6)
10006be8:	003f9506 	br	10006a40 <__alt_data_end+0xf8006a40>
10006bec:	00c01504 	movi	r3,84
10006bf0:	19400536 	bltu	r3,r5,10006c08 <_free_r+0x2b8>
10006bf4:	100ad33a 	srli	r5,r2,12
10006bf8:	28c01bc4 	addi	r3,r5,111
10006bfc:	18c7883a 	add	r3,r3,r3
10006c00:	29401b84 	addi	r5,r5,110
10006c04:	003f9c06 	br	10006a78 <__alt_data_end+0xf8006a78>
10006c08:	00c05504 	movi	r3,340
10006c0c:	19400536 	bltu	r3,r5,10006c24 <_free_r+0x2d4>
10006c10:	100ad3fa 	srli	r5,r2,15
10006c14:	28c01e04 	addi	r3,r5,120
10006c18:	18c7883a 	add	r3,r3,r3
10006c1c:	29401dc4 	addi	r5,r5,119
10006c20:	003f9506 	br	10006a78 <__alt_data_end+0xf8006a78>
10006c24:	00c15504 	movi	r3,1364
10006c28:	19400536 	bltu	r3,r5,10006c40 <_free_r+0x2f0>
10006c2c:	100ad4ba 	srli	r5,r2,18
10006c30:	28c01f44 	addi	r3,r5,125
10006c34:	18c7883a 	add	r3,r3,r3
10006c38:	29401f04 	addi	r5,r5,124
10006c3c:	003f8e06 	br	10006a78 <__alt_data_end+0xf8006a78>
10006c40:	00c03f84 	movi	r3,254
10006c44:	01401f84 	movi	r5,126
10006c48:	003f8b06 	br	10006a78 <__alt_data_end+0xf8006a78>
10006c4c:	10c00054 	ori	r3,r2,1
10006c50:	30c00115 	stw	r3,4(r6)
10006c54:	308d883a 	add	r6,r6,r2
10006c58:	30800015 	stw	r2,0(r6)
10006c5c:	003f7806 	br	10006a40 <__alt_data_end+0xf8006a40>

10006c60 <__sfvwrite_r>:
10006c60:	30800217 	ldw	r2,8(r6)
10006c64:	10006726 	beq	r2,zero,10006e04 <__sfvwrite_r+0x1a4>
10006c68:	28c0030b 	ldhu	r3,12(r5)
10006c6c:	defff404 	addi	sp,sp,-48
10006c70:	dd400715 	stw	r21,28(sp)
10006c74:	dd000615 	stw	r20,24(sp)
10006c78:	dc000215 	stw	r16,8(sp)
10006c7c:	dfc00b15 	stw	ra,44(sp)
10006c80:	df000a15 	stw	fp,40(sp)
10006c84:	ddc00915 	stw	r23,36(sp)
10006c88:	dd800815 	stw	r22,32(sp)
10006c8c:	dcc00515 	stw	r19,20(sp)
10006c90:	dc800415 	stw	r18,16(sp)
10006c94:	dc400315 	stw	r17,12(sp)
10006c98:	1880020c 	andi	r2,r3,8
10006c9c:	2821883a 	mov	r16,r5
10006ca0:	202b883a 	mov	r21,r4
10006ca4:	3029883a 	mov	r20,r6
10006ca8:	10002726 	beq	r2,zero,10006d48 <__sfvwrite_r+0xe8>
10006cac:	28800417 	ldw	r2,16(r5)
10006cb0:	10002526 	beq	r2,zero,10006d48 <__sfvwrite_r+0xe8>
10006cb4:	1880008c 	andi	r2,r3,2
10006cb8:	a4400017 	ldw	r17,0(r20)
10006cbc:	10002a26 	beq	r2,zero,10006d68 <__sfvwrite_r+0x108>
10006cc0:	05a00034 	movhi	r22,32768
10006cc4:	0027883a 	mov	r19,zero
10006cc8:	0025883a 	mov	r18,zero
10006ccc:	b5bf0004 	addi	r22,r22,-1024
10006cd0:	980d883a 	mov	r6,r19
10006cd4:	a809883a 	mov	r4,r21
10006cd8:	90004626 	beq	r18,zero,10006df4 <__sfvwrite_r+0x194>
10006cdc:	900f883a 	mov	r7,r18
10006ce0:	b480022e 	bgeu	r22,r18,10006cec <__sfvwrite_r+0x8c>
10006ce4:	01e00034 	movhi	r7,32768
10006ce8:	39ff0004 	addi	r7,r7,-1024
10006cec:	80800917 	ldw	r2,36(r16)
10006cf0:	81400717 	ldw	r5,28(r16)
10006cf4:	103ee83a 	callr	r2
10006cf8:	00805a0e 	bge	zero,r2,10006e64 <__sfvwrite_r+0x204>
10006cfc:	a0c00217 	ldw	r3,8(r20)
10006d00:	98a7883a 	add	r19,r19,r2
10006d04:	90a5c83a 	sub	r18,r18,r2
10006d08:	1885c83a 	sub	r2,r3,r2
10006d0c:	a0800215 	stw	r2,8(r20)
10006d10:	103fef1e 	bne	r2,zero,10006cd0 <__alt_data_end+0xf8006cd0>
10006d14:	0005883a 	mov	r2,zero
10006d18:	dfc00b17 	ldw	ra,44(sp)
10006d1c:	df000a17 	ldw	fp,40(sp)
10006d20:	ddc00917 	ldw	r23,36(sp)
10006d24:	dd800817 	ldw	r22,32(sp)
10006d28:	dd400717 	ldw	r21,28(sp)
10006d2c:	dd000617 	ldw	r20,24(sp)
10006d30:	dcc00517 	ldw	r19,20(sp)
10006d34:	dc800417 	ldw	r18,16(sp)
10006d38:	dc400317 	ldw	r17,12(sp)
10006d3c:	dc000217 	ldw	r16,8(sp)
10006d40:	dec00c04 	addi	sp,sp,48
10006d44:	f800283a 	ret
10006d48:	800b883a 	mov	r5,r16
10006d4c:	a809883a 	mov	r4,r21
10006d50:	00047d00 	call	100047d0 <__swsetup_r>
10006d54:	1000ee1e 	bne	r2,zero,10007110 <__sfvwrite_r+0x4b0>
10006d58:	80c0030b 	ldhu	r3,12(r16)
10006d5c:	a4400017 	ldw	r17,0(r20)
10006d60:	1880008c 	andi	r2,r3,2
10006d64:	103fd61e 	bne	r2,zero,10006cc0 <__alt_data_end+0xf8006cc0>
10006d68:	1880004c 	andi	r2,r3,1
10006d6c:	1000421e 	bne	r2,zero,10006e78 <__sfvwrite_r+0x218>
10006d70:	0039883a 	mov	fp,zero
10006d74:	0025883a 	mov	r18,zero
10006d78:	90001a26 	beq	r18,zero,10006de4 <__sfvwrite_r+0x184>
10006d7c:	1880800c 	andi	r2,r3,512
10006d80:	84c00217 	ldw	r19,8(r16)
10006d84:	10002126 	beq	r2,zero,10006e0c <__sfvwrite_r+0x1ac>
10006d88:	982f883a 	mov	r23,r19
10006d8c:	94c09636 	bltu	r18,r19,10006fe8 <__sfvwrite_r+0x388>
10006d90:	1881200c 	andi	r2,r3,1152
10006d94:	1000a11e 	bne	r2,zero,1000701c <__sfvwrite_r+0x3bc>
10006d98:	81000017 	ldw	r4,0(r16)
10006d9c:	b80d883a 	mov	r6,r23
10006da0:	e00b883a 	mov	r5,fp
10006da4:	0007f800 	call	10007f80 <memmove>
10006da8:	80c00217 	ldw	r3,8(r16)
10006dac:	81000017 	ldw	r4,0(r16)
10006db0:	9005883a 	mov	r2,r18
10006db4:	1ce7c83a 	sub	r19,r3,r19
10006db8:	25cf883a 	add	r7,r4,r23
10006dbc:	84c00215 	stw	r19,8(r16)
10006dc0:	81c00015 	stw	r7,0(r16)
10006dc4:	a0c00217 	ldw	r3,8(r20)
10006dc8:	e0b9883a 	add	fp,fp,r2
10006dcc:	90a5c83a 	sub	r18,r18,r2
10006dd0:	18a7c83a 	sub	r19,r3,r2
10006dd4:	a4c00215 	stw	r19,8(r20)
10006dd8:	983fce26 	beq	r19,zero,10006d14 <__alt_data_end+0xf8006d14>
10006ddc:	80c0030b 	ldhu	r3,12(r16)
10006de0:	903fe61e 	bne	r18,zero,10006d7c <__alt_data_end+0xf8006d7c>
10006de4:	8f000017 	ldw	fp,0(r17)
10006de8:	8c800117 	ldw	r18,4(r17)
10006dec:	8c400204 	addi	r17,r17,8
10006df0:	003fe106 	br	10006d78 <__alt_data_end+0xf8006d78>
10006df4:	8cc00017 	ldw	r19,0(r17)
10006df8:	8c800117 	ldw	r18,4(r17)
10006dfc:	8c400204 	addi	r17,r17,8
10006e00:	003fb306 	br	10006cd0 <__alt_data_end+0xf8006cd0>
10006e04:	0005883a 	mov	r2,zero
10006e08:	f800283a 	ret
10006e0c:	81000017 	ldw	r4,0(r16)
10006e10:	80800417 	ldw	r2,16(r16)
10006e14:	11005a36 	bltu	r2,r4,10006f80 <__sfvwrite_r+0x320>
10006e18:	85c00517 	ldw	r23,20(r16)
10006e1c:	95c05836 	bltu	r18,r23,10006f80 <__sfvwrite_r+0x320>
10006e20:	00a00034 	movhi	r2,32768
10006e24:	10bfffc4 	addi	r2,r2,-1
10006e28:	9009883a 	mov	r4,r18
10006e2c:	1480012e 	bgeu	r2,r18,10006e34 <__sfvwrite_r+0x1d4>
10006e30:	1009883a 	mov	r4,r2
10006e34:	b80b883a 	mov	r5,r23
10006e38:	000c7040 	call	1000c704 <__divsi3>
10006e3c:	b80b883a 	mov	r5,r23
10006e40:	1009883a 	mov	r4,r2
10006e44:	000c8b80 	call	1000c8b8 <__mulsi3>
10006e48:	81400717 	ldw	r5,28(r16)
10006e4c:	80c00917 	ldw	r3,36(r16)
10006e50:	100f883a 	mov	r7,r2
10006e54:	e00d883a 	mov	r6,fp
10006e58:	a809883a 	mov	r4,r21
10006e5c:	183ee83a 	callr	r3
10006e60:	00bfd816 	blt	zero,r2,10006dc4 <__alt_data_end+0xf8006dc4>
10006e64:	8080030b 	ldhu	r2,12(r16)
10006e68:	10801014 	ori	r2,r2,64
10006e6c:	8080030d 	sth	r2,12(r16)
10006e70:	00bfffc4 	movi	r2,-1
10006e74:	003fa806 	br	10006d18 <__alt_data_end+0xf8006d18>
10006e78:	0027883a 	mov	r19,zero
10006e7c:	0011883a 	mov	r8,zero
10006e80:	0039883a 	mov	fp,zero
10006e84:	0025883a 	mov	r18,zero
10006e88:	90001f26 	beq	r18,zero,10006f08 <__sfvwrite_r+0x2a8>
10006e8c:	40005a26 	beq	r8,zero,10006ff8 <__sfvwrite_r+0x398>
10006e90:	982d883a 	mov	r22,r19
10006e94:	94c0012e 	bgeu	r18,r19,10006e9c <__sfvwrite_r+0x23c>
10006e98:	902d883a 	mov	r22,r18
10006e9c:	81000017 	ldw	r4,0(r16)
10006ea0:	80800417 	ldw	r2,16(r16)
10006ea4:	b02f883a 	mov	r23,r22
10006ea8:	81c00517 	ldw	r7,20(r16)
10006eac:	1100032e 	bgeu	r2,r4,10006ebc <__sfvwrite_r+0x25c>
10006eb0:	80c00217 	ldw	r3,8(r16)
10006eb4:	38c7883a 	add	r3,r7,r3
10006eb8:	1d801816 	blt	r3,r22,10006f1c <__sfvwrite_r+0x2bc>
10006ebc:	b1c03e16 	blt	r22,r7,10006fb8 <__sfvwrite_r+0x358>
10006ec0:	80800917 	ldw	r2,36(r16)
10006ec4:	81400717 	ldw	r5,28(r16)
10006ec8:	e00d883a 	mov	r6,fp
10006ecc:	da000115 	stw	r8,4(sp)
10006ed0:	a809883a 	mov	r4,r21
10006ed4:	103ee83a 	callr	r2
10006ed8:	102f883a 	mov	r23,r2
10006edc:	da000117 	ldw	r8,4(sp)
10006ee0:	00bfe00e 	bge	zero,r2,10006e64 <__alt_data_end+0xf8006e64>
10006ee4:	9de7c83a 	sub	r19,r19,r23
10006ee8:	98001f26 	beq	r19,zero,10006f68 <__sfvwrite_r+0x308>
10006eec:	a0800217 	ldw	r2,8(r20)
10006ef0:	e5f9883a 	add	fp,fp,r23
10006ef4:	95e5c83a 	sub	r18,r18,r23
10006ef8:	15efc83a 	sub	r23,r2,r23
10006efc:	a5c00215 	stw	r23,8(r20)
10006f00:	b83f8426 	beq	r23,zero,10006d14 <__alt_data_end+0xf8006d14>
10006f04:	903fe11e 	bne	r18,zero,10006e8c <__alt_data_end+0xf8006e8c>
10006f08:	8f000017 	ldw	fp,0(r17)
10006f0c:	8c800117 	ldw	r18,4(r17)
10006f10:	0011883a 	mov	r8,zero
10006f14:	8c400204 	addi	r17,r17,8
10006f18:	003fdb06 	br	10006e88 <__alt_data_end+0xf8006e88>
10006f1c:	180d883a 	mov	r6,r3
10006f20:	e00b883a 	mov	r5,fp
10006f24:	da000115 	stw	r8,4(sp)
10006f28:	d8c00015 	stw	r3,0(sp)
10006f2c:	0007f800 	call	10007f80 <memmove>
10006f30:	d8c00017 	ldw	r3,0(sp)
10006f34:	80800017 	ldw	r2,0(r16)
10006f38:	800b883a 	mov	r5,r16
10006f3c:	a809883a 	mov	r4,r21
10006f40:	10c5883a 	add	r2,r2,r3
10006f44:	80800015 	stw	r2,0(r16)
10006f48:	d8c00015 	stw	r3,0(sp)
10006f4c:	00063f00 	call	100063f0 <_fflush_r>
10006f50:	d8c00017 	ldw	r3,0(sp)
10006f54:	da000117 	ldw	r8,4(sp)
10006f58:	103fc21e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
10006f5c:	182f883a 	mov	r23,r3
10006f60:	9de7c83a 	sub	r19,r19,r23
10006f64:	983fe11e 	bne	r19,zero,10006eec <__alt_data_end+0xf8006eec>
10006f68:	800b883a 	mov	r5,r16
10006f6c:	a809883a 	mov	r4,r21
10006f70:	00063f00 	call	100063f0 <_fflush_r>
10006f74:	103fbb1e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
10006f78:	0011883a 	mov	r8,zero
10006f7c:	003fdb06 	br	10006eec <__alt_data_end+0xf8006eec>
10006f80:	94c0012e 	bgeu	r18,r19,10006f88 <__sfvwrite_r+0x328>
10006f84:	9027883a 	mov	r19,r18
10006f88:	980d883a 	mov	r6,r19
10006f8c:	e00b883a 	mov	r5,fp
10006f90:	0007f800 	call	10007f80 <memmove>
10006f94:	80800217 	ldw	r2,8(r16)
10006f98:	80c00017 	ldw	r3,0(r16)
10006f9c:	14c5c83a 	sub	r2,r2,r19
10006fa0:	1cc7883a 	add	r3,r3,r19
10006fa4:	80800215 	stw	r2,8(r16)
10006fa8:	80c00015 	stw	r3,0(r16)
10006fac:	10004326 	beq	r2,zero,100070bc <__sfvwrite_r+0x45c>
10006fb0:	9805883a 	mov	r2,r19
10006fb4:	003f8306 	br	10006dc4 <__alt_data_end+0xf8006dc4>
10006fb8:	b00d883a 	mov	r6,r22
10006fbc:	e00b883a 	mov	r5,fp
10006fc0:	da000115 	stw	r8,4(sp)
10006fc4:	0007f800 	call	10007f80 <memmove>
10006fc8:	80800217 	ldw	r2,8(r16)
10006fcc:	80c00017 	ldw	r3,0(r16)
10006fd0:	da000117 	ldw	r8,4(sp)
10006fd4:	1585c83a 	sub	r2,r2,r22
10006fd8:	1dad883a 	add	r22,r3,r22
10006fdc:	80800215 	stw	r2,8(r16)
10006fe0:	85800015 	stw	r22,0(r16)
10006fe4:	003fbf06 	br	10006ee4 <__alt_data_end+0xf8006ee4>
10006fe8:	81000017 	ldw	r4,0(r16)
10006fec:	9027883a 	mov	r19,r18
10006ff0:	902f883a 	mov	r23,r18
10006ff4:	003f6906 	br	10006d9c <__alt_data_end+0xf8006d9c>
10006ff8:	900d883a 	mov	r6,r18
10006ffc:	01400284 	movi	r5,10
10007000:	e009883a 	mov	r4,fp
10007004:	0007d540 	call	10007d54 <memchr>
10007008:	10003e26 	beq	r2,zero,10007104 <__sfvwrite_r+0x4a4>
1000700c:	10800044 	addi	r2,r2,1
10007010:	1727c83a 	sub	r19,r2,fp
10007014:	02000044 	movi	r8,1
10007018:	003f9d06 	br	10006e90 <__alt_data_end+0xf8006e90>
1000701c:	80800517 	ldw	r2,20(r16)
10007020:	81400417 	ldw	r5,16(r16)
10007024:	81c00017 	ldw	r7,0(r16)
10007028:	10a7883a 	add	r19,r2,r2
1000702c:	9885883a 	add	r2,r19,r2
10007030:	1026d7fa 	srli	r19,r2,31
10007034:	396dc83a 	sub	r22,r7,r5
10007038:	b1000044 	addi	r4,r22,1
1000703c:	9885883a 	add	r2,r19,r2
10007040:	1027d07a 	srai	r19,r2,1
10007044:	2485883a 	add	r2,r4,r18
10007048:	980d883a 	mov	r6,r19
1000704c:	9880022e 	bgeu	r19,r2,10007058 <__sfvwrite_r+0x3f8>
10007050:	1027883a 	mov	r19,r2
10007054:	100d883a 	mov	r6,r2
10007058:	18c1000c 	andi	r3,r3,1024
1000705c:	18001c26 	beq	r3,zero,100070d0 <__sfvwrite_r+0x470>
10007060:	300b883a 	mov	r5,r6
10007064:	a809883a 	mov	r4,r21
10007068:	00075480 	call	10007548 <_malloc_r>
1000706c:	102f883a 	mov	r23,r2
10007070:	10002926 	beq	r2,zero,10007118 <__sfvwrite_r+0x4b8>
10007074:	81400417 	ldw	r5,16(r16)
10007078:	b00d883a 	mov	r6,r22
1000707c:	1009883a 	mov	r4,r2
10007080:	0007e380 	call	10007e38 <memcpy>
10007084:	8080030b 	ldhu	r2,12(r16)
10007088:	00fedfc4 	movi	r3,-1153
1000708c:	10c4703a 	and	r2,r2,r3
10007090:	10802014 	ori	r2,r2,128
10007094:	8080030d 	sth	r2,12(r16)
10007098:	bd89883a 	add	r4,r23,r22
1000709c:	9d8fc83a 	sub	r7,r19,r22
100070a0:	85c00415 	stw	r23,16(r16)
100070a4:	84c00515 	stw	r19,20(r16)
100070a8:	81000015 	stw	r4,0(r16)
100070ac:	9027883a 	mov	r19,r18
100070b0:	81c00215 	stw	r7,8(r16)
100070b4:	902f883a 	mov	r23,r18
100070b8:	003f3806 	br	10006d9c <__alt_data_end+0xf8006d9c>
100070bc:	800b883a 	mov	r5,r16
100070c0:	a809883a 	mov	r4,r21
100070c4:	00063f00 	call	100063f0 <_fflush_r>
100070c8:	103fb926 	beq	r2,zero,10006fb0 <__alt_data_end+0xf8006fb0>
100070cc:	003f6506 	br	10006e64 <__alt_data_end+0xf8006e64>
100070d0:	a809883a 	mov	r4,r21
100070d4:	00092bc0 	call	100092bc <_realloc_r>
100070d8:	102f883a 	mov	r23,r2
100070dc:	103fee1e 	bne	r2,zero,10007098 <__alt_data_end+0xf8007098>
100070e0:	81400417 	ldw	r5,16(r16)
100070e4:	a809883a 	mov	r4,r21
100070e8:	00069500 	call	10006950 <_free_r>
100070ec:	8080030b 	ldhu	r2,12(r16)
100070f0:	00ffdfc4 	movi	r3,-129
100070f4:	1884703a 	and	r2,r3,r2
100070f8:	00c00304 	movi	r3,12
100070fc:	a8c00015 	stw	r3,0(r21)
10007100:	003f5906 	br	10006e68 <__alt_data_end+0xf8006e68>
10007104:	94c00044 	addi	r19,r18,1
10007108:	02000044 	movi	r8,1
1000710c:	003f6006 	br	10006e90 <__alt_data_end+0xf8006e90>
10007110:	00bfffc4 	movi	r2,-1
10007114:	003f0006 	br	10006d18 <__alt_data_end+0xf8006d18>
10007118:	00800304 	movi	r2,12
1000711c:	a8800015 	stw	r2,0(r21)
10007120:	8080030b 	ldhu	r2,12(r16)
10007124:	003f5006 	br	10006e68 <__alt_data_end+0xf8006e68>

10007128 <_fwalk>:
10007128:	defff704 	addi	sp,sp,-36
1000712c:	dd000415 	stw	r20,16(sp)
10007130:	dfc00815 	stw	ra,32(sp)
10007134:	ddc00715 	stw	r23,28(sp)
10007138:	dd800615 	stw	r22,24(sp)
1000713c:	dd400515 	stw	r21,20(sp)
10007140:	dcc00315 	stw	r19,12(sp)
10007144:	dc800215 	stw	r18,8(sp)
10007148:	dc400115 	stw	r17,4(sp)
1000714c:	dc000015 	stw	r16,0(sp)
10007150:	2500b804 	addi	r20,r4,736
10007154:	a0002326 	beq	r20,zero,100071e4 <_fwalk+0xbc>
10007158:	282b883a 	mov	r21,r5
1000715c:	002f883a 	mov	r23,zero
10007160:	05800044 	movi	r22,1
10007164:	04ffffc4 	movi	r19,-1
10007168:	a4400117 	ldw	r17,4(r20)
1000716c:	a4800217 	ldw	r18,8(r20)
10007170:	8c7fffc4 	addi	r17,r17,-1
10007174:	88000d16 	blt	r17,zero,100071ac <_fwalk+0x84>
10007178:	94000304 	addi	r16,r18,12
1000717c:	94800384 	addi	r18,r18,14
10007180:	8080000b 	ldhu	r2,0(r16)
10007184:	8c7fffc4 	addi	r17,r17,-1
10007188:	813ffd04 	addi	r4,r16,-12
1000718c:	b080042e 	bgeu	r22,r2,100071a0 <_fwalk+0x78>
10007190:	9080000f 	ldh	r2,0(r18)
10007194:	14c00226 	beq	r2,r19,100071a0 <_fwalk+0x78>
10007198:	a83ee83a 	callr	r21
1000719c:	b8aeb03a 	or	r23,r23,r2
100071a0:	84001a04 	addi	r16,r16,104
100071a4:	94801a04 	addi	r18,r18,104
100071a8:	8cfff51e 	bne	r17,r19,10007180 <__alt_data_end+0xf8007180>
100071ac:	a5000017 	ldw	r20,0(r20)
100071b0:	a03fed1e 	bne	r20,zero,10007168 <__alt_data_end+0xf8007168>
100071b4:	b805883a 	mov	r2,r23
100071b8:	dfc00817 	ldw	ra,32(sp)
100071bc:	ddc00717 	ldw	r23,28(sp)
100071c0:	dd800617 	ldw	r22,24(sp)
100071c4:	dd400517 	ldw	r21,20(sp)
100071c8:	dd000417 	ldw	r20,16(sp)
100071cc:	dcc00317 	ldw	r19,12(sp)
100071d0:	dc800217 	ldw	r18,8(sp)
100071d4:	dc400117 	ldw	r17,4(sp)
100071d8:	dc000017 	ldw	r16,0(sp)
100071dc:	dec00904 	addi	sp,sp,36
100071e0:	f800283a 	ret
100071e4:	002f883a 	mov	r23,zero
100071e8:	003ff206 	br	100071b4 <__alt_data_end+0xf80071b4>

100071ec <_fwalk_reent>:
100071ec:	defff704 	addi	sp,sp,-36
100071f0:	dd000415 	stw	r20,16(sp)
100071f4:	dfc00815 	stw	ra,32(sp)
100071f8:	ddc00715 	stw	r23,28(sp)
100071fc:	dd800615 	stw	r22,24(sp)
10007200:	dd400515 	stw	r21,20(sp)
10007204:	dcc00315 	stw	r19,12(sp)
10007208:	dc800215 	stw	r18,8(sp)
1000720c:	dc400115 	stw	r17,4(sp)
10007210:	dc000015 	stw	r16,0(sp)
10007214:	2500b804 	addi	r20,r4,736
10007218:	a0002326 	beq	r20,zero,100072a8 <_fwalk_reent+0xbc>
1000721c:	282b883a 	mov	r21,r5
10007220:	2027883a 	mov	r19,r4
10007224:	002f883a 	mov	r23,zero
10007228:	05800044 	movi	r22,1
1000722c:	04bfffc4 	movi	r18,-1
10007230:	a4400117 	ldw	r17,4(r20)
10007234:	a4000217 	ldw	r16,8(r20)
10007238:	8c7fffc4 	addi	r17,r17,-1
1000723c:	88000c16 	blt	r17,zero,10007270 <_fwalk_reent+0x84>
10007240:	84000304 	addi	r16,r16,12
10007244:	8080000b 	ldhu	r2,0(r16)
10007248:	8c7fffc4 	addi	r17,r17,-1
1000724c:	817ffd04 	addi	r5,r16,-12
10007250:	b080052e 	bgeu	r22,r2,10007268 <_fwalk_reent+0x7c>
10007254:	8080008f 	ldh	r2,2(r16)
10007258:	9809883a 	mov	r4,r19
1000725c:	14800226 	beq	r2,r18,10007268 <_fwalk_reent+0x7c>
10007260:	a83ee83a 	callr	r21
10007264:	b8aeb03a 	or	r23,r23,r2
10007268:	84001a04 	addi	r16,r16,104
1000726c:	8cbff51e 	bne	r17,r18,10007244 <__alt_data_end+0xf8007244>
10007270:	a5000017 	ldw	r20,0(r20)
10007274:	a03fee1e 	bne	r20,zero,10007230 <__alt_data_end+0xf8007230>
10007278:	b805883a 	mov	r2,r23
1000727c:	dfc00817 	ldw	ra,32(sp)
10007280:	ddc00717 	ldw	r23,28(sp)
10007284:	dd800617 	ldw	r22,24(sp)
10007288:	dd400517 	ldw	r21,20(sp)
1000728c:	dd000417 	ldw	r20,16(sp)
10007290:	dcc00317 	ldw	r19,12(sp)
10007294:	dc800217 	ldw	r18,8(sp)
10007298:	dc400117 	ldw	r17,4(sp)
1000729c:	dc000017 	ldw	r16,0(sp)
100072a0:	dec00904 	addi	sp,sp,36
100072a4:	f800283a 	ret
100072a8:	002f883a 	mov	r23,zero
100072ac:	003ff206 	br	10007278 <__alt_data_end+0xf8007278>

100072b0 <_setlocale_r>:
100072b0:	30001b26 	beq	r6,zero,10007320 <_setlocale_r+0x70>
100072b4:	01440074 	movhi	r5,4097
100072b8:	defffe04 	addi	sp,sp,-8
100072bc:	29486604 	addi	r5,r5,8600
100072c0:	3009883a 	mov	r4,r6
100072c4:	dc000015 	stw	r16,0(sp)
100072c8:	dfc00115 	stw	ra,4(sp)
100072cc:	3021883a 	mov	r16,r6
100072d0:	0009a240 	call	10009a24 <strcmp>
100072d4:	1000061e 	bne	r2,zero,100072f0 <_setlocale_r+0x40>
100072d8:	00840074 	movhi	r2,4097
100072dc:	10886504 	addi	r2,r2,8596
100072e0:	dfc00117 	ldw	ra,4(sp)
100072e4:	dc000017 	ldw	r16,0(sp)
100072e8:	dec00204 	addi	sp,sp,8
100072ec:	f800283a 	ret
100072f0:	01440074 	movhi	r5,4097
100072f4:	29486504 	addi	r5,r5,8596
100072f8:	8009883a 	mov	r4,r16
100072fc:	0009a240 	call	10009a24 <strcmp>
10007300:	103ff526 	beq	r2,zero,100072d8 <__alt_data_end+0xf80072d8>
10007304:	01440074 	movhi	r5,4097
10007308:	29485004 	addi	r5,r5,8512
1000730c:	8009883a 	mov	r4,r16
10007310:	0009a240 	call	10009a24 <strcmp>
10007314:	103ff026 	beq	r2,zero,100072d8 <__alt_data_end+0xf80072d8>
10007318:	0005883a 	mov	r2,zero
1000731c:	003ff006 	br	100072e0 <__alt_data_end+0xf80072e0>
10007320:	00840074 	movhi	r2,4097
10007324:	10886504 	addi	r2,r2,8596
10007328:	f800283a 	ret

1000732c <__locale_charset>:
1000732c:	00840074 	movhi	r2,4097
10007330:	108a1804 	addi	r2,r2,10336
10007334:	f800283a 	ret

10007338 <__locale_mb_cur_max>:
10007338:	00840074 	movhi	r2,4097
1000733c:	108fb404 	addi	r2,r2,16080
10007340:	10800017 	ldw	r2,0(r2)
10007344:	f800283a 	ret

10007348 <__locale_msgcharset>:
10007348:	00840074 	movhi	r2,4097
1000734c:	108a1004 	addi	r2,r2,10304
10007350:	f800283a 	ret

10007354 <__locale_cjk_lang>:
10007354:	0005883a 	mov	r2,zero
10007358:	f800283a 	ret

1000735c <_localeconv_r>:
1000735c:	00840074 	movhi	r2,4097
10007360:	108a2004 	addi	r2,r2,10368
10007364:	f800283a 	ret

10007368 <setlocale>:
10007368:	00840074 	movhi	r2,4097
1000736c:	108fb304 	addi	r2,r2,16076
10007370:	280d883a 	mov	r6,r5
10007374:	200b883a 	mov	r5,r4
10007378:	11000017 	ldw	r4,0(r2)
1000737c:	00072b01 	jmpi	100072b0 <_setlocale_r>

10007380 <localeconv>:
10007380:	00840074 	movhi	r2,4097
10007384:	108a2004 	addi	r2,r2,10368
10007388:	f800283a 	ret

1000738c <__smakebuf_r>:
1000738c:	2880030b 	ldhu	r2,12(r5)
10007390:	10c0008c 	andi	r3,r2,2
10007394:	1800411e 	bne	r3,zero,1000749c <__smakebuf_r+0x110>
10007398:	deffec04 	addi	sp,sp,-80
1000739c:	dc000f15 	stw	r16,60(sp)
100073a0:	2821883a 	mov	r16,r5
100073a4:	2940038f 	ldh	r5,14(r5)
100073a8:	dc401015 	stw	r17,64(sp)
100073ac:	dfc01315 	stw	ra,76(sp)
100073b0:	dcc01215 	stw	r19,72(sp)
100073b4:	dc801115 	stw	r18,68(sp)
100073b8:	2023883a 	mov	r17,r4
100073bc:	28001c16 	blt	r5,zero,10007430 <__smakebuf_r+0xa4>
100073c0:	d80d883a 	mov	r6,sp
100073c4:	000b6940 	call	1000b694 <_fstat_r>
100073c8:	10001816 	blt	r2,zero,1000742c <__smakebuf_r+0xa0>
100073cc:	d8800117 	ldw	r2,4(sp)
100073d0:	00e00014 	movui	r3,32768
100073d4:	10bc000c 	andi	r2,r2,61440
100073d8:	14c80020 	cmpeqi	r19,r2,8192
100073dc:	10c03726 	beq	r2,r3,100074bc <__smakebuf_r+0x130>
100073e0:	80c0030b 	ldhu	r3,12(r16)
100073e4:	18c20014 	ori	r3,r3,2048
100073e8:	80c0030d 	sth	r3,12(r16)
100073ec:	00c80004 	movi	r3,8192
100073f0:	10c0521e 	bne	r2,r3,1000753c <__smakebuf_r+0x1b0>
100073f4:	8140038f 	ldh	r5,14(r16)
100073f8:	8809883a 	mov	r4,r17
100073fc:	000b6f00 	call	1000b6f0 <_isatty_r>
10007400:	10004c26 	beq	r2,zero,10007534 <__smakebuf_r+0x1a8>
10007404:	8080030b 	ldhu	r2,12(r16)
10007408:	80c010c4 	addi	r3,r16,67
1000740c:	80c00015 	stw	r3,0(r16)
10007410:	10800054 	ori	r2,r2,1
10007414:	8080030d 	sth	r2,12(r16)
10007418:	00800044 	movi	r2,1
1000741c:	80c00415 	stw	r3,16(r16)
10007420:	80800515 	stw	r2,20(r16)
10007424:	04810004 	movi	r18,1024
10007428:	00000706 	br	10007448 <__smakebuf_r+0xbc>
1000742c:	8080030b 	ldhu	r2,12(r16)
10007430:	10c0200c 	andi	r3,r2,128
10007434:	18001f1e 	bne	r3,zero,100074b4 <__smakebuf_r+0x128>
10007438:	04810004 	movi	r18,1024
1000743c:	10820014 	ori	r2,r2,2048
10007440:	8080030d 	sth	r2,12(r16)
10007444:	0027883a 	mov	r19,zero
10007448:	900b883a 	mov	r5,r18
1000744c:	8809883a 	mov	r4,r17
10007450:	00075480 	call	10007548 <_malloc_r>
10007454:	10002c26 	beq	r2,zero,10007508 <__smakebuf_r+0x17c>
10007458:	80c0030b 	ldhu	r3,12(r16)
1000745c:	01040034 	movhi	r4,4096
10007460:	21192104 	addi	r4,r4,25732
10007464:	89000f15 	stw	r4,60(r17)
10007468:	18c02014 	ori	r3,r3,128
1000746c:	80c0030d 	sth	r3,12(r16)
10007470:	80800015 	stw	r2,0(r16)
10007474:	80800415 	stw	r2,16(r16)
10007478:	84800515 	stw	r18,20(r16)
1000747c:	98001a1e 	bne	r19,zero,100074e8 <__smakebuf_r+0x15c>
10007480:	dfc01317 	ldw	ra,76(sp)
10007484:	dcc01217 	ldw	r19,72(sp)
10007488:	dc801117 	ldw	r18,68(sp)
1000748c:	dc401017 	ldw	r17,64(sp)
10007490:	dc000f17 	ldw	r16,60(sp)
10007494:	dec01404 	addi	sp,sp,80
10007498:	f800283a 	ret
1000749c:	288010c4 	addi	r2,r5,67
100074a0:	28800015 	stw	r2,0(r5)
100074a4:	28800415 	stw	r2,16(r5)
100074a8:	00800044 	movi	r2,1
100074ac:	28800515 	stw	r2,20(r5)
100074b0:	f800283a 	ret
100074b4:	04801004 	movi	r18,64
100074b8:	003fe006 	br	1000743c <__alt_data_end+0xf800743c>
100074bc:	81000a17 	ldw	r4,40(r16)
100074c0:	00c40074 	movhi	r3,4097
100074c4:	18e67004 	addi	r3,r3,-26176
100074c8:	20ffc51e 	bne	r4,r3,100073e0 <__alt_data_end+0xf80073e0>
100074cc:	8080030b 	ldhu	r2,12(r16)
100074d0:	04810004 	movi	r18,1024
100074d4:	84801315 	stw	r18,76(r16)
100074d8:	1484b03a 	or	r2,r2,r18
100074dc:	8080030d 	sth	r2,12(r16)
100074e0:	0027883a 	mov	r19,zero
100074e4:	003fd806 	br	10007448 <__alt_data_end+0xf8007448>
100074e8:	8140038f 	ldh	r5,14(r16)
100074ec:	8809883a 	mov	r4,r17
100074f0:	000b6f00 	call	1000b6f0 <_isatty_r>
100074f4:	103fe226 	beq	r2,zero,10007480 <__alt_data_end+0xf8007480>
100074f8:	8080030b 	ldhu	r2,12(r16)
100074fc:	10800054 	ori	r2,r2,1
10007500:	8080030d 	sth	r2,12(r16)
10007504:	003fde06 	br	10007480 <__alt_data_end+0xf8007480>
10007508:	8080030b 	ldhu	r2,12(r16)
1000750c:	10c0800c 	andi	r3,r2,512
10007510:	183fdb1e 	bne	r3,zero,10007480 <__alt_data_end+0xf8007480>
10007514:	10800094 	ori	r2,r2,2
10007518:	80c010c4 	addi	r3,r16,67
1000751c:	8080030d 	sth	r2,12(r16)
10007520:	00800044 	movi	r2,1
10007524:	80c00015 	stw	r3,0(r16)
10007528:	80c00415 	stw	r3,16(r16)
1000752c:	80800515 	stw	r2,20(r16)
10007530:	003fd306 	br	10007480 <__alt_data_end+0xf8007480>
10007534:	04810004 	movi	r18,1024
10007538:	003fc306 	br	10007448 <__alt_data_end+0xf8007448>
1000753c:	0027883a 	mov	r19,zero
10007540:	04810004 	movi	r18,1024
10007544:	003fc006 	br	10007448 <__alt_data_end+0xf8007448>

10007548 <_malloc_r>:
10007548:	defff504 	addi	sp,sp,-44
1000754c:	dc800315 	stw	r18,12(sp)
10007550:	dfc00a15 	stw	ra,40(sp)
10007554:	df000915 	stw	fp,36(sp)
10007558:	ddc00815 	stw	r23,32(sp)
1000755c:	dd800715 	stw	r22,28(sp)
10007560:	dd400615 	stw	r21,24(sp)
10007564:	dd000515 	stw	r20,20(sp)
10007568:	dcc00415 	stw	r19,16(sp)
1000756c:	dc400215 	stw	r17,8(sp)
10007570:	dc000115 	stw	r16,4(sp)
10007574:	288002c4 	addi	r2,r5,11
10007578:	00c00584 	movi	r3,22
1000757c:	2025883a 	mov	r18,r4
10007580:	18807f2e 	bgeu	r3,r2,10007780 <_malloc_r+0x238>
10007584:	047ffe04 	movi	r17,-8
10007588:	1462703a 	and	r17,r2,r17
1000758c:	8800a316 	blt	r17,zero,1000781c <_malloc_r+0x2d4>
10007590:	8940a236 	bltu	r17,r5,1000781c <_malloc_r+0x2d4>
10007594:	000f7200 	call	1000f720 <__malloc_lock>
10007598:	00807dc4 	movi	r2,503
1000759c:	1441e92e 	bgeu	r2,r17,10007d44 <_malloc_r+0x7fc>
100075a0:	8804d27a 	srli	r2,r17,9
100075a4:	1000a126 	beq	r2,zero,1000782c <_malloc_r+0x2e4>
100075a8:	00c00104 	movi	r3,4
100075ac:	18811e36 	bltu	r3,r2,10007a28 <_malloc_r+0x4e0>
100075b0:	8804d1ba 	srli	r2,r17,6
100075b4:	12000e44 	addi	r8,r2,57
100075b8:	11c00e04 	addi	r7,r2,56
100075bc:	4209883a 	add	r4,r8,r8
100075c0:	04c40074 	movhi	r19,4097
100075c4:	2109883a 	add	r4,r4,r4
100075c8:	9cca2e04 	addi	r19,r19,10424
100075cc:	2109883a 	add	r4,r4,r4
100075d0:	9909883a 	add	r4,r19,r4
100075d4:	24000117 	ldw	r16,4(r4)
100075d8:	213ffe04 	addi	r4,r4,-8
100075dc:	24009726 	beq	r4,r16,1000783c <_malloc_r+0x2f4>
100075e0:	80800117 	ldw	r2,4(r16)
100075e4:	01bfff04 	movi	r6,-4
100075e8:	014003c4 	movi	r5,15
100075ec:	1184703a 	and	r2,r2,r6
100075f0:	1447c83a 	sub	r3,r2,r17
100075f4:	28c00716 	blt	r5,r3,10007614 <_malloc_r+0xcc>
100075f8:	1800920e 	bge	r3,zero,10007844 <_malloc_r+0x2fc>
100075fc:	84000317 	ldw	r16,12(r16)
10007600:	24008e26 	beq	r4,r16,1000783c <_malloc_r+0x2f4>
10007604:	80800117 	ldw	r2,4(r16)
10007608:	1184703a 	and	r2,r2,r6
1000760c:	1447c83a 	sub	r3,r2,r17
10007610:	28fff90e 	bge	r5,r3,100075f8 <__alt_data_end+0xf80075f8>
10007614:	3809883a 	mov	r4,r7
10007618:	01840074 	movhi	r6,4097
1000761c:	9c000417 	ldw	r16,16(r19)
10007620:	318a2e04 	addi	r6,r6,10424
10007624:	32000204 	addi	r8,r6,8
10007628:	82013426 	beq	r16,r8,10007afc <_malloc_r+0x5b4>
1000762c:	80c00117 	ldw	r3,4(r16)
10007630:	00bfff04 	movi	r2,-4
10007634:	188e703a 	and	r7,r3,r2
10007638:	3c45c83a 	sub	r2,r7,r17
1000763c:	00c003c4 	movi	r3,15
10007640:	18811f16 	blt	r3,r2,10007ac0 <_malloc_r+0x578>
10007644:	32000515 	stw	r8,20(r6)
10007648:	32000415 	stw	r8,16(r6)
1000764c:	10007f0e 	bge	r2,zero,1000784c <_malloc_r+0x304>
10007650:	00807fc4 	movi	r2,511
10007654:	11c0fd36 	bltu	r2,r7,10007a4c <_malloc_r+0x504>
10007658:	3806d0fa 	srli	r3,r7,3
1000765c:	01c00044 	movi	r7,1
10007660:	30800117 	ldw	r2,4(r6)
10007664:	19400044 	addi	r5,r3,1
10007668:	294b883a 	add	r5,r5,r5
1000766c:	1807d0ba 	srai	r3,r3,2
10007670:	294b883a 	add	r5,r5,r5
10007674:	294b883a 	add	r5,r5,r5
10007678:	298b883a 	add	r5,r5,r6
1000767c:	38c6983a 	sll	r3,r7,r3
10007680:	29c00017 	ldw	r7,0(r5)
10007684:	2a7ffe04 	addi	r9,r5,-8
10007688:	1886b03a 	or	r3,r3,r2
1000768c:	82400315 	stw	r9,12(r16)
10007690:	81c00215 	stw	r7,8(r16)
10007694:	30c00115 	stw	r3,4(r6)
10007698:	2c000015 	stw	r16,0(r5)
1000769c:	3c000315 	stw	r16,12(r7)
100076a0:	2005d0ba 	srai	r2,r4,2
100076a4:	01400044 	movi	r5,1
100076a8:	288a983a 	sll	r5,r5,r2
100076ac:	19406f36 	bltu	r3,r5,1000786c <_malloc_r+0x324>
100076b0:	28c4703a 	and	r2,r5,r3
100076b4:	10000a1e 	bne	r2,zero,100076e0 <_malloc_r+0x198>
100076b8:	00bfff04 	movi	r2,-4
100076bc:	294b883a 	add	r5,r5,r5
100076c0:	2088703a 	and	r4,r4,r2
100076c4:	28c4703a 	and	r2,r5,r3
100076c8:	21000104 	addi	r4,r4,4
100076cc:	1000041e 	bne	r2,zero,100076e0 <_malloc_r+0x198>
100076d0:	294b883a 	add	r5,r5,r5
100076d4:	28c4703a 	and	r2,r5,r3
100076d8:	21000104 	addi	r4,r4,4
100076dc:	103ffc26 	beq	r2,zero,100076d0 <__alt_data_end+0xf80076d0>
100076e0:	02bfff04 	movi	r10,-4
100076e4:	024003c4 	movi	r9,15
100076e8:	21800044 	addi	r6,r4,1
100076ec:	318d883a 	add	r6,r6,r6
100076f0:	318d883a 	add	r6,r6,r6
100076f4:	318d883a 	add	r6,r6,r6
100076f8:	998d883a 	add	r6,r19,r6
100076fc:	333ffe04 	addi	r12,r6,-8
10007700:	2017883a 	mov	r11,r4
10007704:	31800104 	addi	r6,r6,4
10007708:	34000017 	ldw	r16,0(r6)
1000770c:	31fffd04 	addi	r7,r6,-12
10007710:	81c0041e 	bne	r16,r7,10007724 <_malloc_r+0x1dc>
10007714:	0000fb06 	br	10007b04 <_malloc_r+0x5bc>
10007718:	1801030e 	bge	r3,zero,10007b28 <_malloc_r+0x5e0>
1000771c:	84000317 	ldw	r16,12(r16)
10007720:	81c0f826 	beq	r16,r7,10007b04 <_malloc_r+0x5bc>
10007724:	80800117 	ldw	r2,4(r16)
10007728:	1284703a 	and	r2,r2,r10
1000772c:	1447c83a 	sub	r3,r2,r17
10007730:	48fff90e 	bge	r9,r3,10007718 <__alt_data_end+0xf8007718>
10007734:	80800317 	ldw	r2,12(r16)
10007738:	81000217 	ldw	r4,8(r16)
1000773c:	89400054 	ori	r5,r17,1
10007740:	81400115 	stw	r5,4(r16)
10007744:	20800315 	stw	r2,12(r4)
10007748:	11000215 	stw	r4,8(r2)
1000774c:	8463883a 	add	r17,r16,r17
10007750:	9c400515 	stw	r17,20(r19)
10007754:	9c400415 	stw	r17,16(r19)
10007758:	18800054 	ori	r2,r3,1
1000775c:	88800115 	stw	r2,4(r17)
10007760:	8a000315 	stw	r8,12(r17)
10007764:	8a000215 	stw	r8,8(r17)
10007768:	88e3883a 	add	r17,r17,r3
1000776c:	88c00015 	stw	r3,0(r17)
10007770:	9009883a 	mov	r4,r18
10007774:	000f7440 	call	1000f744 <__malloc_unlock>
10007778:	80800204 	addi	r2,r16,8
1000777c:	00001b06 	br	100077ec <_malloc_r+0x2a4>
10007780:	04400404 	movi	r17,16
10007784:	89402536 	bltu	r17,r5,1000781c <_malloc_r+0x2d4>
10007788:	000f7200 	call	1000f720 <__malloc_lock>
1000778c:	00800184 	movi	r2,6
10007790:	01000084 	movi	r4,2
10007794:	04c40074 	movhi	r19,4097
10007798:	1085883a 	add	r2,r2,r2
1000779c:	9cca2e04 	addi	r19,r19,10424
100077a0:	1085883a 	add	r2,r2,r2
100077a4:	9885883a 	add	r2,r19,r2
100077a8:	14000117 	ldw	r16,4(r2)
100077ac:	10fffe04 	addi	r3,r2,-8
100077b0:	80c0d926 	beq	r16,r3,10007b18 <_malloc_r+0x5d0>
100077b4:	80c00117 	ldw	r3,4(r16)
100077b8:	81000317 	ldw	r4,12(r16)
100077bc:	00bfff04 	movi	r2,-4
100077c0:	1884703a 	and	r2,r3,r2
100077c4:	81400217 	ldw	r5,8(r16)
100077c8:	8085883a 	add	r2,r16,r2
100077cc:	10c00117 	ldw	r3,4(r2)
100077d0:	29000315 	stw	r4,12(r5)
100077d4:	21400215 	stw	r5,8(r4)
100077d8:	18c00054 	ori	r3,r3,1
100077dc:	10c00115 	stw	r3,4(r2)
100077e0:	9009883a 	mov	r4,r18
100077e4:	000f7440 	call	1000f744 <__malloc_unlock>
100077e8:	80800204 	addi	r2,r16,8
100077ec:	dfc00a17 	ldw	ra,40(sp)
100077f0:	df000917 	ldw	fp,36(sp)
100077f4:	ddc00817 	ldw	r23,32(sp)
100077f8:	dd800717 	ldw	r22,28(sp)
100077fc:	dd400617 	ldw	r21,24(sp)
10007800:	dd000517 	ldw	r20,20(sp)
10007804:	dcc00417 	ldw	r19,16(sp)
10007808:	dc800317 	ldw	r18,12(sp)
1000780c:	dc400217 	ldw	r17,8(sp)
10007810:	dc000117 	ldw	r16,4(sp)
10007814:	dec00b04 	addi	sp,sp,44
10007818:	f800283a 	ret
1000781c:	00800304 	movi	r2,12
10007820:	90800015 	stw	r2,0(r18)
10007824:	0005883a 	mov	r2,zero
10007828:	003ff006 	br	100077ec <__alt_data_end+0xf80077ec>
1000782c:	01002004 	movi	r4,128
10007830:	02001004 	movi	r8,64
10007834:	01c00fc4 	movi	r7,63
10007838:	003f6106 	br	100075c0 <__alt_data_end+0xf80075c0>
1000783c:	4009883a 	mov	r4,r8
10007840:	003f7506 	br	10007618 <__alt_data_end+0xf8007618>
10007844:	81000317 	ldw	r4,12(r16)
10007848:	003fde06 	br	100077c4 <__alt_data_end+0xf80077c4>
1000784c:	81c5883a 	add	r2,r16,r7
10007850:	11400117 	ldw	r5,4(r2)
10007854:	9009883a 	mov	r4,r18
10007858:	29400054 	ori	r5,r5,1
1000785c:	11400115 	stw	r5,4(r2)
10007860:	000f7440 	call	1000f744 <__malloc_unlock>
10007864:	80800204 	addi	r2,r16,8
10007868:	003fe006 	br	100077ec <__alt_data_end+0xf80077ec>
1000786c:	9c000217 	ldw	r16,8(r19)
10007870:	00bfff04 	movi	r2,-4
10007874:	85800117 	ldw	r22,4(r16)
10007878:	b0ac703a 	and	r22,r22,r2
1000787c:	b4400336 	bltu	r22,r17,1000788c <_malloc_r+0x344>
10007880:	b445c83a 	sub	r2,r22,r17
10007884:	00c003c4 	movi	r3,15
10007888:	18805d16 	blt	r3,r2,10007a00 <_malloc_r+0x4b8>
1000788c:	05c40074 	movhi	r23,4097
10007890:	00840074 	movhi	r2,4097
10007894:	10968304 	addi	r2,r2,23052
10007898:	bdcfb504 	addi	r23,r23,16084
1000789c:	15400017 	ldw	r21,0(r2)
100078a0:	b8c00017 	ldw	r3,0(r23)
100078a4:	00bfffc4 	movi	r2,-1
100078a8:	858d883a 	add	r6,r16,r22
100078ac:	8d6b883a 	add	r21,r17,r21
100078b0:	1880ea26 	beq	r3,r2,10007c5c <_malloc_r+0x714>
100078b4:	ad4403c4 	addi	r21,r21,4111
100078b8:	00bc0004 	movi	r2,-4096
100078bc:	a8aa703a 	and	r21,r21,r2
100078c0:	a80b883a 	mov	r5,r21
100078c4:	9009883a 	mov	r4,r18
100078c8:	d9800015 	stw	r6,0(sp)
100078cc:	00098940 	call	10009894 <_sbrk_r>
100078d0:	1029883a 	mov	r20,r2
100078d4:	00bfffc4 	movi	r2,-1
100078d8:	d9800017 	ldw	r6,0(sp)
100078dc:	a080e826 	beq	r20,r2,10007c80 <_malloc_r+0x738>
100078e0:	a180a636 	bltu	r20,r6,10007b7c <_malloc_r+0x634>
100078e4:	07040074 	movhi	fp,4097
100078e8:	e7168c04 	addi	fp,fp,23088
100078ec:	e0800017 	ldw	r2,0(fp)
100078f0:	a887883a 	add	r3,r21,r2
100078f4:	e0c00015 	stw	r3,0(fp)
100078f8:	3500e626 	beq	r6,r20,10007c94 <_malloc_r+0x74c>
100078fc:	b9000017 	ldw	r4,0(r23)
10007900:	00bfffc4 	movi	r2,-1
10007904:	2080ee26 	beq	r4,r2,10007cc0 <_malloc_r+0x778>
10007908:	a185c83a 	sub	r2,r20,r6
1000790c:	10c5883a 	add	r2,r2,r3
10007910:	e0800015 	stw	r2,0(fp)
10007914:	a0c001cc 	andi	r3,r20,7
10007918:	1800bc26 	beq	r3,zero,10007c0c <_malloc_r+0x6c4>
1000791c:	a0e9c83a 	sub	r20,r20,r3
10007920:	00840204 	movi	r2,4104
10007924:	a5000204 	addi	r20,r20,8
10007928:	10c7c83a 	sub	r3,r2,r3
1000792c:	a545883a 	add	r2,r20,r21
10007930:	1083ffcc 	andi	r2,r2,4095
10007934:	18abc83a 	sub	r21,r3,r2
10007938:	a80b883a 	mov	r5,r21
1000793c:	9009883a 	mov	r4,r18
10007940:	00098940 	call	10009894 <_sbrk_r>
10007944:	00ffffc4 	movi	r3,-1
10007948:	10c0e126 	beq	r2,r3,10007cd0 <_malloc_r+0x788>
1000794c:	1505c83a 	sub	r2,r2,r20
10007950:	1545883a 	add	r2,r2,r21
10007954:	10800054 	ori	r2,r2,1
10007958:	e0c00017 	ldw	r3,0(fp)
1000795c:	9d000215 	stw	r20,8(r19)
10007960:	a0800115 	stw	r2,4(r20)
10007964:	a8c7883a 	add	r3,r21,r3
10007968:	e0c00015 	stw	r3,0(fp)
1000796c:	84c00e26 	beq	r16,r19,100079a8 <_malloc_r+0x460>
10007970:	018003c4 	movi	r6,15
10007974:	3580a72e 	bgeu	r6,r22,10007c14 <_malloc_r+0x6cc>
10007978:	81400117 	ldw	r5,4(r16)
1000797c:	013ffe04 	movi	r4,-8
10007980:	b0bffd04 	addi	r2,r22,-12
10007984:	1104703a 	and	r2,r2,r4
10007988:	2900004c 	andi	r4,r5,1
1000798c:	2088b03a 	or	r4,r4,r2
10007990:	81000115 	stw	r4,4(r16)
10007994:	01400144 	movi	r5,5
10007998:	8089883a 	add	r4,r16,r2
1000799c:	21400115 	stw	r5,4(r4)
100079a0:	21400215 	stw	r5,8(r4)
100079a4:	3080cd36 	bltu	r6,r2,10007cdc <_malloc_r+0x794>
100079a8:	00840074 	movhi	r2,4097
100079ac:	10968204 	addi	r2,r2,23048
100079b0:	11000017 	ldw	r4,0(r2)
100079b4:	20c0012e 	bgeu	r4,r3,100079bc <_malloc_r+0x474>
100079b8:	10c00015 	stw	r3,0(r2)
100079bc:	00840074 	movhi	r2,4097
100079c0:	10968104 	addi	r2,r2,23044
100079c4:	11000017 	ldw	r4,0(r2)
100079c8:	9c000217 	ldw	r16,8(r19)
100079cc:	20c0012e 	bgeu	r4,r3,100079d4 <_malloc_r+0x48c>
100079d0:	10c00015 	stw	r3,0(r2)
100079d4:	80c00117 	ldw	r3,4(r16)
100079d8:	00bfff04 	movi	r2,-4
100079dc:	1886703a 	and	r3,r3,r2
100079e0:	1c45c83a 	sub	r2,r3,r17
100079e4:	1c400236 	bltu	r3,r17,100079f0 <_malloc_r+0x4a8>
100079e8:	00c003c4 	movi	r3,15
100079ec:	18800416 	blt	r3,r2,10007a00 <_malloc_r+0x4b8>
100079f0:	9009883a 	mov	r4,r18
100079f4:	000f7440 	call	1000f744 <__malloc_unlock>
100079f8:	0005883a 	mov	r2,zero
100079fc:	003f7b06 	br	100077ec <__alt_data_end+0xf80077ec>
10007a00:	88c00054 	ori	r3,r17,1
10007a04:	80c00115 	stw	r3,4(r16)
10007a08:	8463883a 	add	r17,r16,r17
10007a0c:	10800054 	ori	r2,r2,1
10007a10:	9c400215 	stw	r17,8(r19)
10007a14:	88800115 	stw	r2,4(r17)
10007a18:	9009883a 	mov	r4,r18
10007a1c:	000f7440 	call	1000f744 <__malloc_unlock>
10007a20:	80800204 	addi	r2,r16,8
10007a24:	003f7106 	br	100077ec <__alt_data_end+0xf80077ec>
10007a28:	00c00504 	movi	r3,20
10007a2c:	18804a2e 	bgeu	r3,r2,10007b58 <_malloc_r+0x610>
10007a30:	00c01504 	movi	r3,84
10007a34:	18806e36 	bltu	r3,r2,10007bf0 <_malloc_r+0x6a8>
10007a38:	8804d33a 	srli	r2,r17,12
10007a3c:	12001bc4 	addi	r8,r2,111
10007a40:	11c01b84 	addi	r7,r2,110
10007a44:	4209883a 	add	r4,r8,r8
10007a48:	003edd06 	br	100075c0 <__alt_data_end+0xf80075c0>
10007a4c:	3804d27a 	srli	r2,r7,9
10007a50:	00c00104 	movi	r3,4
10007a54:	1880442e 	bgeu	r3,r2,10007b68 <_malloc_r+0x620>
10007a58:	00c00504 	movi	r3,20
10007a5c:	18808136 	bltu	r3,r2,10007c64 <_malloc_r+0x71c>
10007a60:	11401704 	addi	r5,r2,92
10007a64:	10c016c4 	addi	r3,r2,91
10007a68:	294b883a 	add	r5,r5,r5
10007a6c:	294b883a 	add	r5,r5,r5
10007a70:	294b883a 	add	r5,r5,r5
10007a74:	994b883a 	add	r5,r19,r5
10007a78:	28800017 	ldw	r2,0(r5)
10007a7c:	01840074 	movhi	r6,4097
10007a80:	297ffe04 	addi	r5,r5,-8
10007a84:	318a2e04 	addi	r6,r6,10424
10007a88:	28806526 	beq	r5,r2,10007c20 <_malloc_r+0x6d8>
10007a8c:	01bfff04 	movi	r6,-4
10007a90:	10c00117 	ldw	r3,4(r2)
10007a94:	1986703a 	and	r3,r3,r6
10007a98:	38c0022e 	bgeu	r7,r3,10007aa4 <_malloc_r+0x55c>
10007a9c:	10800217 	ldw	r2,8(r2)
10007aa0:	28bffb1e 	bne	r5,r2,10007a90 <__alt_data_end+0xf8007a90>
10007aa4:	11400317 	ldw	r5,12(r2)
10007aa8:	98c00117 	ldw	r3,4(r19)
10007aac:	81400315 	stw	r5,12(r16)
10007ab0:	80800215 	stw	r2,8(r16)
10007ab4:	2c000215 	stw	r16,8(r5)
10007ab8:	14000315 	stw	r16,12(r2)
10007abc:	003ef806 	br	100076a0 <__alt_data_end+0xf80076a0>
10007ac0:	88c00054 	ori	r3,r17,1
10007ac4:	80c00115 	stw	r3,4(r16)
10007ac8:	8463883a 	add	r17,r16,r17
10007acc:	34400515 	stw	r17,20(r6)
10007ad0:	34400415 	stw	r17,16(r6)
10007ad4:	10c00054 	ori	r3,r2,1
10007ad8:	8a000315 	stw	r8,12(r17)
10007adc:	8a000215 	stw	r8,8(r17)
10007ae0:	88c00115 	stw	r3,4(r17)
10007ae4:	88a3883a 	add	r17,r17,r2
10007ae8:	88800015 	stw	r2,0(r17)
10007aec:	9009883a 	mov	r4,r18
10007af0:	000f7440 	call	1000f744 <__malloc_unlock>
10007af4:	80800204 	addi	r2,r16,8
10007af8:	003f3c06 	br	100077ec <__alt_data_end+0xf80077ec>
10007afc:	30c00117 	ldw	r3,4(r6)
10007b00:	003ee706 	br	100076a0 <__alt_data_end+0xf80076a0>
10007b04:	5ac00044 	addi	r11,r11,1
10007b08:	588000cc 	andi	r2,r11,3
10007b0c:	31800204 	addi	r6,r6,8
10007b10:	103efd1e 	bne	r2,zero,10007708 <__alt_data_end+0xf8007708>
10007b14:	00002406 	br	10007ba8 <_malloc_r+0x660>
10007b18:	14000317 	ldw	r16,12(r2)
10007b1c:	143f251e 	bne	r2,r16,100077b4 <__alt_data_end+0xf80077b4>
10007b20:	21000084 	addi	r4,r4,2
10007b24:	003ebc06 	br	10007618 <__alt_data_end+0xf8007618>
10007b28:	8085883a 	add	r2,r16,r2
10007b2c:	10c00117 	ldw	r3,4(r2)
10007b30:	81000317 	ldw	r4,12(r16)
10007b34:	81400217 	ldw	r5,8(r16)
10007b38:	18c00054 	ori	r3,r3,1
10007b3c:	10c00115 	stw	r3,4(r2)
10007b40:	29000315 	stw	r4,12(r5)
10007b44:	21400215 	stw	r5,8(r4)
10007b48:	9009883a 	mov	r4,r18
10007b4c:	000f7440 	call	1000f744 <__malloc_unlock>
10007b50:	80800204 	addi	r2,r16,8
10007b54:	003f2506 	br	100077ec <__alt_data_end+0xf80077ec>
10007b58:	12001704 	addi	r8,r2,92
10007b5c:	11c016c4 	addi	r7,r2,91
10007b60:	4209883a 	add	r4,r8,r8
10007b64:	003e9606 	br	100075c0 <__alt_data_end+0xf80075c0>
10007b68:	3804d1ba 	srli	r2,r7,6
10007b6c:	11400e44 	addi	r5,r2,57
10007b70:	10c00e04 	addi	r3,r2,56
10007b74:	294b883a 	add	r5,r5,r5
10007b78:	003fbc06 	br	10007a6c <__alt_data_end+0xf8007a6c>
10007b7c:	84ff5926 	beq	r16,r19,100078e4 <__alt_data_end+0xf80078e4>
10007b80:	00840074 	movhi	r2,4097
10007b84:	108a2e04 	addi	r2,r2,10424
10007b88:	14000217 	ldw	r16,8(r2)
10007b8c:	00bfff04 	movi	r2,-4
10007b90:	80c00117 	ldw	r3,4(r16)
10007b94:	1886703a 	and	r3,r3,r2
10007b98:	003f9106 	br	100079e0 <__alt_data_end+0xf80079e0>
10007b9c:	60800217 	ldw	r2,8(r12)
10007ba0:	213fffc4 	addi	r4,r4,-1
10007ba4:	1300651e 	bne	r2,r12,10007d3c <_malloc_r+0x7f4>
10007ba8:	208000cc 	andi	r2,r4,3
10007bac:	633ffe04 	addi	r12,r12,-8
10007bb0:	103ffa1e 	bne	r2,zero,10007b9c <__alt_data_end+0xf8007b9c>
10007bb4:	98800117 	ldw	r2,4(r19)
10007bb8:	0146303a 	nor	r3,zero,r5
10007bbc:	1884703a 	and	r2,r3,r2
10007bc0:	98800115 	stw	r2,4(r19)
10007bc4:	294b883a 	add	r5,r5,r5
10007bc8:	117f2836 	bltu	r2,r5,1000786c <__alt_data_end+0xf800786c>
10007bcc:	283f2726 	beq	r5,zero,1000786c <__alt_data_end+0xf800786c>
10007bd0:	2886703a 	and	r3,r5,r2
10007bd4:	5809883a 	mov	r4,r11
10007bd8:	183ec31e 	bne	r3,zero,100076e8 <__alt_data_end+0xf80076e8>
10007bdc:	294b883a 	add	r5,r5,r5
10007be0:	2886703a 	and	r3,r5,r2
10007be4:	21000104 	addi	r4,r4,4
10007be8:	183ffc26 	beq	r3,zero,10007bdc <__alt_data_end+0xf8007bdc>
10007bec:	003ebe06 	br	100076e8 <__alt_data_end+0xf80076e8>
10007bf0:	00c05504 	movi	r3,340
10007bf4:	18801236 	bltu	r3,r2,10007c40 <_malloc_r+0x6f8>
10007bf8:	8804d3fa 	srli	r2,r17,15
10007bfc:	12001e04 	addi	r8,r2,120
10007c00:	11c01dc4 	addi	r7,r2,119
10007c04:	4209883a 	add	r4,r8,r8
10007c08:	003e6d06 	br	100075c0 <__alt_data_end+0xf80075c0>
10007c0c:	00c40004 	movi	r3,4096
10007c10:	003f4606 	br	1000792c <__alt_data_end+0xf800792c>
10007c14:	00800044 	movi	r2,1
10007c18:	a0800115 	stw	r2,4(r20)
10007c1c:	003f7406 	br	100079f0 <__alt_data_end+0xf80079f0>
10007c20:	1805d0ba 	srai	r2,r3,2
10007c24:	01c00044 	movi	r7,1
10007c28:	30c00117 	ldw	r3,4(r6)
10007c2c:	388e983a 	sll	r7,r7,r2
10007c30:	2805883a 	mov	r2,r5
10007c34:	38c6b03a 	or	r3,r7,r3
10007c38:	30c00115 	stw	r3,4(r6)
10007c3c:	003f9b06 	br	10007aac <__alt_data_end+0xf8007aac>
10007c40:	00c15504 	movi	r3,1364
10007c44:	18801a36 	bltu	r3,r2,10007cb0 <_malloc_r+0x768>
10007c48:	8804d4ba 	srli	r2,r17,18
10007c4c:	12001f44 	addi	r8,r2,125
10007c50:	11c01f04 	addi	r7,r2,124
10007c54:	4209883a 	add	r4,r8,r8
10007c58:	003e5906 	br	100075c0 <__alt_data_end+0xf80075c0>
10007c5c:	ad400404 	addi	r21,r21,16
10007c60:	003f1706 	br	100078c0 <__alt_data_end+0xf80078c0>
10007c64:	00c01504 	movi	r3,84
10007c68:	18802336 	bltu	r3,r2,10007cf8 <_malloc_r+0x7b0>
10007c6c:	3804d33a 	srli	r2,r7,12
10007c70:	11401bc4 	addi	r5,r2,111
10007c74:	10c01b84 	addi	r3,r2,110
10007c78:	294b883a 	add	r5,r5,r5
10007c7c:	003f7b06 	br	10007a6c <__alt_data_end+0xf8007a6c>
10007c80:	9c000217 	ldw	r16,8(r19)
10007c84:	00bfff04 	movi	r2,-4
10007c88:	80c00117 	ldw	r3,4(r16)
10007c8c:	1886703a 	and	r3,r3,r2
10007c90:	003f5306 	br	100079e0 <__alt_data_end+0xf80079e0>
10007c94:	3083ffcc 	andi	r2,r6,4095
10007c98:	103f181e 	bne	r2,zero,100078fc <__alt_data_end+0xf80078fc>
10007c9c:	99000217 	ldw	r4,8(r19)
10007ca0:	b545883a 	add	r2,r22,r21
10007ca4:	10800054 	ori	r2,r2,1
10007ca8:	20800115 	stw	r2,4(r4)
10007cac:	003f3e06 	br	100079a8 <__alt_data_end+0xf80079a8>
10007cb0:	01003f84 	movi	r4,254
10007cb4:	02001fc4 	movi	r8,127
10007cb8:	01c01f84 	movi	r7,126
10007cbc:	003e4006 	br	100075c0 <__alt_data_end+0xf80075c0>
10007cc0:	00840074 	movhi	r2,4097
10007cc4:	108fb504 	addi	r2,r2,16084
10007cc8:	15000015 	stw	r20,0(r2)
10007ccc:	003f1106 	br	10007914 <__alt_data_end+0xf8007914>
10007cd0:	00800044 	movi	r2,1
10007cd4:	002b883a 	mov	r21,zero
10007cd8:	003f1f06 	br	10007958 <__alt_data_end+0xf8007958>
10007cdc:	81400204 	addi	r5,r16,8
10007ce0:	9009883a 	mov	r4,r18
10007ce4:	00069500 	call	10006950 <_free_r>
10007ce8:	00840074 	movhi	r2,4097
10007cec:	10968c04 	addi	r2,r2,23088
10007cf0:	10c00017 	ldw	r3,0(r2)
10007cf4:	003f2c06 	br	100079a8 <__alt_data_end+0xf80079a8>
10007cf8:	00c05504 	movi	r3,340
10007cfc:	18800536 	bltu	r3,r2,10007d14 <_malloc_r+0x7cc>
10007d00:	3804d3fa 	srli	r2,r7,15
10007d04:	11401e04 	addi	r5,r2,120
10007d08:	10c01dc4 	addi	r3,r2,119
10007d0c:	294b883a 	add	r5,r5,r5
10007d10:	003f5606 	br	10007a6c <__alt_data_end+0xf8007a6c>
10007d14:	00c15504 	movi	r3,1364
10007d18:	18800536 	bltu	r3,r2,10007d30 <_malloc_r+0x7e8>
10007d1c:	3804d4ba 	srli	r2,r7,18
10007d20:	11401f44 	addi	r5,r2,125
10007d24:	10c01f04 	addi	r3,r2,124
10007d28:	294b883a 	add	r5,r5,r5
10007d2c:	003f4f06 	br	10007a6c <__alt_data_end+0xf8007a6c>
10007d30:	01403f84 	movi	r5,254
10007d34:	00c01f84 	movi	r3,126
10007d38:	003f4c06 	br	10007a6c <__alt_data_end+0xf8007a6c>
10007d3c:	98800117 	ldw	r2,4(r19)
10007d40:	003fa006 	br	10007bc4 <__alt_data_end+0xf8007bc4>
10007d44:	8808d0fa 	srli	r4,r17,3
10007d48:	20800044 	addi	r2,r4,1
10007d4c:	1085883a 	add	r2,r2,r2
10007d50:	003e9006 	br	10007794 <__alt_data_end+0xf8007794>

10007d54 <memchr>:
10007d54:	208000cc 	andi	r2,r4,3
10007d58:	280f883a 	mov	r7,r5
10007d5c:	10003426 	beq	r2,zero,10007e30 <memchr+0xdc>
10007d60:	30bfffc4 	addi	r2,r6,-1
10007d64:	30001a26 	beq	r6,zero,10007dd0 <memchr+0x7c>
10007d68:	20c00003 	ldbu	r3,0(r4)
10007d6c:	29803fcc 	andi	r6,r5,255
10007d70:	30c0051e 	bne	r6,r3,10007d88 <memchr+0x34>
10007d74:	00001806 	br	10007dd8 <memchr+0x84>
10007d78:	10001526 	beq	r2,zero,10007dd0 <memchr+0x7c>
10007d7c:	20c00003 	ldbu	r3,0(r4)
10007d80:	10bfffc4 	addi	r2,r2,-1
10007d84:	30c01426 	beq	r6,r3,10007dd8 <memchr+0x84>
10007d88:	21000044 	addi	r4,r4,1
10007d8c:	20c000cc 	andi	r3,r4,3
10007d90:	183ff91e 	bne	r3,zero,10007d78 <__alt_data_end+0xf8007d78>
10007d94:	020000c4 	movi	r8,3
10007d98:	40801136 	bltu	r8,r2,10007de0 <memchr+0x8c>
10007d9c:	10000c26 	beq	r2,zero,10007dd0 <memchr+0x7c>
10007da0:	20c00003 	ldbu	r3,0(r4)
10007da4:	29403fcc 	andi	r5,r5,255
10007da8:	28c00b26 	beq	r5,r3,10007dd8 <memchr+0x84>
10007dac:	20c00044 	addi	r3,r4,1
10007db0:	39803fcc 	andi	r6,r7,255
10007db4:	2089883a 	add	r4,r4,r2
10007db8:	00000306 	br	10007dc8 <memchr+0x74>
10007dbc:	18c00044 	addi	r3,r3,1
10007dc0:	197fffc3 	ldbu	r5,-1(r3)
10007dc4:	31400526 	beq	r6,r5,10007ddc <memchr+0x88>
10007dc8:	1805883a 	mov	r2,r3
10007dcc:	20fffb1e 	bne	r4,r3,10007dbc <__alt_data_end+0xf8007dbc>
10007dd0:	0005883a 	mov	r2,zero
10007dd4:	f800283a 	ret
10007dd8:	2005883a 	mov	r2,r4
10007ddc:	f800283a 	ret
10007de0:	28c03fcc 	andi	r3,r5,255
10007de4:	1812923a 	slli	r9,r3,8
10007de8:	02ffbff4 	movhi	r11,65279
10007dec:	02a02074 	movhi	r10,32897
10007df0:	48d2b03a 	or	r9,r9,r3
10007df4:	4806943a 	slli	r3,r9,16
10007df8:	5affbfc4 	addi	r11,r11,-257
10007dfc:	52a02004 	addi	r10,r10,-32640
10007e00:	48d2b03a 	or	r9,r9,r3
10007e04:	20c00017 	ldw	r3,0(r4)
10007e08:	48c6f03a 	xor	r3,r9,r3
10007e0c:	1acd883a 	add	r6,r3,r11
10007e10:	00c6303a 	nor	r3,zero,r3
10007e14:	30c6703a 	and	r3,r6,r3
10007e18:	1a86703a 	and	r3,r3,r10
10007e1c:	183fe01e 	bne	r3,zero,10007da0 <__alt_data_end+0xf8007da0>
10007e20:	10bfff04 	addi	r2,r2,-4
10007e24:	21000104 	addi	r4,r4,4
10007e28:	40bff636 	bltu	r8,r2,10007e04 <__alt_data_end+0xf8007e04>
10007e2c:	003fdb06 	br	10007d9c <__alt_data_end+0xf8007d9c>
10007e30:	3005883a 	mov	r2,r6
10007e34:	003fd706 	br	10007d94 <__alt_data_end+0xf8007d94>

10007e38 <memcpy>:
10007e38:	defffd04 	addi	sp,sp,-12
10007e3c:	dfc00215 	stw	ra,8(sp)
10007e40:	dc400115 	stw	r17,4(sp)
10007e44:	dc000015 	stw	r16,0(sp)
10007e48:	00c003c4 	movi	r3,15
10007e4c:	2005883a 	mov	r2,r4
10007e50:	1980452e 	bgeu	r3,r6,10007f68 <memcpy+0x130>
10007e54:	2906b03a 	or	r3,r5,r4
10007e58:	18c000cc 	andi	r3,r3,3
10007e5c:	1800441e 	bne	r3,zero,10007f70 <memcpy+0x138>
10007e60:	347ffc04 	addi	r17,r6,-16
10007e64:	8822d13a 	srli	r17,r17,4
10007e68:	28c00104 	addi	r3,r5,4
10007e6c:	23400104 	addi	r13,r4,4
10007e70:	8820913a 	slli	r16,r17,4
10007e74:	2b000204 	addi	r12,r5,8
10007e78:	22c00204 	addi	r11,r4,8
10007e7c:	84000504 	addi	r16,r16,20
10007e80:	2a800304 	addi	r10,r5,12
10007e84:	22400304 	addi	r9,r4,12
10007e88:	2c21883a 	add	r16,r5,r16
10007e8c:	2811883a 	mov	r8,r5
10007e90:	200f883a 	mov	r7,r4
10007e94:	41000017 	ldw	r4,0(r8)
10007e98:	1fc00017 	ldw	ra,0(r3)
10007e9c:	63c00017 	ldw	r15,0(r12)
10007ea0:	39000015 	stw	r4,0(r7)
10007ea4:	53800017 	ldw	r14,0(r10)
10007ea8:	6fc00015 	stw	ra,0(r13)
10007eac:	5bc00015 	stw	r15,0(r11)
10007eb0:	4b800015 	stw	r14,0(r9)
10007eb4:	18c00404 	addi	r3,r3,16
10007eb8:	39c00404 	addi	r7,r7,16
10007ebc:	42000404 	addi	r8,r8,16
10007ec0:	6b400404 	addi	r13,r13,16
10007ec4:	63000404 	addi	r12,r12,16
10007ec8:	5ac00404 	addi	r11,r11,16
10007ecc:	52800404 	addi	r10,r10,16
10007ed0:	4a400404 	addi	r9,r9,16
10007ed4:	1c3fef1e 	bne	r3,r16,10007e94 <__alt_data_end+0xf8007e94>
10007ed8:	89c00044 	addi	r7,r17,1
10007edc:	380e913a 	slli	r7,r7,4
10007ee0:	310003cc 	andi	r4,r6,15
10007ee4:	02c000c4 	movi	r11,3
10007ee8:	11c7883a 	add	r3,r2,r7
10007eec:	29cb883a 	add	r5,r5,r7
10007ef0:	5900212e 	bgeu	r11,r4,10007f78 <memcpy+0x140>
10007ef4:	1813883a 	mov	r9,r3
10007ef8:	2811883a 	mov	r8,r5
10007efc:	200f883a 	mov	r7,r4
10007f00:	42800017 	ldw	r10,0(r8)
10007f04:	4a400104 	addi	r9,r9,4
10007f08:	39ffff04 	addi	r7,r7,-4
10007f0c:	4abfff15 	stw	r10,-4(r9)
10007f10:	42000104 	addi	r8,r8,4
10007f14:	59fffa36 	bltu	r11,r7,10007f00 <__alt_data_end+0xf8007f00>
10007f18:	213fff04 	addi	r4,r4,-4
10007f1c:	2008d0ba 	srli	r4,r4,2
10007f20:	318000cc 	andi	r6,r6,3
10007f24:	21000044 	addi	r4,r4,1
10007f28:	2109883a 	add	r4,r4,r4
10007f2c:	2109883a 	add	r4,r4,r4
10007f30:	1907883a 	add	r3,r3,r4
10007f34:	290b883a 	add	r5,r5,r4
10007f38:	30000626 	beq	r6,zero,10007f54 <memcpy+0x11c>
10007f3c:	198d883a 	add	r6,r3,r6
10007f40:	29c00003 	ldbu	r7,0(r5)
10007f44:	18c00044 	addi	r3,r3,1
10007f48:	29400044 	addi	r5,r5,1
10007f4c:	19ffffc5 	stb	r7,-1(r3)
10007f50:	19bffb1e 	bne	r3,r6,10007f40 <__alt_data_end+0xf8007f40>
10007f54:	dfc00217 	ldw	ra,8(sp)
10007f58:	dc400117 	ldw	r17,4(sp)
10007f5c:	dc000017 	ldw	r16,0(sp)
10007f60:	dec00304 	addi	sp,sp,12
10007f64:	f800283a 	ret
10007f68:	2007883a 	mov	r3,r4
10007f6c:	003ff206 	br	10007f38 <__alt_data_end+0xf8007f38>
10007f70:	2007883a 	mov	r3,r4
10007f74:	003ff106 	br	10007f3c <__alt_data_end+0xf8007f3c>
10007f78:	200d883a 	mov	r6,r4
10007f7c:	003fee06 	br	10007f38 <__alt_data_end+0xf8007f38>

10007f80 <memmove>:
10007f80:	2005883a 	mov	r2,r4
10007f84:	29000b2e 	bgeu	r5,r4,10007fb4 <memmove+0x34>
10007f88:	298f883a 	add	r7,r5,r6
10007f8c:	21c0092e 	bgeu	r4,r7,10007fb4 <memmove+0x34>
10007f90:	2187883a 	add	r3,r4,r6
10007f94:	198bc83a 	sub	r5,r3,r6
10007f98:	30004826 	beq	r6,zero,100080bc <memmove+0x13c>
10007f9c:	39ffffc4 	addi	r7,r7,-1
10007fa0:	39000003 	ldbu	r4,0(r7)
10007fa4:	18ffffc4 	addi	r3,r3,-1
10007fa8:	19000005 	stb	r4,0(r3)
10007fac:	28fffb1e 	bne	r5,r3,10007f9c <__alt_data_end+0xf8007f9c>
10007fb0:	f800283a 	ret
10007fb4:	00c003c4 	movi	r3,15
10007fb8:	1980412e 	bgeu	r3,r6,100080c0 <memmove+0x140>
10007fbc:	2886b03a 	or	r3,r5,r2
10007fc0:	18c000cc 	andi	r3,r3,3
10007fc4:	1800401e 	bne	r3,zero,100080c8 <memmove+0x148>
10007fc8:	33fffc04 	addi	r15,r6,-16
10007fcc:	781ed13a 	srli	r15,r15,4
10007fd0:	28c00104 	addi	r3,r5,4
10007fd4:	13400104 	addi	r13,r2,4
10007fd8:	781c913a 	slli	r14,r15,4
10007fdc:	2b000204 	addi	r12,r5,8
10007fe0:	12c00204 	addi	r11,r2,8
10007fe4:	73800504 	addi	r14,r14,20
10007fe8:	2a800304 	addi	r10,r5,12
10007fec:	12400304 	addi	r9,r2,12
10007ff0:	2b9d883a 	add	r14,r5,r14
10007ff4:	2811883a 	mov	r8,r5
10007ff8:	100f883a 	mov	r7,r2
10007ffc:	41000017 	ldw	r4,0(r8)
10008000:	39c00404 	addi	r7,r7,16
10008004:	18c00404 	addi	r3,r3,16
10008008:	393ffc15 	stw	r4,-16(r7)
1000800c:	193ffc17 	ldw	r4,-16(r3)
10008010:	6b400404 	addi	r13,r13,16
10008014:	5ac00404 	addi	r11,r11,16
10008018:	693ffc15 	stw	r4,-16(r13)
1000801c:	61000017 	ldw	r4,0(r12)
10008020:	4a400404 	addi	r9,r9,16
10008024:	42000404 	addi	r8,r8,16
10008028:	593ffc15 	stw	r4,-16(r11)
1000802c:	51000017 	ldw	r4,0(r10)
10008030:	63000404 	addi	r12,r12,16
10008034:	52800404 	addi	r10,r10,16
10008038:	493ffc15 	stw	r4,-16(r9)
1000803c:	1bbfef1e 	bne	r3,r14,10007ffc <__alt_data_end+0xf8007ffc>
10008040:	79000044 	addi	r4,r15,1
10008044:	2008913a 	slli	r4,r4,4
10008048:	328003cc 	andi	r10,r6,15
1000804c:	02c000c4 	movi	r11,3
10008050:	1107883a 	add	r3,r2,r4
10008054:	290b883a 	add	r5,r5,r4
10008058:	5a801e2e 	bgeu	r11,r10,100080d4 <memmove+0x154>
1000805c:	1813883a 	mov	r9,r3
10008060:	2811883a 	mov	r8,r5
10008064:	500f883a 	mov	r7,r10
10008068:	41000017 	ldw	r4,0(r8)
1000806c:	4a400104 	addi	r9,r9,4
10008070:	39ffff04 	addi	r7,r7,-4
10008074:	493fff15 	stw	r4,-4(r9)
10008078:	42000104 	addi	r8,r8,4
1000807c:	59fffa36 	bltu	r11,r7,10008068 <__alt_data_end+0xf8008068>
10008080:	513fff04 	addi	r4,r10,-4
10008084:	2008d0ba 	srli	r4,r4,2
10008088:	318000cc 	andi	r6,r6,3
1000808c:	21000044 	addi	r4,r4,1
10008090:	2109883a 	add	r4,r4,r4
10008094:	2109883a 	add	r4,r4,r4
10008098:	1907883a 	add	r3,r3,r4
1000809c:	290b883a 	add	r5,r5,r4
100080a0:	30000b26 	beq	r6,zero,100080d0 <memmove+0x150>
100080a4:	198d883a 	add	r6,r3,r6
100080a8:	29c00003 	ldbu	r7,0(r5)
100080ac:	18c00044 	addi	r3,r3,1
100080b0:	29400044 	addi	r5,r5,1
100080b4:	19ffffc5 	stb	r7,-1(r3)
100080b8:	19bffb1e 	bne	r3,r6,100080a8 <__alt_data_end+0xf80080a8>
100080bc:	f800283a 	ret
100080c0:	1007883a 	mov	r3,r2
100080c4:	003ff606 	br	100080a0 <__alt_data_end+0xf80080a0>
100080c8:	1007883a 	mov	r3,r2
100080cc:	003ff506 	br	100080a4 <__alt_data_end+0xf80080a4>
100080d0:	f800283a 	ret
100080d4:	500d883a 	mov	r6,r10
100080d8:	003ff106 	br	100080a0 <__alt_data_end+0xf80080a0>

100080dc <memset>:
100080dc:	20c000cc 	andi	r3,r4,3
100080e0:	2005883a 	mov	r2,r4
100080e4:	18004426 	beq	r3,zero,100081f8 <memset+0x11c>
100080e8:	31ffffc4 	addi	r7,r6,-1
100080ec:	30004026 	beq	r6,zero,100081f0 <memset+0x114>
100080f0:	2813883a 	mov	r9,r5
100080f4:	200d883a 	mov	r6,r4
100080f8:	2007883a 	mov	r3,r4
100080fc:	00000406 	br	10008110 <memset+0x34>
10008100:	3a3fffc4 	addi	r8,r7,-1
10008104:	31800044 	addi	r6,r6,1
10008108:	38003926 	beq	r7,zero,100081f0 <memset+0x114>
1000810c:	400f883a 	mov	r7,r8
10008110:	18c00044 	addi	r3,r3,1
10008114:	32400005 	stb	r9,0(r6)
10008118:	1a0000cc 	andi	r8,r3,3
1000811c:	403ff81e 	bne	r8,zero,10008100 <__alt_data_end+0xf8008100>
10008120:	010000c4 	movi	r4,3
10008124:	21c02d2e 	bgeu	r4,r7,100081dc <memset+0x100>
10008128:	29003fcc 	andi	r4,r5,255
1000812c:	200c923a 	slli	r6,r4,8
10008130:	3108b03a 	or	r4,r6,r4
10008134:	200c943a 	slli	r6,r4,16
10008138:	218cb03a 	or	r6,r4,r6
1000813c:	010003c4 	movi	r4,15
10008140:	21c0182e 	bgeu	r4,r7,100081a4 <memset+0xc8>
10008144:	3b3ffc04 	addi	r12,r7,-16
10008148:	6018d13a 	srli	r12,r12,4
1000814c:	1a000104 	addi	r8,r3,4
10008150:	1ac00204 	addi	r11,r3,8
10008154:	6008913a 	slli	r4,r12,4
10008158:	1a800304 	addi	r10,r3,12
1000815c:	1813883a 	mov	r9,r3
10008160:	21000504 	addi	r4,r4,20
10008164:	1909883a 	add	r4,r3,r4
10008168:	49800015 	stw	r6,0(r9)
1000816c:	41800015 	stw	r6,0(r8)
10008170:	59800015 	stw	r6,0(r11)
10008174:	51800015 	stw	r6,0(r10)
10008178:	42000404 	addi	r8,r8,16
1000817c:	4a400404 	addi	r9,r9,16
10008180:	5ac00404 	addi	r11,r11,16
10008184:	52800404 	addi	r10,r10,16
10008188:	413ff71e 	bne	r8,r4,10008168 <__alt_data_end+0xf8008168>
1000818c:	63000044 	addi	r12,r12,1
10008190:	6018913a 	slli	r12,r12,4
10008194:	39c003cc 	andi	r7,r7,15
10008198:	010000c4 	movi	r4,3
1000819c:	1b07883a 	add	r3,r3,r12
100081a0:	21c00e2e 	bgeu	r4,r7,100081dc <memset+0x100>
100081a4:	1813883a 	mov	r9,r3
100081a8:	3811883a 	mov	r8,r7
100081ac:	010000c4 	movi	r4,3
100081b0:	49800015 	stw	r6,0(r9)
100081b4:	423fff04 	addi	r8,r8,-4
100081b8:	4a400104 	addi	r9,r9,4
100081bc:	223ffc36 	bltu	r4,r8,100081b0 <__alt_data_end+0xf80081b0>
100081c0:	393fff04 	addi	r4,r7,-4
100081c4:	2008d0ba 	srli	r4,r4,2
100081c8:	39c000cc 	andi	r7,r7,3
100081cc:	21000044 	addi	r4,r4,1
100081d0:	2109883a 	add	r4,r4,r4
100081d4:	2109883a 	add	r4,r4,r4
100081d8:	1907883a 	add	r3,r3,r4
100081dc:	38000526 	beq	r7,zero,100081f4 <memset+0x118>
100081e0:	19cf883a 	add	r7,r3,r7
100081e4:	19400005 	stb	r5,0(r3)
100081e8:	18c00044 	addi	r3,r3,1
100081ec:	38fffd1e 	bne	r7,r3,100081e4 <__alt_data_end+0xf80081e4>
100081f0:	f800283a 	ret
100081f4:	f800283a 	ret
100081f8:	2007883a 	mov	r3,r4
100081fc:	300f883a 	mov	r7,r6
10008200:	003fc706 	br	10008120 <__alt_data_end+0xf8008120>

10008204 <_Balloc>:
10008204:	20801317 	ldw	r2,76(r4)
10008208:	defffc04 	addi	sp,sp,-16
1000820c:	dc400115 	stw	r17,4(sp)
10008210:	dc000015 	stw	r16,0(sp)
10008214:	dfc00315 	stw	ra,12(sp)
10008218:	dc800215 	stw	r18,8(sp)
1000821c:	2023883a 	mov	r17,r4
10008220:	2821883a 	mov	r16,r5
10008224:	10000f26 	beq	r2,zero,10008264 <_Balloc+0x60>
10008228:	8407883a 	add	r3,r16,r16
1000822c:	18c7883a 	add	r3,r3,r3
10008230:	10c7883a 	add	r3,r2,r3
10008234:	18800017 	ldw	r2,0(r3)
10008238:	10001126 	beq	r2,zero,10008280 <_Balloc+0x7c>
1000823c:	11000017 	ldw	r4,0(r2)
10008240:	19000015 	stw	r4,0(r3)
10008244:	10000415 	stw	zero,16(r2)
10008248:	10000315 	stw	zero,12(r2)
1000824c:	dfc00317 	ldw	ra,12(sp)
10008250:	dc800217 	ldw	r18,8(sp)
10008254:	dc400117 	ldw	r17,4(sp)
10008258:	dc000017 	ldw	r16,0(sp)
1000825c:	dec00404 	addi	sp,sp,16
10008260:	f800283a 	ret
10008264:	01800844 	movi	r6,33
10008268:	01400104 	movi	r5,4
1000826c:	000b2ac0 	call	1000b2ac <_calloc_r>
10008270:	88801315 	stw	r2,76(r17)
10008274:	103fec1e 	bne	r2,zero,10008228 <__alt_data_end+0xf8008228>
10008278:	0005883a 	mov	r2,zero
1000827c:	003ff306 	br	1000824c <__alt_data_end+0xf800824c>
10008280:	01400044 	movi	r5,1
10008284:	2c24983a 	sll	r18,r5,r16
10008288:	8809883a 	mov	r4,r17
1000828c:	91800144 	addi	r6,r18,5
10008290:	318d883a 	add	r6,r6,r6
10008294:	318d883a 	add	r6,r6,r6
10008298:	000b2ac0 	call	1000b2ac <_calloc_r>
1000829c:	103ff626 	beq	r2,zero,10008278 <__alt_data_end+0xf8008278>
100082a0:	14000115 	stw	r16,4(r2)
100082a4:	14800215 	stw	r18,8(r2)
100082a8:	003fe606 	br	10008244 <__alt_data_end+0xf8008244>

100082ac <_Bfree>:
100082ac:	28000826 	beq	r5,zero,100082d0 <_Bfree+0x24>
100082b0:	28c00117 	ldw	r3,4(r5)
100082b4:	20801317 	ldw	r2,76(r4)
100082b8:	18c7883a 	add	r3,r3,r3
100082bc:	18c7883a 	add	r3,r3,r3
100082c0:	10c5883a 	add	r2,r2,r3
100082c4:	10c00017 	ldw	r3,0(r2)
100082c8:	28c00015 	stw	r3,0(r5)
100082cc:	11400015 	stw	r5,0(r2)
100082d0:	f800283a 	ret

100082d4 <__multadd>:
100082d4:	defff704 	addi	sp,sp,-36
100082d8:	dc800215 	stw	r18,8(sp)
100082dc:	2c800417 	ldw	r18,16(r5)
100082e0:	dd800615 	stw	r22,24(sp)
100082e4:	dd400515 	stw	r21,20(sp)
100082e8:	dd000415 	stw	r20,16(sp)
100082ec:	dcc00315 	stw	r19,12(sp)
100082f0:	dc400115 	stw	r17,4(sp)
100082f4:	dc000015 	stw	r16,0(sp)
100082f8:	dfc00815 	stw	ra,32(sp)
100082fc:	ddc00715 	stw	r23,28(sp)
10008300:	2827883a 	mov	r19,r5
10008304:	2029883a 	mov	r20,r4
10008308:	3023883a 	mov	r17,r6
1000830c:	3821883a 	mov	r16,r7
10008310:	2d400504 	addi	r21,r5,20
10008314:	002d883a 	mov	r22,zero
10008318:	adc00017 	ldw	r23,0(r21)
1000831c:	880b883a 	mov	r5,r17
10008320:	ad400104 	addi	r21,r21,4
10008324:	b93fffcc 	andi	r4,r23,65535
10008328:	000c8b80 	call	1000c8b8 <__mulsi3>
1000832c:	b808d43a 	srli	r4,r23,16
10008330:	880b883a 	mov	r5,r17
10008334:	1421883a 	add	r16,r2,r16
10008338:	000c8b80 	call	1000c8b8 <__mulsi3>
1000833c:	800ed43a 	srli	r7,r16,16
10008340:	80ffffcc 	andi	r3,r16,65535
10008344:	b5800044 	addi	r22,r22,1
10008348:	11c5883a 	add	r2,r2,r7
1000834c:	100e943a 	slli	r7,r2,16
10008350:	1020d43a 	srli	r16,r2,16
10008354:	38c7883a 	add	r3,r7,r3
10008358:	a8ffff15 	stw	r3,-4(r21)
1000835c:	b4bfee16 	blt	r22,r18,10008318 <__alt_data_end+0xf8008318>
10008360:	80000926 	beq	r16,zero,10008388 <__multadd+0xb4>
10008364:	98800217 	ldw	r2,8(r19)
10008368:	9080130e 	bge	r18,r2,100083b8 <__multadd+0xe4>
1000836c:	90800144 	addi	r2,r18,5
10008370:	1085883a 	add	r2,r2,r2
10008374:	1085883a 	add	r2,r2,r2
10008378:	9885883a 	add	r2,r19,r2
1000837c:	14000015 	stw	r16,0(r2)
10008380:	94800044 	addi	r18,r18,1
10008384:	9c800415 	stw	r18,16(r19)
10008388:	9805883a 	mov	r2,r19
1000838c:	dfc00817 	ldw	ra,32(sp)
10008390:	ddc00717 	ldw	r23,28(sp)
10008394:	dd800617 	ldw	r22,24(sp)
10008398:	dd400517 	ldw	r21,20(sp)
1000839c:	dd000417 	ldw	r20,16(sp)
100083a0:	dcc00317 	ldw	r19,12(sp)
100083a4:	dc800217 	ldw	r18,8(sp)
100083a8:	dc400117 	ldw	r17,4(sp)
100083ac:	dc000017 	ldw	r16,0(sp)
100083b0:	dec00904 	addi	sp,sp,36
100083b4:	f800283a 	ret
100083b8:	99400117 	ldw	r5,4(r19)
100083bc:	a009883a 	mov	r4,r20
100083c0:	29400044 	addi	r5,r5,1
100083c4:	00082040 	call	10008204 <_Balloc>
100083c8:	99800417 	ldw	r6,16(r19)
100083cc:	99400304 	addi	r5,r19,12
100083d0:	11000304 	addi	r4,r2,12
100083d4:	31800084 	addi	r6,r6,2
100083d8:	318d883a 	add	r6,r6,r6
100083dc:	318d883a 	add	r6,r6,r6
100083e0:	1023883a 	mov	r17,r2
100083e4:	0007e380 	call	10007e38 <memcpy>
100083e8:	98000a26 	beq	r19,zero,10008414 <__multadd+0x140>
100083ec:	98c00117 	ldw	r3,4(r19)
100083f0:	a0801317 	ldw	r2,76(r20)
100083f4:	18c7883a 	add	r3,r3,r3
100083f8:	18c7883a 	add	r3,r3,r3
100083fc:	10c5883a 	add	r2,r2,r3
10008400:	10c00017 	ldw	r3,0(r2)
10008404:	98c00015 	stw	r3,0(r19)
10008408:	14c00015 	stw	r19,0(r2)
1000840c:	8827883a 	mov	r19,r17
10008410:	003fd606 	br	1000836c <__alt_data_end+0xf800836c>
10008414:	8827883a 	mov	r19,r17
10008418:	003fd406 	br	1000836c <__alt_data_end+0xf800836c>

1000841c <__s2b>:
1000841c:	defff904 	addi	sp,sp,-28
10008420:	dc400115 	stw	r17,4(sp)
10008424:	dc000015 	stw	r16,0(sp)
10008428:	2023883a 	mov	r17,r4
1000842c:	2821883a 	mov	r16,r5
10008430:	39000204 	addi	r4,r7,8
10008434:	01400244 	movi	r5,9
10008438:	dcc00315 	stw	r19,12(sp)
1000843c:	dc800215 	stw	r18,8(sp)
10008440:	dfc00615 	stw	ra,24(sp)
10008444:	dd400515 	stw	r21,20(sp)
10008448:	dd000415 	stw	r20,16(sp)
1000844c:	3825883a 	mov	r18,r7
10008450:	3027883a 	mov	r19,r6
10008454:	000c7040 	call	1000c704 <__divsi3>
10008458:	00c00044 	movi	r3,1
1000845c:	000b883a 	mov	r5,zero
10008460:	1880030e 	bge	r3,r2,10008470 <__s2b+0x54>
10008464:	18c7883a 	add	r3,r3,r3
10008468:	29400044 	addi	r5,r5,1
1000846c:	18bffd16 	blt	r3,r2,10008464 <__alt_data_end+0xf8008464>
10008470:	8809883a 	mov	r4,r17
10008474:	00082040 	call	10008204 <_Balloc>
10008478:	d8c00717 	ldw	r3,28(sp)
1000847c:	10c00515 	stw	r3,20(r2)
10008480:	00c00044 	movi	r3,1
10008484:	10c00415 	stw	r3,16(r2)
10008488:	00c00244 	movi	r3,9
1000848c:	1cc0210e 	bge	r3,r19,10008514 <__s2b+0xf8>
10008490:	80eb883a 	add	r21,r16,r3
10008494:	a829883a 	mov	r20,r21
10008498:	84e1883a 	add	r16,r16,r19
1000849c:	a1c00007 	ldb	r7,0(r20)
100084a0:	01800284 	movi	r6,10
100084a4:	a5000044 	addi	r20,r20,1
100084a8:	100b883a 	mov	r5,r2
100084ac:	39fff404 	addi	r7,r7,-48
100084b0:	8809883a 	mov	r4,r17
100084b4:	00082d40 	call	100082d4 <__multadd>
100084b8:	a43ff81e 	bne	r20,r16,1000849c <__alt_data_end+0xf800849c>
100084bc:	ace1883a 	add	r16,r21,r19
100084c0:	843ffe04 	addi	r16,r16,-8
100084c4:	9c800a0e 	bge	r19,r18,100084f0 <__s2b+0xd4>
100084c8:	94e5c83a 	sub	r18,r18,r19
100084cc:	84a5883a 	add	r18,r16,r18
100084d0:	81c00007 	ldb	r7,0(r16)
100084d4:	01800284 	movi	r6,10
100084d8:	84000044 	addi	r16,r16,1
100084dc:	100b883a 	mov	r5,r2
100084e0:	39fff404 	addi	r7,r7,-48
100084e4:	8809883a 	mov	r4,r17
100084e8:	00082d40 	call	100082d4 <__multadd>
100084ec:	84bff81e 	bne	r16,r18,100084d0 <__alt_data_end+0xf80084d0>
100084f0:	dfc00617 	ldw	ra,24(sp)
100084f4:	dd400517 	ldw	r21,20(sp)
100084f8:	dd000417 	ldw	r20,16(sp)
100084fc:	dcc00317 	ldw	r19,12(sp)
10008500:	dc800217 	ldw	r18,8(sp)
10008504:	dc400117 	ldw	r17,4(sp)
10008508:	dc000017 	ldw	r16,0(sp)
1000850c:	dec00704 	addi	sp,sp,28
10008510:	f800283a 	ret
10008514:	84000284 	addi	r16,r16,10
10008518:	1827883a 	mov	r19,r3
1000851c:	003fe906 	br	100084c4 <__alt_data_end+0xf80084c4>

10008520 <__hi0bits>:
10008520:	20bfffec 	andhi	r2,r4,65535
10008524:	1000141e 	bne	r2,zero,10008578 <__hi0bits+0x58>
10008528:	2008943a 	slli	r4,r4,16
1000852c:	00800404 	movi	r2,16
10008530:	20ffc02c 	andhi	r3,r4,65280
10008534:	1800021e 	bne	r3,zero,10008540 <__hi0bits+0x20>
10008538:	2008923a 	slli	r4,r4,8
1000853c:	10800204 	addi	r2,r2,8
10008540:	20fc002c 	andhi	r3,r4,61440
10008544:	1800021e 	bne	r3,zero,10008550 <__hi0bits+0x30>
10008548:	2008913a 	slli	r4,r4,4
1000854c:	10800104 	addi	r2,r2,4
10008550:	20f0002c 	andhi	r3,r4,49152
10008554:	1800031e 	bne	r3,zero,10008564 <__hi0bits+0x44>
10008558:	2109883a 	add	r4,r4,r4
1000855c:	10800084 	addi	r2,r2,2
10008560:	2109883a 	add	r4,r4,r4
10008564:	20000316 	blt	r4,zero,10008574 <__hi0bits+0x54>
10008568:	2110002c 	andhi	r4,r4,16384
1000856c:	2000041e 	bne	r4,zero,10008580 <__hi0bits+0x60>
10008570:	00800804 	movi	r2,32
10008574:	f800283a 	ret
10008578:	0005883a 	mov	r2,zero
1000857c:	003fec06 	br	10008530 <__alt_data_end+0xf8008530>
10008580:	10800044 	addi	r2,r2,1
10008584:	f800283a 	ret

10008588 <__lo0bits>:
10008588:	20c00017 	ldw	r3,0(r4)
1000858c:	188001cc 	andi	r2,r3,7
10008590:	10000826 	beq	r2,zero,100085b4 <__lo0bits+0x2c>
10008594:	1880004c 	andi	r2,r3,1
10008598:	1000211e 	bne	r2,zero,10008620 <__lo0bits+0x98>
1000859c:	1880008c 	andi	r2,r3,2
100085a0:	1000211e 	bne	r2,zero,10008628 <__lo0bits+0xa0>
100085a4:	1806d0ba 	srli	r3,r3,2
100085a8:	00800084 	movi	r2,2
100085ac:	20c00015 	stw	r3,0(r4)
100085b0:	f800283a 	ret
100085b4:	18bfffcc 	andi	r2,r3,65535
100085b8:	10001326 	beq	r2,zero,10008608 <__lo0bits+0x80>
100085bc:	0005883a 	mov	r2,zero
100085c0:	19403fcc 	andi	r5,r3,255
100085c4:	2800021e 	bne	r5,zero,100085d0 <__lo0bits+0x48>
100085c8:	1806d23a 	srli	r3,r3,8
100085cc:	10800204 	addi	r2,r2,8
100085d0:	194003cc 	andi	r5,r3,15
100085d4:	2800021e 	bne	r5,zero,100085e0 <__lo0bits+0x58>
100085d8:	1806d13a 	srli	r3,r3,4
100085dc:	10800104 	addi	r2,r2,4
100085e0:	194000cc 	andi	r5,r3,3
100085e4:	2800021e 	bne	r5,zero,100085f0 <__lo0bits+0x68>
100085e8:	1806d0ba 	srli	r3,r3,2
100085ec:	10800084 	addi	r2,r2,2
100085f0:	1940004c 	andi	r5,r3,1
100085f4:	2800081e 	bne	r5,zero,10008618 <__lo0bits+0x90>
100085f8:	1806d07a 	srli	r3,r3,1
100085fc:	1800051e 	bne	r3,zero,10008614 <__lo0bits+0x8c>
10008600:	00800804 	movi	r2,32
10008604:	f800283a 	ret
10008608:	1806d43a 	srli	r3,r3,16
1000860c:	00800404 	movi	r2,16
10008610:	003feb06 	br	100085c0 <__alt_data_end+0xf80085c0>
10008614:	10800044 	addi	r2,r2,1
10008618:	20c00015 	stw	r3,0(r4)
1000861c:	f800283a 	ret
10008620:	0005883a 	mov	r2,zero
10008624:	f800283a 	ret
10008628:	1806d07a 	srli	r3,r3,1
1000862c:	00800044 	movi	r2,1
10008630:	20c00015 	stw	r3,0(r4)
10008634:	f800283a 	ret

10008638 <__i2b>:
10008638:	defffd04 	addi	sp,sp,-12
1000863c:	dc000015 	stw	r16,0(sp)
10008640:	04000044 	movi	r16,1
10008644:	dc400115 	stw	r17,4(sp)
10008648:	2823883a 	mov	r17,r5
1000864c:	800b883a 	mov	r5,r16
10008650:	dfc00215 	stw	ra,8(sp)
10008654:	00082040 	call	10008204 <_Balloc>
10008658:	14400515 	stw	r17,20(r2)
1000865c:	14000415 	stw	r16,16(r2)
10008660:	dfc00217 	ldw	ra,8(sp)
10008664:	dc400117 	ldw	r17,4(sp)
10008668:	dc000017 	ldw	r16,0(sp)
1000866c:	dec00304 	addi	sp,sp,12
10008670:	f800283a 	ret

10008674 <__multiply>:
10008674:	deffef04 	addi	sp,sp,-68
10008678:	dc400815 	stw	r17,32(sp)
1000867c:	dc000715 	stw	r16,28(sp)
10008680:	34400417 	ldw	r17,16(r6)
10008684:	2c000417 	ldw	r16,16(r5)
10008688:	dd800d15 	stw	r22,52(sp)
1000868c:	dc800915 	stw	r18,36(sp)
10008690:	dfc01015 	stw	ra,64(sp)
10008694:	df000f15 	stw	fp,60(sp)
10008698:	ddc00e15 	stw	r23,56(sp)
1000869c:	dd400c15 	stw	r21,48(sp)
100086a0:	dd000b15 	stw	r20,44(sp)
100086a4:	dcc00a15 	stw	r19,40(sp)
100086a8:	2825883a 	mov	r18,r5
100086ac:	302d883a 	mov	r22,r6
100086b0:	8440050e 	bge	r16,r17,100086c8 <__multiply+0x54>
100086b4:	8007883a 	mov	r3,r16
100086b8:	3025883a 	mov	r18,r6
100086bc:	8821883a 	mov	r16,r17
100086c0:	282d883a 	mov	r22,r5
100086c4:	1823883a 	mov	r17,r3
100086c8:	90800217 	ldw	r2,8(r18)
100086cc:	8447883a 	add	r3,r16,r17
100086d0:	d8c00215 	stw	r3,8(sp)
100086d4:	91400117 	ldw	r5,4(r18)
100086d8:	10c0010e 	bge	r2,r3,100086e0 <__multiply+0x6c>
100086dc:	29400044 	addi	r5,r5,1
100086e0:	00082040 	call	10008204 <_Balloc>
100086e4:	d8c00217 	ldw	r3,8(sp)
100086e8:	d8800615 	stw	r2,24(sp)
100086ec:	18eb883a 	add	r21,r3,r3
100086f0:	ad6b883a 	add	r21,r21,r21
100086f4:	10c00504 	addi	r3,r2,20
100086f8:	1d6b883a 	add	r21,r3,r21
100086fc:	d8c00115 	stw	r3,4(sp)
10008700:	dd400315 	stw	r21,12(sp)
10008704:	1805883a 	mov	r2,r3
10008708:	1d40042e 	bgeu	r3,r21,1000871c <__multiply+0xa8>
1000870c:	d8c00317 	ldw	r3,12(sp)
10008710:	10000015 	stw	zero,0(r2)
10008714:	10800104 	addi	r2,r2,4
10008718:	10fffc36 	bltu	r2,r3,1000870c <__alt_data_end+0xf800870c>
1000871c:	8c63883a 	add	r17,r17,r17
10008720:	b5800504 	addi	r22,r22,20
10008724:	8c63883a 	add	r17,r17,r17
10008728:	94800504 	addi	r18,r18,20
1000872c:	8421883a 	add	r16,r16,r16
10008730:	b463883a 	add	r17,r22,r17
10008734:	8421883a 	add	r16,r16,r16
10008738:	dd800015 	stw	r22,0(sp)
1000873c:	dc800415 	stw	r18,16(sp)
10008740:	dc400515 	stw	r17,20(sp)
10008744:	9429883a 	add	r20,r18,r16
10008748:	b4404f2e 	bgeu	r22,r17,10008888 <__multiply+0x214>
1000874c:	d8c00017 	ldw	r3,0(sp)
10008750:	1c800017 	ldw	r18,0(r3)
10008754:	947fffcc 	andi	r17,r18,65535
10008758:	88001e26 	beq	r17,zero,100087d4 <__multiply+0x160>
1000875c:	dd800117 	ldw	r22,4(sp)
10008760:	dd400417 	ldw	r21,16(sp)
10008764:	0027883a 	mov	r19,zero
10008768:	ac800017 	ldw	r18,0(r21)
1000876c:	b4000017 	ldw	r16,0(r22)
10008770:	880b883a 	mov	r5,r17
10008774:	913fffcc 	andi	r4,r18,65535
10008778:	000c8b80 	call	1000c8b8 <__mulsi3>
1000877c:	9008d43a 	srli	r4,r18,16
10008780:	84bfffcc 	andi	r18,r16,65535
10008784:	1485883a 	add	r2,r2,r18
10008788:	14e5883a 	add	r18,r2,r19
1000878c:	8020d43a 	srli	r16,r16,16
10008790:	9026d43a 	srli	r19,r18,16
10008794:	880b883a 	mov	r5,r17
10008798:	000c8b80 	call	1000c8b8 <__mulsi3>
1000879c:	1405883a 	add	r2,r2,r16
100087a0:	14e1883a 	add	r16,r2,r19
100087a4:	90ffffcc 	andi	r3,r18,65535
100087a8:	8024943a 	slli	r18,r16,16
100087ac:	ad400104 	addi	r21,r21,4
100087b0:	b005883a 	mov	r2,r22
100087b4:	90c6b03a 	or	r3,r18,r3
100087b8:	b0c00015 	stw	r3,0(r22)
100087bc:	8026d43a 	srli	r19,r16,16
100087c0:	b5800104 	addi	r22,r22,4
100087c4:	ad3fe836 	bltu	r21,r20,10008768 <__alt_data_end+0xf8008768>
100087c8:	d8c00017 	ldw	r3,0(sp)
100087cc:	14c00115 	stw	r19,4(r2)
100087d0:	1c800017 	ldw	r18,0(r3)
100087d4:	9024d43a 	srli	r18,r18,16
100087d8:	90002226 	beq	r18,zero,10008864 <__multiply+0x1f0>
100087dc:	d8c00117 	ldw	r3,4(sp)
100087e0:	dd800417 	ldw	r22,16(sp)
100087e4:	002f883a 	mov	r23,zero
100087e8:	1f000017 	ldw	fp,0(r3)
100087ec:	1823883a 	mov	r17,r3
100087f0:	182b883a 	mov	r21,r3
100087f4:	e021883a 	mov	r16,fp
100087f8:	00000106 	br	10008800 <__multiply+0x18c>
100087fc:	982b883a 	mov	r21,r19
10008800:	b100000b 	ldhu	r4,0(r22)
10008804:	8020d43a 	srli	r16,r16,16
10008808:	900b883a 	mov	r5,r18
1000880c:	000c8b80 	call	1000c8b8 <__mulsi3>
10008810:	1405883a 	add	r2,r2,r16
10008814:	15ef883a 	add	r23,r2,r23
10008818:	b804943a 	slli	r2,r23,16
1000881c:	e0ffffcc 	andi	r3,fp,65535
10008820:	8c400104 	addi	r17,r17,4
10008824:	10c6b03a 	or	r3,r2,r3
10008828:	88ffff15 	stw	r3,-4(r17)
1000882c:	b5800104 	addi	r22,r22,4
10008830:	b13fff17 	ldw	r4,-4(r22)
10008834:	acc00104 	addi	r19,r21,4
10008838:	900b883a 	mov	r5,r18
1000883c:	2008d43a 	srli	r4,r4,16
10008840:	9c000017 	ldw	r16,0(r19)
10008844:	000c8b80 	call	1000c8b8 <__mulsi3>
10008848:	b806d43a 	srli	r3,r23,16
1000884c:	813fffcc 	andi	r4,r16,65535
10008850:	1105883a 	add	r2,r2,r4
10008854:	10f9883a 	add	fp,r2,r3
10008858:	e02ed43a 	srli	r23,fp,16
1000885c:	b53fe736 	bltu	r22,r20,100087fc <__alt_data_end+0xf80087fc>
10008860:	af000115 	stw	fp,4(r21)
10008864:	d8c00017 	ldw	r3,0(sp)
10008868:	d9000517 	ldw	r4,20(sp)
1000886c:	18c00104 	addi	r3,r3,4
10008870:	d8c00015 	stw	r3,0(sp)
10008874:	d8c00117 	ldw	r3,4(sp)
10008878:	18c00104 	addi	r3,r3,4
1000887c:	d8c00115 	stw	r3,4(sp)
10008880:	d8c00017 	ldw	r3,0(sp)
10008884:	193fb136 	bltu	r3,r4,1000874c <__alt_data_end+0xf800874c>
10008888:	d8c00217 	ldw	r3,8(sp)
1000888c:	00c00c0e 	bge	zero,r3,100088c0 <__multiply+0x24c>
10008890:	d8c00317 	ldw	r3,12(sp)
10008894:	18bfff17 	ldw	r2,-4(r3)
10008898:	1d7fff04 	addi	r21,r3,-4
1000889c:	10000326 	beq	r2,zero,100088ac <__multiply+0x238>
100088a0:	00000706 	br	100088c0 <__multiply+0x24c>
100088a4:	a8800017 	ldw	r2,0(r21)
100088a8:	1000051e 	bne	r2,zero,100088c0 <__multiply+0x24c>
100088ac:	d8c00217 	ldw	r3,8(sp)
100088b0:	ad7fff04 	addi	r21,r21,-4
100088b4:	18ffffc4 	addi	r3,r3,-1
100088b8:	d8c00215 	stw	r3,8(sp)
100088bc:	183ff91e 	bne	r3,zero,100088a4 <__alt_data_end+0xf80088a4>
100088c0:	d8c00617 	ldw	r3,24(sp)
100088c4:	d9000217 	ldw	r4,8(sp)
100088c8:	1805883a 	mov	r2,r3
100088cc:	19000415 	stw	r4,16(r3)
100088d0:	dfc01017 	ldw	ra,64(sp)
100088d4:	df000f17 	ldw	fp,60(sp)
100088d8:	ddc00e17 	ldw	r23,56(sp)
100088dc:	dd800d17 	ldw	r22,52(sp)
100088e0:	dd400c17 	ldw	r21,48(sp)
100088e4:	dd000b17 	ldw	r20,44(sp)
100088e8:	dcc00a17 	ldw	r19,40(sp)
100088ec:	dc800917 	ldw	r18,36(sp)
100088f0:	dc400817 	ldw	r17,32(sp)
100088f4:	dc000717 	ldw	r16,28(sp)
100088f8:	dec01104 	addi	sp,sp,68
100088fc:	f800283a 	ret

10008900 <__pow5mult>:
10008900:	defffa04 	addi	sp,sp,-24
10008904:	dcc00315 	stw	r19,12(sp)
10008908:	dc000015 	stw	r16,0(sp)
1000890c:	dfc00515 	stw	ra,20(sp)
10008910:	dd000415 	stw	r20,16(sp)
10008914:	dc800215 	stw	r18,8(sp)
10008918:	dc400115 	stw	r17,4(sp)
1000891c:	308000cc 	andi	r2,r6,3
10008920:	3021883a 	mov	r16,r6
10008924:	2027883a 	mov	r19,r4
10008928:	10002f1e 	bne	r2,zero,100089e8 <__pow5mult+0xe8>
1000892c:	2825883a 	mov	r18,r5
10008930:	8021d0ba 	srai	r16,r16,2
10008934:	80001a26 	beq	r16,zero,100089a0 <__pow5mult+0xa0>
10008938:	9c401217 	ldw	r17,72(r19)
1000893c:	8800061e 	bne	r17,zero,10008958 <__pow5mult+0x58>
10008940:	00003406 	br	10008a14 <__pow5mult+0x114>
10008944:	8021d07a 	srai	r16,r16,1
10008948:	80001526 	beq	r16,zero,100089a0 <__pow5mult+0xa0>
1000894c:	88800017 	ldw	r2,0(r17)
10008950:	10001c26 	beq	r2,zero,100089c4 <__pow5mult+0xc4>
10008954:	1023883a 	mov	r17,r2
10008958:	8080004c 	andi	r2,r16,1
1000895c:	103ff926 	beq	r2,zero,10008944 <__alt_data_end+0xf8008944>
10008960:	880d883a 	mov	r6,r17
10008964:	900b883a 	mov	r5,r18
10008968:	9809883a 	mov	r4,r19
1000896c:	00086740 	call	10008674 <__multiply>
10008970:	90001b26 	beq	r18,zero,100089e0 <__pow5mult+0xe0>
10008974:	91000117 	ldw	r4,4(r18)
10008978:	98c01317 	ldw	r3,76(r19)
1000897c:	8021d07a 	srai	r16,r16,1
10008980:	2109883a 	add	r4,r4,r4
10008984:	2109883a 	add	r4,r4,r4
10008988:	1907883a 	add	r3,r3,r4
1000898c:	19000017 	ldw	r4,0(r3)
10008990:	91000015 	stw	r4,0(r18)
10008994:	1c800015 	stw	r18,0(r3)
10008998:	1025883a 	mov	r18,r2
1000899c:	803feb1e 	bne	r16,zero,1000894c <__alt_data_end+0xf800894c>
100089a0:	9005883a 	mov	r2,r18
100089a4:	dfc00517 	ldw	ra,20(sp)
100089a8:	dd000417 	ldw	r20,16(sp)
100089ac:	dcc00317 	ldw	r19,12(sp)
100089b0:	dc800217 	ldw	r18,8(sp)
100089b4:	dc400117 	ldw	r17,4(sp)
100089b8:	dc000017 	ldw	r16,0(sp)
100089bc:	dec00604 	addi	sp,sp,24
100089c0:	f800283a 	ret
100089c4:	880d883a 	mov	r6,r17
100089c8:	880b883a 	mov	r5,r17
100089cc:	9809883a 	mov	r4,r19
100089d0:	00086740 	call	10008674 <__multiply>
100089d4:	88800015 	stw	r2,0(r17)
100089d8:	10000015 	stw	zero,0(r2)
100089dc:	003fdd06 	br	10008954 <__alt_data_end+0xf8008954>
100089e0:	1025883a 	mov	r18,r2
100089e4:	003fd706 	br	10008944 <__alt_data_end+0xf8008944>
100089e8:	10bfffc4 	addi	r2,r2,-1
100089ec:	1085883a 	add	r2,r2,r2
100089f0:	00c40074 	movhi	r3,4097
100089f4:	18c86904 	addi	r3,r3,8612
100089f8:	1085883a 	add	r2,r2,r2
100089fc:	1885883a 	add	r2,r3,r2
10008a00:	11800017 	ldw	r6,0(r2)
10008a04:	000f883a 	mov	r7,zero
10008a08:	00082d40 	call	100082d4 <__multadd>
10008a0c:	1025883a 	mov	r18,r2
10008a10:	003fc706 	br	10008930 <__alt_data_end+0xf8008930>
10008a14:	05000044 	movi	r20,1
10008a18:	a00b883a 	mov	r5,r20
10008a1c:	9809883a 	mov	r4,r19
10008a20:	00082040 	call	10008204 <_Balloc>
10008a24:	1023883a 	mov	r17,r2
10008a28:	00809c44 	movi	r2,625
10008a2c:	88800515 	stw	r2,20(r17)
10008a30:	8d000415 	stw	r20,16(r17)
10008a34:	9c401215 	stw	r17,72(r19)
10008a38:	88000015 	stw	zero,0(r17)
10008a3c:	003fc606 	br	10008958 <__alt_data_end+0xf8008958>

10008a40 <__lshift>:
10008a40:	defff904 	addi	sp,sp,-28
10008a44:	dd400515 	stw	r21,20(sp)
10008a48:	dcc00315 	stw	r19,12(sp)
10008a4c:	302bd17a 	srai	r21,r6,5
10008a50:	2cc00417 	ldw	r19,16(r5)
10008a54:	28800217 	ldw	r2,8(r5)
10008a58:	dd000415 	stw	r20,16(sp)
10008a5c:	ace7883a 	add	r19,r21,r19
10008a60:	dc800215 	stw	r18,8(sp)
10008a64:	dc400115 	stw	r17,4(sp)
10008a68:	dc000015 	stw	r16,0(sp)
10008a6c:	dfc00615 	stw	ra,24(sp)
10008a70:	9c000044 	addi	r16,r19,1
10008a74:	2823883a 	mov	r17,r5
10008a78:	3029883a 	mov	r20,r6
10008a7c:	2025883a 	mov	r18,r4
10008a80:	29400117 	ldw	r5,4(r5)
10008a84:	1400030e 	bge	r2,r16,10008a94 <__lshift+0x54>
10008a88:	1085883a 	add	r2,r2,r2
10008a8c:	29400044 	addi	r5,r5,1
10008a90:	143ffd16 	blt	r2,r16,10008a88 <__alt_data_end+0xf8008a88>
10008a94:	9009883a 	mov	r4,r18
10008a98:	00082040 	call	10008204 <_Balloc>
10008a9c:	10c00504 	addi	r3,r2,20
10008aa0:	0540070e 	bge	zero,r21,10008ac0 <__lshift+0x80>
10008aa4:	ad6b883a 	add	r21,r21,r21
10008aa8:	ad6b883a 	add	r21,r21,r21
10008aac:	1809883a 	mov	r4,r3
10008ab0:	1d47883a 	add	r3,r3,r21
10008ab4:	20000015 	stw	zero,0(r4)
10008ab8:	21000104 	addi	r4,r4,4
10008abc:	193ffd1e 	bne	r3,r4,10008ab4 <__alt_data_end+0xf8008ab4>
10008ac0:	8a000417 	ldw	r8,16(r17)
10008ac4:	89000504 	addi	r4,r17,20
10008ac8:	a18007cc 	andi	r6,r20,31
10008acc:	4211883a 	add	r8,r8,r8
10008ad0:	4211883a 	add	r8,r8,r8
10008ad4:	2211883a 	add	r8,r4,r8
10008ad8:	30002326 	beq	r6,zero,10008b68 <__lshift+0x128>
10008adc:	02400804 	movi	r9,32
10008ae0:	4993c83a 	sub	r9,r9,r6
10008ae4:	000b883a 	mov	r5,zero
10008ae8:	21c00017 	ldw	r7,0(r4)
10008aec:	1815883a 	mov	r10,r3
10008af0:	18c00104 	addi	r3,r3,4
10008af4:	398e983a 	sll	r7,r7,r6
10008af8:	21000104 	addi	r4,r4,4
10008afc:	394ab03a 	or	r5,r7,r5
10008b00:	197fff15 	stw	r5,-4(r3)
10008b04:	217fff17 	ldw	r5,-4(r4)
10008b08:	2a4ad83a 	srl	r5,r5,r9
10008b0c:	223ff636 	bltu	r4,r8,10008ae8 <__alt_data_end+0xf8008ae8>
10008b10:	51400115 	stw	r5,4(r10)
10008b14:	28001a1e 	bne	r5,zero,10008b80 <__lshift+0x140>
10008b18:	843fffc4 	addi	r16,r16,-1
10008b1c:	14000415 	stw	r16,16(r2)
10008b20:	88000826 	beq	r17,zero,10008b44 <__lshift+0x104>
10008b24:	89000117 	ldw	r4,4(r17)
10008b28:	90c01317 	ldw	r3,76(r18)
10008b2c:	2109883a 	add	r4,r4,r4
10008b30:	2109883a 	add	r4,r4,r4
10008b34:	1907883a 	add	r3,r3,r4
10008b38:	19000017 	ldw	r4,0(r3)
10008b3c:	89000015 	stw	r4,0(r17)
10008b40:	1c400015 	stw	r17,0(r3)
10008b44:	dfc00617 	ldw	ra,24(sp)
10008b48:	dd400517 	ldw	r21,20(sp)
10008b4c:	dd000417 	ldw	r20,16(sp)
10008b50:	dcc00317 	ldw	r19,12(sp)
10008b54:	dc800217 	ldw	r18,8(sp)
10008b58:	dc400117 	ldw	r17,4(sp)
10008b5c:	dc000017 	ldw	r16,0(sp)
10008b60:	dec00704 	addi	sp,sp,28
10008b64:	f800283a 	ret
10008b68:	21400017 	ldw	r5,0(r4)
10008b6c:	18c00104 	addi	r3,r3,4
10008b70:	21000104 	addi	r4,r4,4
10008b74:	197fff15 	stw	r5,-4(r3)
10008b78:	223ffb36 	bltu	r4,r8,10008b68 <__alt_data_end+0xf8008b68>
10008b7c:	003fe606 	br	10008b18 <__alt_data_end+0xf8008b18>
10008b80:	9c000084 	addi	r16,r19,2
10008b84:	003fe406 	br	10008b18 <__alt_data_end+0xf8008b18>

10008b88 <__mcmp>:
10008b88:	20800417 	ldw	r2,16(r4)
10008b8c:	28c00417 	ldw	r3,16(r5)
10008b90:	10c5c83a 	sub	r2,r2,r3
10008b94:	1000111e 	bne	r2,zero,10008bdc <__mcmp+0x54>
10008b98:	18c7883a 	add	r3,r3,r3
10008b9c:	18c7883a 	add	r3,r3,r3
10008ba0:	21000504 	addi	r4,r4,20
10008ba4:	29400504 	addi	r5,r5,20
10008ba8:	20c5883a 	add	r2,r4,r3
10008bac:	28cb883a 	add	r5,r5,r3
10008bb0:	00000106 	br	10008bb8 <__mcmp+0x30>
10008bb4:	20800a2e 	bgeu	r4,r2,10008be0 <__mcmp+0x58>
10008bb8:	10bfff04 	addi	r2,r2,-4
10008bbc:	297fff04 	addi	r5,r5,-4
10008bc0:	11800017 	ldw	r6,0(r2)
10008bc4:	28c00017 	ldw	r3,0(r5)
10008bc8:	30fffa26 	beq	r6,r3,10008bb4 <__alt_data_end+0xf8008bb4>
10008bcc:	30c00236 	bltu	r6,r3,10008bd8 <__mcmp+0x50>
10008bd0:	00800044 	movi	r2,1
10008bd4:	f800283a 	ret
10008bd8:	00bfffc4 	movi	r2,-1
10008bdc:	f800283a 	ret
10008be0:	0005883a 	mov	r2,zero
10008be4:	f800283a 	ret

10008be8 <__mdiff>:
10008be8:	28c00417 	ldw	r3,16(r5)
10008bec:	30800417 	ldw	r2,16(r6)
10008bf0:	defffa04 	addi	sp,sp,-24
10008bf4:	dcc00315 	stw	r19,12(sp)
10008bf8:	dc800215 	stw	r18,8(sp)
10008bfc:	dfc00515 	stw	ra,20(sp)
10008c00:	dd000415 	stw	r20,16(sp)
10008c04:	dc400115 	stw	r17,4(sp)
10008c08:	dc000015 	stw	r16,0(sp)
10008c0c:	1887c83a 	sub	r3,r3,r2
10008c10:	2825883a 	mov	r18,r5
10008c14:	3027883a 	mov	r19,r6
10008c18:	1800141e 	bne	r3,zero,10008c6c <__mdiff+0x84>
10008c1c:	1085883a 	add	r2,r2,r2
10008c20:	1085883a 	add	r2,r2,r2
10008c24:	2a000504 	addi	r8,r5,20
10008c28:	34000504 	addi	r16,r6,20
10008c2c:	4087883a 	add	r3,r8,r2
10008c30:	8085883a 	add	r2,r16,r2
10008c34:	00000106 	br	10008c3c <__mdiff+0x54>
10008c38:	40c0592e 	bgeu	r8,r3,10008da0 <__mdiff+0x1b8>
10008c3c:	18ffff04 	addi	r3,r3,-4
10008c40:	10bfff04 	addi	r2,r2,-4
10008c44:	19c00017 	ldw	r7,0(r3)
10008c48:	11400017 	ldw	r5,0(r2)
10008c4c:	397ffa26 	beq	r7,r5,10008c38 <__alt_data_end+0xf8008c38>
10008c50:	3940592e 	bgeu	r7,r5,10008db8 <__mdiff+0x1d0>
10008c54:	9005883a 	mov	r2,r18
10008c58:	4023883a 	mov	r17,r8
10008c5c:	9825883a 	mov	r18,r19
10008c60:	05000044 	movi	r20,1
10008c64:	1027883a 	mov	r19,r2
10008c68:	00000406 	br	10008c7c <__mdiff+0x94>
10008c6c:	18005616 	blt	r3,zero,10008dc8 <__mdiff+0x1e0>
10008c70:	34400504 	addi	r17,r6,20
10008c74:	2c000504 	addi	r16,r5,20
10008c78:	0029883a 	mov	r20,zero
10008c7c:	91400117 	ldw	r5,4(r18)
10008c80:	00082040 	call	10008204 <_Balloc>
10008c84:	92400417 	ldw	r9,16(r18)
10008c88:	9b000417 	ldw	r12,16(r19)
10008c8c:	12c00504 	addi	r11,r2,20
10008c90:	4a51883a 	add	r8,r9,r9
10008c94:	6319883a 	add	r12,r12,r12
10008c98:	4211883a 	add	r8,r8,r8
10008c9c:	6319883a 	add	r12,r12,r12
10008ca0:	15000315 	stw	r20,12(r2)
10008ca4:	8211883a 	add	r8,r16,r8
10008ca8:	8b19883a 	add	r12,r17,r12
10008cac:	0007883a 	mov	r3,zero
10008cb0:	81400017 	ldw	r5,0(r16)
10008cb4:	89c00017 	ldw	r7,0(r17)
10008cb8:	59800104 	addi	r6,r11,4
10008cbc:	293fffcc 	andi	r4,r5,65535
10008cc0:	20c7883a 	add	r3,r4,r3
10008cc4:	393fffcc 	andi	r4,r7,65535
10008cc8:	1909c83a 	sub	r4,r3,r4
10008ccc:	280ad43a 	srli	r5,r5,16
10008cd0:	380ed43a 	srli	r7,r7,16
10008cd4:	2007d43a 	srai	r3,r4,16
10008cd8:	213fffcc 	andi	r4,r4,65535
10008cdc:	29cbc83a 	sub	r5,r5,r7
10008ce0:	28c7883a 	add	r3,r5,r3
10008ce4:	180a943a 	slli	r5,r3,16
10008ce8:	8c400104 	addi	r17,r17,4
10008cec:	84000104 	addi	r16,r16,4
10008cf0:	2908b03a 	or	r4,r5,r4
10008cf4:	59000015 	stw	r4,0(r11)
10008cf8:	1807d43a 	srai	r3,r3,16
10008cfc:	3015883a 	mov	r10,r6
10008d00:	3017883a 	mov	r11,r6
10008d04:	8b3fea36 	bltu	r17,r12,10008cb0 <__alt_data_end+0xf8008cb0>
10008d08:	8200162e 	bgeu	r16,r8,10008d64 <__mdiff+0x17c>
10008d0c:	8017883a 	mov	r11,r16
10008d10:	59400017 	ldw	r5,0(r11)
10008d14:	31800104 	addi	r6,r6,4
10008d18:	5ac00104 	addi	r11,r11,4
10008d1c:	293fffcc 	andi	r4,r5,65535
10008d20:	20c7883a 	add	r3,r4,r3
10008d24:	280ed43a 	srli	r7,r5,16
10008d28:	180bd43a 	srai	r5,r3,16
10008d2c:	193fffcc 	andi	r4,r3,65535
10008d30:	3947883a 	add	r3,r7,r5
10008d34:	180a943a 	slli	r5,r3,16
10008d38:	1807d43a 	srai	r3,r3,16
10008d3c:	2908b03a 	or	r4,r5,r4
10008d40:	313fff15 	stw	r4,-4(r6)
10008d44:	5a3ff236 	bltu	r11,r8,10008d10 <__alt_data_end+0xf8008d10>
10008d48:	0406303a 	nor	r3,zero,r16
10008d4c:	1a07883a 	add	r3,r3,r8
10008d50:	1806d0ba 	srli	r3,r3,2
10008d54:	18c00044 	addi	r3,r3,1
10008d58:	18c7883a 	add	r3,r3,r3
10008d5c:	18c7883a 	add	r3,r3,r3
10008d60:	50d5883a 	add	r10,r10,r3
10008d64:	50ffff04 	addi	r3,r10,-4
10008d68:	2000041e 	bne	r4,zero,10008d7c <__mdiff+0x194>
10008d6c:	18ffff04 	addi	r3,r3,-4
10008d70:	19000017 	ldw	r4,0(r3)
10008d74:	4a7fffc4 	addi	r9,r9,-1
10008d78:	203ffc26 	beq	r4,zero,10008d6c <__alt_data_end+0xf8008d6c>
10008d7c:	12400415 	stw	r9,16(r2)
10008d80:	dfc00517 	ldw	ra,20(sp)
10008d84:	dd000417 	ldw	r20,16(sp)
10008d88:	dcc00317 	ldw	r19,12(sp)
10008d8c:	dc800217 	ldw	r18,8(sp)
10008d90:	dc400117 	ldw	r17,4(sp)
10008d94:	dc000017 	ldw	r16,0(sp)
10008d98:	dec00604 	addi	sp,sp,24
10008d9c:	f800283a 	ret
10008da0:	000b883a 	mov	r5,zero
10008da4:	00082040 	call	10008204 <_Balloc>
10008da8:	00c00044 	movi	r3,1
10008dac:	10c00415 	stw	r3,16(r2)
10008db0:	10000515 	stw	zero,20(r2)
10008db4:	003ff206 	br	10008d80 <__alt_data_end+0xf8008d80>
10008db8:	8023883a 	mov	r17,r16
10008dbc:	0029883a 	mov	r20,zero
10008dc0:	4021883a 	mov	r16,r8
10008dc4:	003fad06 	br	10008c7c <__alt_data_end+0xf8008c7c>
10008dc8:	9005883a 	mov	r2,r18
10008dcc:	94400504 	addi	r17,r18,20
10008dd0:	9c000504 	addi	r16,r19,20
10008dd4:	9825883a 	mov	r18,r19
10008dd8:	05000044 	movi	r20,1
10008ddc:	1027883a 	mov	r19,r2
10008de0:	003fa606 	br	10008c7c <__alt_data_end+0xf8008c7c>

10008de4 <__ulp>:
10008de4:	295ffc2c 	andhi	r5,r5,32752
10008de8:	00bf3034 	movhi	r2,64704
10008dec:	2887883a 	add	r3,r5,r2
10008df0:	00c0020e 	bge	zero,r3,10008dfc <__ulp+0x18>
10008df4:	0005883a 	mov	r2,zero
10008df8:	f800283a 	ret
10008dfc:	00c7c83a 	sub	r3,zero,r3
10008e00:	1807d53a 	srai	r3,r3,20
10008e04:	008004c4 	movi	r2,19
10008e08:	10c00b0e 	bge	r2,r3,10008e38 <__ulp+0x54>
10008e0c:	18bffb04 	addi	r2,r3,-20
10008e10:	01000784 	movi	r4,30
10008e14:	0007883a 	mov	r3,zero
10008e18:	20800516 	blt	r4,r2,10008e30 <__ulp+0x4c>
10008e1c:	010007c4 	movi	r4,31
10008e20:	2089c83a 	sub	r4,r4,r2
10008e24:	00800044 	movi	r2,1
10008e28:	1104983a 	sll	r2,r2,r4
10008e2c:	f800283a 	ret
10008e30:	00800044 	movi	r2,1
10008e34:	f800283a 	ret
10008e38:	01400234 	movhi	r5,8
10008e3c:	28c7d83a 	sra	r3,r5,r3
10008e40:	0005883a 	mov	r2,zero
10008e44:	f800283a 	ret

10008e48 <__b2d>:
10008e48:	defffa04 	addi	sp,sp,-24
10008e4c:	dc000015 	stw	r16,0(sp)
10008e50:	24000417 	ldw	r16,16(r4)
10008e54:	dc400115 	stw	r17,4(sp)
10008e58:	24400504 	addi	r17,r4,20
10008e5c:	8421883a 	add	r16,r16,r16
10008e60:	8421883a 	add	r16,r16,r16
10008e64:	8c21883a 	add	r16,r17,r16
10008e68:	dc800215 	stw	r18,8(sp)
10008e6c:	84bfff17 	ldw	r18,-4(r16)
10008e70:	dd000415 	stw	r20,16(sp)
10008e74:	dcc00315 	stw	r19,12(sp)
10008e78:	9009883a 	mov	r4,r18
10008e7c:	2829883a 	mov	r20,r5
10008e80:	dfc00515 	stw	ra,20(sp)
10008e84:	00085200 	call	10008520 <__hi0bits>
10008e88:	00c00804 	movi	r3,32
10008e8c:	1889c83a 	sub	r4,r3,r2
10008e90:	a1000015 	stw	r4,0(r20)
10008e94:	01000284 	movi	r4,10
10008e98:	84ffff04 	addi	r19,r16,-4
10008e9c:	20801216 	blt	r4,r2,10008ee8 <__b2d+0xa0>
10008ea0:	018002c4 	movi	r6,11
10008ea4:	308dc83a 	sub	r6,r6,r2
10008ea8:	9186d83a 	srl	r3,r18,r6
10008eac:	18cffc34 	orhi	r3,r3,16368
10008eb0:	8cc0212e 	bgeu	r17,r19,10008f38 <__b2d+0xf0>
10008eb4:	813ffe17 	ldw	r4,-8(r16)
10008eb8:	218cd83a 	srl	r6,r4,r6
10008ebc:	10800544 	addi	r2,r2,21
10008ec0:	9084983a 	sll	r2,r18,r2
10008ec4:	1184b03a 	or	r2,r2,r6
10008ec8:	dfc00517 	ldw	ra,20(sp)
10008ecc:	dd000417 	ldw	r20,16(sp)
10008ed0:	dcc00317 	ldw	r19,12(sp)
10008ed4:	dc800217 	ldw	r18,8(sp)
10008ed8:	dc400117 	ldw	r17,4(sp)
10008edc:	dc000017 	ldw	r16,0(sp)
10008ee0:	dec00604 	addi	sp,sp,24
10008ee4:	f800283a 	ret
10008ee8:	8cc00f2e 	bgeu	r17,r19,10008f28 <__b2d+0xe0>
10008eec:	117ffd44 	addi	r5,r2,-11
10008ef0:	80bffe17 	ldw	r2,-8(r16)
10008ef4:	28000e26 	beq	r5,zero,10008f30 <__b2d+0xe8>
10008ef8:	1949c83a 	sub	r4,r3,r5
10008efc:	9164983a 	sll	r18,r18,r5
10008f00:	1106d83a 	srl	r3,r2,r4
10008f04:	81bffe04 	addi	r6,r16,-8
10008f08:	948ffc34 	orhi	r18,r18,16368
10008f0c:	90c6b03a 	or	r3,r18,r3
10008f10:	89800e2e 	bgeu	r17,r6,10008f4c <__b2d+0x104>
10008f14:	81bffd17 	ldw	r6,-12(r16)
10008f18:	1144983a 	sll	r2,r2,r5
10008f1c:	310ad83a 	srl	r5,r6,r4
10008f20:	2884b03a 	or	r2,r5,r2
10008f24:	003fe806 	br	10008ec8 <__alt_data_end+0xf8008ec8>
10008f28:	10bffd44 	addi	r2,r2,-11
10008f2c:	1000041e 	bne	r2,zero,10008f40 <__b2d+0xf8>
10008f30:	90cffc34 	orhi	r3,r18,16368
10008f34:	003fe406 	br	10008ec8 <__alt_data_end+0xf8008ec8>
10008f38:	000d883a 	mov	r6,zero
10008f3c:	003fdf06 	br	10008ebc <__alt_data_end+0xf8008ebc>
10008f40:	90a4983a 	sll	r18,r18,r2
10008f44:	0005883a 	mov	r2,zero
10008f48:	003ff906 	br	10008f30 <__alt_data_end+0xf8008f30>
10008f4c:	1144983a 	sll	r2,r2,r5
10008f50:	003fdd06 	br	10008ec8 <__alt_data_end+0xf8008ec8>

10008f54 <__d2b>:
10008f54:	defff804 	addi	sp,sp,-32
10008f58:	dc000215 	stw	r16,8(sp)
10008f5c:	3021883a 	mov	r16,r6
10008f60:	dc400315 	stw	r17,12(sp)
10008f64:	8022907a 	slli	r17,r16,1
10008f68:	dd000615 	stw	r20,24(sp)
10008f6c:	2829883a 	mov	r20,r5
10008f70:	01400044 	movi	r5,1
10008f74:	dcc00515 	stw	r19,20(sp)
10008f78:	dc800415 	stw	r18,16(sp)
10008f7c:	dfc00715 	stw	ra,28(sp)
10008f80:	3825883a 	mov	r18,r7
10008f84:	8822d57a 	srli	r17,r17,21
10008f88:	00082040 	call	10008204 <_Balloc>
10008f8c:	1027883a 	mov	r19,r2
10008f90:	00800434 	movhi	r2,16
10008f94:	10bfffc4 	addi	r2,r2,-1
10008f98:	808c703a 	and	r6,r16,r2
10008f9c:	88000126 	beq	r17,zero,10008fa4 <__d2b+0x50>
10008fa0:	31800434 	orhi	r6,r6,16
10008fa4:	d9800015 	stw	r6,0(sp)
10008fa8:	a0002426 	beq	r20,zero,1000903c <__d2b+0xe8>
10008fac:	d9000104 	addi	r4,sp,4
10008fb0:	dd000115 	stw	r20,4(sp)
10008fb4:	00085880 	call	10008588 <__lo0bits>
10008fb8:	d8c00017 	ldw	r3,0(sp)
10008fbc:	10002f1e 	bne	r2,zero,1000907c <__d2b+0x128>
10008fc0:	d9000117 	ldw	r4,4(sp)
10008fc4:	99000515 	stw	r4,20(r19)
10008fc8:	1821003a 	cmpeq	r16,r3,zero
10008fcc:	01000084 	movi	r4,2
10008fd0:	2421c83a 	sub	r16,r4,r16
10008fd4:	98c00615 	stw	r3,24(r19)
10008fd8:	9c000415 	stw	r16,16(r19)
10008fdc:	88001f1e 	bne	r17,zero,1000905c <__d2b+0x108>
10008fe0:	10bef384 	addi	r2,r2,-1074
10008fe4:	90800015 	stw	r2,0(r18)
10008fe8:	00900034 	movhi	r2,16384
10008fec:	10bfffc4 	addi	r2,r2,-1
10008ff0:	8085883a 	add	r2,r16,r2
10008ff4:	1085883a 	add	r2,r2,r2
10008ff8:	1085883a 	add	r2,r2,r2
10008ffc:	9885883a 	add	r2,r19,r2
10009000:	11000517 	ldw	r4,20(r2)
10009004:	8020917a 	slli	r16,r16,5
10009008:	00085200 	call	10008520 <__hi0bits>
1000900c:	d8c00817 	ldw	r3,32(sp)
10009010:	8085c83a 	sub	r2,r16,r2
10009014:	18800015 	stw	r2,0(r3)
10009018:	9805883a 	mov	r2,r19
1000901c:	dfc00717 	ldw	ra,28(sp)
10009020:	dd000617 	ldw	r20,24(sp)
10009024:	dcc00517 	ldw	r19,20(sp)
10009028:	dc800417 	ldw	r18,16(sp)
1000902c:	dc400317 	ldw	r17,12(sp)
10009030:	dc000217 	ldw	r16,8(sp)
10009034:	dec00804 	addi	sp,sp,32
10009038:	f800283a 	ret
1000903c:	d809883a 	mov	r4,sp
10009040:	00085880 	call	10008588 <__lo0bits>
10009044:	d8c00017 	ldw	r3,0(sp)
10009048:	04000044 	movi	r16,1
1000904c:	9c000415 	stw	r16,16(r19)
10009050:	98c00515 	stw	r3,20(r19)
10009054:	10800804 	addi	r2,r2,32
10009058:	883fe126 	beq	r17,zero,10008fe0 <__alt_data_end+0xf8008fe0>
1000905c:	00c00d44 	movi	r3,53
10009060:	8c7ef344 	addi	r17,r17,-1075
10009064:	88a3883a 	add	r17,r17,r2
10009068:	1885c83a 	sub	r2,r3,r2
1000906c:	d8c00817 	ldw	r3,32(sp)
10009070:	94400015 	stw	r17,0(r18)
10009074:	18800015 	stw	r2,0(r3)
10009078:	003fe706 	br	10009018 <__alt_data_end+0xf8009018>
1000907c:	01000804 	movi	r4,32
10009080:	2089c83a 	sub	r4,r4,r2
10009084:	1908983a 	sll	r4,r3,r4
10009088:	d9400117 	ldw	r5,4(sp)
1000908c:	1886d83a 	srl	r3,r3,r2
10009090:	2148b03a 	or	r4,r4,r5
10009094:	99000515 	stw	r4,20(r19)
10009098:	d8c00015 	stw	r3,0(sp)
1000909c:	003fca06 	br	10008fc8 <__alt_data_end+0xf8008fc8>

100090a0 <__ratio>:
100090a0:	defff904 	addi	sp,sp,-28
100090a4:	dc400315 	stw	r17,12(sp)
100090a8:	2823883a 	mov	r17,r5
100090ac:	d9400104 	addi	r5,sp,4
100090b0:	dfc00615 	stw	ra,24(sp)
100090b4:	dcc00515 	stw	r19,20(sp)
100090b8:	dc800415 	stw	r18,16(sp)
100090bc:	2027883a 	mov	r19,r4
100090c0:	dc000215 	stw	r16,8(sp)
100090c4:	0008e480 	call	10008e48 <__b2d>
100090c8:	d80b883a 	mov	r5,sp
100090cc:	8809883a 	mov	r4,r17
100090d0:	1025883a 	mov	r18,r2
100090d4:	1821883a 	mov	r16,r3
100090d8:	0008e480 	call	10008e48 <__b2d>
100090dc:	8a000417 	ldw	r8,16(r17)
100090e0:	99000417 	ldw	r4,16(r19)
100090e4:	d9400117 	ldw	r5,4(sp)
100090e8:	2209c83a 	sub	r4,r4,r8
100090ec:	2010917a 	slli	r8,r4,5
100090f0:	d9000017 	ldw	r4,0(sp)
100090f4:	2909c83a 	sub	r4,r5,r4
100090f8:	4109883a 	add	r4,r8,r4
100090fc:	01000e0e 	bge	zero,r4,10009138 <__ratio+0x98>
10009100:	2008953a 	slli	r4,r4,20
10009104:	2421883a 	add	r16,r4,r16
10009108:	100d883a 	mov	r6,r2
1000910c:	180f883a 	mov	r7,r3
10009110:	9009883a 	mov	r4,r18
10009114:	800b883a 	mov	r5,r16
10009118:	000d18c0 	call	1000d18c <__divdf3>
1000911c:	dfc00617 	ldw	ra,24(sp)
10009120:	dcc00517 	ldw	r19,20(sp)
10009124:	dc800417 	ldw	r18,16(sp)
10009128:	dc400317 	ldw	r17,12(sp)
1000912c:	dc000217 	ldw	r16,8(sp)
10009130:	dec00704 	addi	sp,sp,28
10009134:	f800283a 	ret
10009138:	2008953a 	slli	r4,r4,20
1000913c:	1907c83a 	sub	r3,r3,r4
10009140:	003ff106 	br	10009108 <__alt_data_end+0xf8009108>

10009144 <_mprec_log10>:
10009144:	defffe04 	addi	sp,sp,-8
10009148:	dc000015 	stw	r16,0(sp)
1000914c:	dfc00115 	stw	ra,4(sp)
10009150:	008005c4 	movi	r2,23
10009154:	2021883a 	mov	r16,r4
10009158:	11000d0e 	bge	r2,r4,10009190 <_mprec_log10+0x4c>
1000915c:	0005883a 	mov	r2,zero
10009160:	00cffc34 	movhi	r3,16368
10009164:	843fffc4 	addi	r16,r16,-1
10009168:	000d883a 	mov	r6,zero
1000916c:	01d00934 	movhi	r7,16420
10009170:	1009883a 	mov	r4,r2
10009174:	180b883a 	mov	r5,r3
10009178:	000ddb40 	call	1000ddb4 <__muldf3>
1000917c:	803ff91e 	bne	r16,zero,10009164 <__alt_data_end+0xf8009164>
10009180:	dfc00117 	ldw	ra,4(sp)
10009184:	dc000017 	ldw	r16,0(sp)
10009188:	dec00204 	addi	sp,sp,8
1000918c:	f800283a 	ret
10009190:	202090fa 	slli	r16,r4,3
10009194:	00840074 	movhi	r2,4097
10009198:	10888004 	addi	r2,r2,8704
1000919c:	1421883a 	add	r16,r2,r16
100091a0:	80800017 	ldw	r2,0(r16)
100091a4:	80c00117 	ldw	r3,4(r16)
100091a8:	dfc00117 	ldw	ra,4(sp)
100091ac:	dc000017 	ldw	r16,0(sp)
100091b0:	dec00204 	addi	sp,sp,8
100091b4:	f800283a 	ret

100091b8 <__copybits>:
100091b8:	297fffc4 	addi	r5,r5,-1
100091bc:	280fd17a 	srai	r7,r5,5
100091c0:	30c00417 	ldw	r3,16(r6)
100091c4:	30800504 	addi	r2,r6,20
100091c8:	39c00044 	addi	r7,r7,1
100091cc:	18c7883a 	add	r3,r3,r3
100091d0:	39cf883a 	add	r7,r7,r7
100091d4:	18c7883a 	add	r3,r3,r3
100091d8:	39cf883a 	add	r7,r7,r7
100091dc:	10c7883a 	add	r3,r2,r3
100091e0:	21cf883a 	add	r7,r4,r7
100091e4:	10c00d2e 	bgeu	r2,r3,1000921c <__copybits+0x64>
100091e8:	200b883a 	mov	r5,r4
100091ec:	12000017 	ldw	r8,0(r2)
100091f0:	29400104 	addi	r5,r5,4
100091f4:	10800104 	addi	r2,r2,4
100091f8:	2a3fff15 	stw	r8,-4(r5)
100091fc:	10fffb36 	bltu	r2,r3,100091ec <__alt_data_end+0xf80091ec>
10009200:	1985c83a 	sub	r2,r3,r6
10009204:	10bffac4 	addi	r2,r2,-21
10009208:	1004d0ba 	srli	r2,r2,2
1000920c:	10800044 	addi	r2,r2,1
10009210:	1085883a 	add	r2,r2,r2
10009214:	1085883a 	add	r2,r2,r2
10009218:	2089883a 	add	r4,r4,r2
1000921c:	21c0032e 	bgeu	r4,r7,1000922c <__copybits+0x74>
10009220:	20000015 	stw	zero,0(r4)
10009224:	21000104 	addi	r4,r4,4
10009228:	21fffd36 	bltu	r4,r7,10009220 <__alt_data_end+0xf8009220>
1000922c:	f800283a 	ret

10009230 <__any_on>:
10009230:	20c00417 	ldw	r3,16(r4)
10009234:	2805d17a 	srai	r2,r5,5
10009238:	21000504 	addi	r4,r4,20
1000923c:	18800d0e 	bge	r3,r2,10009274 <__any_on+0x44>
10009240:	18c7883a 	add	r3,r3,r3
10009244:	18c7883a 	add	r3,r3,r3
10009248:	20c7883a 	add	r3,r4,r3
1000924c:	20c0192e 	bgeu	r4,r3,100092b4 <__any_on+0x84>
10009250:	18bfff17 	ldw	r2,-4(r3)
10009254:	18ffff04 	addi	r3,r3,-4
10009258:	1000041e 	bne	r2,zero,1000926c <__any_on+0x3c>
1000925c:	20c0142e 	bgeu	r4,r3,100092b0 <__any_on+0x80>
10009260:	18ffff04 	addi	r3,r3,-4
10009264:	19400017 	ldw	r5,0(r3)
10009268:	283ffc26 	beq	r5,zero,1000925c <__alt_data_end+0xf800925c>
1000926c:	00800044 	movi	r2,1
10009270:	f800283a 	ret
10009274:	10c00a0e 	bge	r2,r3,100092a0 <__any_on+0x70>
10009278:	1085883a 	add	r2,r2,r2
1000927c:	1085883a 	add	r2,r2,r2
10009280:	294007cc 	andi	r5,r5,31
10009284:	2087883a 	add	r3,r4,r2
10009288:	283ff026 	beq	r5,zero,1000924c <__alt_data_end+0xf800924c>
1000928c:	19800017 	ldw	r6,0(r3)
10009290:	3144d83a 	srl	r2,r6,r5
10009294:	114a983a 	sll	r5,r2,r5
10009298:	317ff41e 	bne	r6,r5,1000926c <__alt_data_end+0xf800926c>
1000929c:	003feb06 	br	1000924c <__alt_data_end+0xf800924c>
100092a0:	1085883a 	add	r2,r2,r2
100092a4:	1085883a 	add	r2,r2,r2
100092a8:	2087883a 	add	r3,r4,r2
100092ac:	003fe706 	br	1000924c <__alt_data_end+0xf800924c>
100092b0:	f800283a 	ret
100092b4:	0005883a 	mov	r2,zero
100092b8:	f800283a 	ret

100092bc <_realloc_r>:
100092bc:	defff604 	addi	sp,sp,-40
100092c0:	dc800215 	stw	r18,8(sp)
100092c4:	dfc00915 	stw	ra,36(sp)
100092c8:	df000815 	stw	fp,32(sp)
100092cc:	ddc00715 	stw	r23,28(sp)
100092d0:	dd800615 	stw	r22,24(sp)
100092d4:	dd400515 	stw	r21,20(sp)
100092d8:	dd000415 	stw	r20,16(sp)
100092dc:	dcc00315 	stw	r19,12(sp)
100092e0:	dc400115 	stw	r17,4(sp)
100092e4:	dc000015 	stw	r16,0(sp)
100092e8:	3025883a 	mov	r18,r6
100092ec:	2800b726 	beq	r5,zero,100095cc <_realloc_r+0x310>
100092f0:	282b883a 	mov	r21,r5
100092f4:	2029883a 	mov	r20,r4
100092f8:	000f7200 	call	1000f720 <__malloc_lock>
100092fc:	a8bfff17 	ldw	r2,-4(r21)
10009300:	043fff04 	movi	r16,-4
10009304:	90c002c4 	addi	r3,r18,11
10009308:	01000584 	movi	r4,22
1000930c:	acfffe04 	addi	r19,r21,-8
10009310:	1420703a 	and	r16,r2,r16
10009314:	20c0332e 	bgeu	r4,r3,100093e4 <_realloc_r+0x128>
10009318:	047ffe04 	movi	r17,-8
1000931c:	1c62703a 	and	r17,r3,r17
10009320:	8807883a 	mov	r3,r17
10009324:	88005816 	blt	r17,zero,10009488 <_realloc_r+0x1cc>
10009328:	8c805736 	bltu	r17,r18,10009488 <_realloc_r+0x1cc>
1000932c:	80c0300e 	bge	r16,r3,100093f0 <_realloc_r+0x134>
10009330:	07040074 	movhi	fp,4097
10009334:	e70a2e04 	addi	fp,fp,10424
10009338:	e1c00217 	ldw	r7,8(fp)
1000933c:	9c09883a 	add	r4,r19,r16
10009340:	22000117 	ldw	r8,4(r4)
10009344:	21c06326 	beq	r4,r7,100094d4 <_realloc_r+0x218>
10009348:	017fff84 	movi	r5,-2
1000934c:	414a703a 	and	r5,r8,r5
10009350:	214b883a 	add	r5,r4,r5
10009354:	29800117 	ldw	r6,4(r5)
10009358:	3180004c 	andi	r6,r6,1
1000935c:	30003f26 	beq	r6,zero,1000945c <_realloc_r+0x1a0>
10009360:	1080004c 	andi	r2,r2,1
10009364:	10008326 	beq	r2,zero,10009574 <_realloc_r+0x2b8>
10009368:	900b883a 	mov	r5,r18
1000936c:	a009883a 	mov	r4,r20
10009370:	00075480 	call	10007548 <_malloc_r>
10009374:	1025883a 	mov	r18,r2
10009378:	10011e26 	beq	r2,zero,100097f4 <_realloc_r+0x538>
1000937c:	a93fff17 	ldw	r4,-4(r21)
10009380:	10fffe04 	addi	r3,r2,-8
10009384:	00bfff84 	movi	r2,-2
10009388:	2084703a 	and	r2,r4,r2
1000938c:	9885883a 	add	r2,r19,r2
10009390:	1880ee26 	beq	r3,r2,1000974c <_realloc_r+0x490>
10009394:	81bfff04 	addi	r6,r16,-4
10009398:	00800904 	movi	r2,36
1000939c:	1180b836 	bltu	r2,r6,10009680 <_realloc_r+0x3c4>
100093a0:	00c004c4 	movi	r3,19
100093a4:	19809636 	bltu	r3,r6,10009600 <_realloc_r+0x344>
100093a8:	9005883a 	mov	r2,r18
100093ac:	a807883a 	mov	r3,r21
100093b0:	19000017 	ldw	r4,0(r3)
100093b4:	11000015 	stw	r4,0(r2)
100093b8:	19000117 	ldw	r4,4(r3)
100093bc:	11000115 	stw	r4,4(r2)
100093c0:	18c00217 	ldw	r3,8(r3)
100093c4:	10c00215 	stw	r3,8(r2)
100093c8:	a80b883a 	mov	r5,r21
100093cc:	a009883a 	mov	r4,r20
100093d0:	00069500 	call	10006950 <_free_r>
100093d4:	a009883a 	mov	r4,r20
100093d8:	000f7440 	call	1000f744 <__malloc_unlock>
100093dc:	9005883a 	mov	r2,r18
100093e0:	00001206 	br	1000942c <_realloc_r+0x170>
100093e4:	00c00404 	movi	r3,16
100093e8:	1823883a 	mov	r17,r3
100093ec:	003fce06 	br	10009328 <__alt_data_end+0xf8009328>
100093f0:	a825883a 	mov	r18,r21
100093f4:	8445c83a 	sub	r2,r16,r17
100093f8:	00c003c4 	movi	r3,15
100093fc:	18802636 	bltu	r3,r2,10009498 <_realloc_r+0x1dc>
10009400:	99800117 	ldw	r6,4(r19)
10009404:	9c07883a 	add	r3,r19,r16
10009408:	3180004c 	andi	r6,r6,1
1000940c:	3420b03a 	or	r16,r6,r16
10009410:	9c000115 	stw	r16,4(r19)
10009414:	18800117 	ldw	r2,4(r3)
10009418:	10800054 	ori	r2,r2,1
1000941c:	18800115 	stw	r2,4(r3)
10009420:	a009883a 	mov	r4,r20
10009424:	000f7440 	call	1000f744 <__malloc_unlock>
10009428:	9005883a 	mov	r2,r18
1000942c:	dfc00917 	ldw	ra,36(sp)
10009430:	df000817 	ldw	fp,32(sp)
10009434:	ddc00717 	ldw	r23,28(sp)
10009438:	dd800617 	ldw	r22,24(sp)
1000943c:	dd400517 	ldw	r21,20(sp)
10009440:	dd000417 	ldw	r20,16(sp)
10009444:	dcc00317 	ldw	r19,12(sp)
10009448:	dc800217 	ldw	r18,8(sp)
1000944c:	dc400117 	ldw	r17,4(sp)
10009450:	dc000017 	ldw	r16,0(sp)
10009454:	dec00a04 	addi	sp,sp,40
10009458:	f800283a 	ret
1000945c:	017fff04 	movi	r5,-4
10009460:	414a703a 	and	r5,r8,r5
10009464:	814d883a 	add	r6,r16,r5
10009468:	30c01f16 	blt	r6,r3,100094e8 <_realloc_r+0x22c>
1000946c:	20800317 	ldw	r2,12(r4)
10009470:	20c00217 	ldw	r3,8(r4)
10009474:	a825883a 	mov	r18,r21
10009478:	3021883a 	mov	r16,r6
1000947c:	18800315 	stw	r2,12(r3)
10009480:	10c00215 	stw	r3,8(r2)
10009484:	003fdb06 	br	100093f4 <__alt_data_end+0xf80093f4>
10009488:	00800304 	movi	r2,12
1000948c:	a0800015 	stw	r2,0(r20)
10009490:	0005883a 	mov	r2,zero
10009494:	003fe506 	br	1000942c <__alt_data_end+0xf800942c>
10009498:	98c00117 	ldw	r3,4(r19)
1000949c:	9c4b883a 	add	r5,r19,r17
100094a0:	11000054 	ori	r4,r2,1
100094a4:	18c0004c 	andi	r3,r3,1
100094a8:	1c62b03a 	or	r17,r3,r17
100094ac:	9c400115 	stw	r17,4(r19)
100094b0:	29000115 	stw	r4,4(r5)
100094b4:	2885883a 	add	r2,r5,r2
100094b8:	10c00117 	ldw	r3,4(r2)
100094bc:	29400204 	addi	r5,r5,8
100094c0:	a009883a 	mov	r4,r20
100094c4:	18c00054 	ori	r3,r3,1
100094c8:	10c00115 	stw	r3,4(r2)
100094cc:	00069500 	call	10006950 <_free_r>
100094d0:	003fd306 	br	10009420 <__alt_data_end+0xf8009420>
100094d4:	017fff04 	movi	r5,-4
100094d8:	414a703a 	and	r5,r8,r5
100094dc:	89800404 	addi	r6,r17,16
100094e0:	8151883a 	add	r8,r16,r5
100094e4:	4180590e 	bge	r8,r6,1000964c <_realloc_r+0x390>
100094e8:	1080004c 	andi	r2,r2,1
100094ec:	103f9e1e 	bne	r2,zero,10009368 <__alt_data_end+0xf8009368>
100094f0:	adbffe17 	ldw	r22,-8(r21)
100094f4:	00bfff04 	movi	r2,-4
100094f8:	9dadc83a 	sub	r22,r19,r22
100094fc:	b1800117 	ldw	r6,4(r22)
10009500:	3084703a 	and	r2,r6,r2
10009504:	20002026 	beq	r4,zero,10009588 <_realloc_r+0x2cc>
10009508:	80af883a 	add	r23,r16,r2
1000950c:	b96f883a 	add	r23,r23,r5
10009510:	21c05f26 	beq	r4,r7,10009690 <_realloc_r+0x3d4>
10009514:	b8c01c16 	blt	r23,r3,10009588 <_realloc_r+0x2cc>
10009518:	20800317 	ldw	r2,12(r4)
1000951c:	20c00217 	ldw	r3,8(r4)
10009520:	81bfff04 	addi	r6,r16,-4
10009524:	01000904 	movi	r4,36
10009528:	18800315 	stw	r2,12(r3)
1000952c:	10c00215 	stw	r3,8(r2)
10009530:	b0c00217 	ldw	r3,8(r22)
10009534:	b0800317 	ldw	r2,12(r22)
10009538:	b4800204 	addi	r18,r22,8
1000953c:	18800315 	stw	r2,12(r3)
10009540:	10c00215 	stw	r3,8(r2)
10009544:	21801b36 	bltu	r4,r6,100095b4 <_realloc_r+0x2f8>
10009548:	008004c4 	movi	r2,19
1000954c:	1180352e 	bgeu	r2,r6,10009624 <_realloc_r+0x368>
10009550:	a8800017 	ldw	r2,0(r21)
10009554:	b0800215 	stw	r2,8(r22)
10009558:	a8800117 	ldw	r2,4(r21)
1000955c:	b0800315 	stw	r2,12(r22)
10009560:	008006c4 	movi	r2,27
10009564:	11807f36 	bltu	r2,r6,10009764 <_realloc_r+0x4a8>
10009568:	b0800404 	addi	r2,r22,16
1000956c:	ad400204 	addi	r21,r21,8
10009570:	00002d06 	br	10009628 <_realloc_r+0x36c>
10009574:	adbffe17 	ldw	r22,-8(r21)
10009578:	00bfff04 	movi	r2,-4
1000957c:	9dadc83a 	sub	r22,r19,r22
10009580:	b1000117 	ldw	r4,4(r22)
10009584:	2084703a 	and	r2,r4,r2
10009588:	b03f7726 	beq	r22,zero,10009368 <__alt_data_end+0xf8009368>
1000958c:	80af883a 	add	r23,r16,r2
10009590:	b8ff7516 	blt	r23,r3,10009368 <__alt_data_end+0xf8009368>
10009594:	b0800317 	ldw	r2,12(r22)
10009598:	b0c00217 	ldw	r3,8(r22)
1000959c:	81bfff04 	addi	r6,r16,-4
100095a0:	01000904 	movi	r4,36
100095a4:	18800315 	stw	r2,12(r3)
100095a8:	10c00215 	stw	r3,8(r2)
100095ac:	b4800204 	addi	r18,r22,8
100095b0:	21bfe52e 	bgeu	r4,r6,10009548 <__alt_data_end+0xf8009548>
100095b4:	a80b883a 	mov	r5,r21
100095b8:	9009883a 	mov	r4,r18
100095bc:	0007f800 	call	10007f80 <memmove>
100095c0:	b821883a 	mov	r16,r23
100095c4:	b027883a 	mov	r19,r22
100095c8:	003f8a06 	br	100093f4 <__alt_data_end+0xf80093f4>
100095cc:	300b883a 	mov	r5,r6
100095d0:	dfc00917 	ldw	ra,36(sp)
100095d4:	df000817 	ldw	fp,32(sp)
100095d8:	ddc00717 	ldw	r23,28(sp)
100095dc:	dd800617 	ldw	r22,24(sp)
100095e0:	dd400517 	ldw	r21,20(sp)
100095e4:	dd000417 	ldw	r20,16(sp)
100095e8:	dcc00317 	ldw	r19,12(sp)
100095ec:	dc800217 	ldw	r18,8(sp)
100095f0:	dc400117 	ldw	r17,4(sp)
100095f4:	dc000017 	ldw	r16,0(sp)
100095f8:	dec00a04 	addi	sp,sp,40
100095fc:	00075481 	jmpi	10007548 <_malloc_r>
10009600:	a8c00017 	ldw	r3,0(r21)
10009604:	90c00015 	stw	r3,0(r18)
10009608:	a8c00117 	ldw	r3,4(r21)
1000960c:	90c00115 	stw	r3,4(r18)
10009610:	00c006c4 	movi	r3,27
10009614:	19804536 	bltu	r3,r6,1000972c <_realloc_r+0x470>
10009618:	90800204 	addi	r2,r18,8
1000961c:	a8c00204 	addi	r3,r21,8
10009620:	003f6306 	br	100093b0 <__alt_data_end+0xf80093b0>
10009624:	9005883a 	mov	r2,r18
10009628:	a8c00017 	ldw	r3,0(r21)
1000962c:	b821883a 	mov	r16,r23
10009630:	b027883a 	mov	r19,r22
10009634:	10c00015 	stw	r3,0(r2)
10009638:	a8c00117 	ldw	r3,4(r21)
1000963c:	10c00115 	stw	r3,4(r2)
10009640:	a8c00217 	ldw	r3,8(r21)
10009644:	10c00215 	stw	r3,8(r2)
10009648:	003f6a06 	br	100093f4 <__alt_data_end+0xf80093f4>
1000964c:	9c67883a 	add	r19,r19,r17
10009650:	4445c83a 	sub	r2,r8,r17
10009654:	e4c00215 	stw	r19,8(fp)
10009658:	10800054 	ori	r2,r2,1
1000965c:	98800115 	stw	r2,4(r19)
10009660:	a8bfff17 	ldw	r2,-4(r21)
10009664:	a009883a 	mov	r4,r20
10009668:	1080004c 	andi	r2,r2,1
1000966c:	1462b03a 	or	r17,r2,r17
10009670:	ac7fff15 	stw	r17,-4(r21)
10009674:	000f7440 	call	1000f744 <__malloc_unlock>
10009678:	a805883a 	mov	r2,r21
1000967c:	003f6b06 	br	1000942c <__alt_data_end+0xf800942c>
10009680:	a80b883a 	mov	r5,r21
10009684:	9009883a 	mov	r4,r18
10009688:	0007f800 	call	10007f80 <memmove>
1000968c:	003f4e06 	br	100093c8 <__alt_data_end+0xf80093c8>
10009690:	89000404 	addi	r4,r17,16
10009694:	b93fbc16 	blt	r23,r4,10009588 <__alt_data_end+0xf8009588>
10009698:	b0800317 	ldw	r2,12(r22)
1000969c:	b0c00217 	ldw	r3,8(r22)
100096a0:	81bfff04 	addi	r6,r16,-4
100096a4:	01000904 	movi	r4,36
100096a8:	18800315 	stw	r2,12(r3)
100096ac:	10c00215 	stw	r3,8(r2)
100096b0:	b4800204 	addi	r18,r22,8
100096b4:	21804336 	bltu	r4,r6,100097c4 <_realloc_r+0x508>
100096b8:	008004c4 	movi	r2,19
100096bc:	11803f2e 	bgeu	r2,r6,100097bc <_realloc_r+0x500>
100096c0:	a8800017 	ldw	r2,0(r21)
100096c4:	b0800215 	stw	r2,8(r22)
100096c8:	a8800117 	ldw	r2,4(r21)
100096cc:	b0800315 	stw	r2,12(r22)
100096d0:	008006c4 	movi	r2,27
100096d4:	11803f36 	bltu	r2,r6,100097d4 <_realloc_r+0x518>
100096d8:	b0800404 	addi	r2,r22,16
100096dc:	ad400204 	addi	r21,r21,8
100096e0:	a8c00017 	ldw	r3,0(r21)
100096e4:	10c00015 	stw	r3,0(r2)
100096e8:	a8c00117 	ldw	r3,4(r21)
100096ec:	10c00115 	stw	r3,4(r2)
100096f0:	a8c00217 	ldw	r3,8(r21)
100096f4:	10c00215 	stw	r3,8(r2)
100096f8:	b447883a 	add	r3,r22,r17
100096fc:	bc45c83a 	sub	r2,r23,r17
10009700:	e0c00215 	stw	r3,8(fp)
10009704:	10800054 	ori	r2,r2,1
10009708:	18800115 	stw	r2,4(r3)
1000970c:	b0800117 	ldw	r2,4(r22)
10009710:	a009883a 	mov	r4,r20
10009714:	1080004c 	andi	r2,r2,1
10009718:	1462b03a 	or	r17,r2,r17
1000971c:	b4400115 	stw	r17,4(r22)
10009720:	000f7440 	call	1000f744 <__malloc_unlock>
10009724:	9005883a 	mov	r2,r18
10009728:	003f4006 	br	1000942c <__alt_data_end+0xf800942c>
1000972c:	a8c00217 	ldw	r3,8(r21)
10009730:	90c00215 	stw	r3,8(r18)
10009734:	a8c00317 	ldw	r3,12(r21)
10009738:	90c00315 	stw	r3,12(r18)
1000973c:	30801126 	beq	r6,r2,10009784 <_realloc_r+0x4c8>
10009740:	90800404 	addi	r2,r18,16
10009744:	a8c00404 	addi	r3,r21,16
10009748:	003f1906 	br	100093b0 <__alt_data_end+0xf80093b0>
1000974c:	90ffff17 	ldw	r3,-4(r18)
10009750:	00bfff04 	movi	r2,-4
10009754:	a825883a 	mov	r18,r21
10009758:	1884703a 	and	r2,r3,r2
1000975c:	80a1883a 	add	r16,r16,r2
10009760:	003f2406 	br	100093f4 <__alt_data_end+0xf80093f4>
10009764:	a8800217 	ldw	r2,8(r21)
10009768:	b0800415 	stw	r2,16(r22)
1000976c:	a8800317 	ldw	r2,12(r21)
10009770:	b0800515 	stw	r2,20(r22)
10009774:	31000a26 	beq	r6,r4,100097a0 <_realloc_r+0x4e4>
10009778:	b0800604 	addi	r2,r22,24
1000977c:	ad400404 	addi	r21,r21,16
10009780:	003fa906 	br	10009628 <__alt_data_end+0xf8009628>
10009784:	a9000417 	ldw	r4,16(r21)
10009788:	90800604 	addi	r2,r18,24
1000978c:	a8c00604 	addi	r3,r21,24
10009790:	91000415 	stw	r4,16(r18)
10009794:	a9000517 	ldw	r4,20(r21)
10009798:	91000515 	stw	r4,20(r18)
1000979c:	003f0406 	br	100093b0 <__alt_data_end+0xf80093b0>
100097a0:	a8c00417 	ldw	r3,16(r21)
100097a4:	ad400604 	addi	r21,r21,24
100097a8:	b0800804 	addi	r2,r22,32
100097ac:	b0c00615 	stw	r3,24(r22)
100097b0:	a8ffff17 	ldw	r3,-4(r21)
100097b4:	b0c00715 	stw	r3,28(r22)
100097b8:	003f9b06 	br	10009628 <__alt_data_end+0xf8009628>
100097bc:	9005883a 	mov	r2,r18
100097c0:	003fc706 	br	100096e0 <__alt_data_end+0xf80096e0>
100097c4:	a80b883a 	mov	r5,r21
100097c8:	9009883a 	mov	r4,r18
100097cc:	0007f800 	call	10007f80 <memmove>
100097d0:	003fc906 	br	100096f8 <__alt_data_end+0xf80096f8>
100097d4:	a8800217 	ldw	r2,8(r21)
100097d8:	b0800415 	stw	r2,16(r22)
100097dc:	a8800317 	ldw	r2,12(r21)
100097e0:	b0800515 	stw	r2,20(r22)
100097e4:	31000726 	beq	r6,r4,10009804 <_realloc_r+0x548>
100097e8:	b0800604 	addi	r2,r22,24
100097ec:	ad400404 	addi	r21,r21,16
100097f0:	003fbb06 	br	100096e0 <__alt_data_end+0xf80096e0>
100097f4:	a009883a 	mov	r4,r20
100097f8:	000f7440 	call	1000f744 <__malloc_unlock>
100097fc:	0005883a 	mov	r2,zero
10009800:	003f0a06 	br	1000942c <__alt_data_end+0xf800942c>
10009804:	a8c00417 	ldw	r3,16(r21)
10009808:	ad400604 	addi	r21,r21,24
1000980c:	b0800804 	addi	r2,r22,32
10009810:	b0c00615 	stw	r3,24(r22)
10009814:	a8ffff17 	ldw	r3,-4(r21)
10009818:	b0c00715 	stw	r3,28(r22)
1000981c:	003fb006 	br	100096e0 <__alt_data_end+0xf80096e0>

10009820 <__fpclassifyd>:
10009820:	00a00034 	movhi	r2,32768
10009824:	10bfffc4 	addi	r2,r2,-1
10009828:	2884703a 	and	r2,r5,r2
1000982c:	10000726 	beq	r2,zero,1000984c <__fpclassifyd+0x2c>
10009830:	00fffc34 	movhi	r3,65520
10009834:	019ff834 	movhi	r6,32736
10009838:	28c7883a 	add	r3,r5,r3
1000983c:	31bfffc4 	addi	r6,r6,-1
10009840:	30c00536 	bltu	r6,r3,10009858 <__fpclassifyd+0x38>
10009844:	00800104 	movi	r2,4
10009848:	f800283a 	ret
1000984c:	2000021e 	bne	r4,zero,10009858 <__fpclassifyd+0x38>
10009850:	00800084 	movi	r2,2
10009854:	f800283a 	ret
10009858:	00dffc34 	movhi	r3,32752
1000985c:	019ff834 	movhi	r6,32736
10009860:	28cb883a 	add	r5,r5,r3
10009864:	31bfffc4 	addi	r6,r6,-1
10009868:	317ff62e 	bgeu	r6,r5,10009844 <__alt_data_end+0xf8009844>
1000986c:	01400434 	movhi	r5,16
10009870:	297fffc4 	addi	r5,r5,-1
10009874:	28800236 	bltu	r5,r2,10009880 <__fpclassifyd+0x60>
10009878:	008000c4 	movi	r2,3
1000987c:	f800283a 	ret
10009880:	10c00226 	beq	r2,r3,1000988c <__fpclassifyd+0x6c>
10009884:	0005883a 	mov	r2,zero
10009888:	f800283a 	ret
1000988c:	2005003a 	cmpeq	r2,r4,zero
10009890:	f800283a 	ret

10009894 <_sbrk_r>:
10009894:	defffd04 	addi	sp,sp,-12
10009898:	dc000015 	stw	r16,0(sp)
1000989c:	04040074 	movhi	r16,4097
100098a0:	dc400115 	stw	r17,4(sp)
100098a4:	84168404 	addi	r16,r16,23056
100098a8:	2023883a 	mov	r17,r4
100098ac:	2809883a 	mov	r4,r5
100098b0:	dfc00215 	stw	ra,8(sp)
100098b4:	80000015 	stw	zero,0(r16)
100098b8:	000f92c0 	call	1000f92c <sbrk>
100098bc:	00ffffc4 	movi	r3,-1
100098c0:	10c00526 	beq	r2,r3,100098d8 <_sbrk_r+0x44>
100098c4:	dfc00217 	ldw	ra,8(sp)
100098c8:	dc400117 	ldw	r17,4(sp)
100098cc:	dc000017 	ldw	r16,0(sp)
100098d0:	dec00304 	addi	sp,sp,12
100098d4:	f800283a 	ret
100098d8:	80c00017 	ldw	r3,0(r16)
100098dc:	183ff926 	beq	r3,zero,100098c4 <__alt_data_end+0xf80098c4>
100098e0:	88c00015 	stw	r3,0(r17)
100098e4:	003ff706 	br	100098c4 <__alt_data_end+0xf80098c4>

100098e8 <__sread>:
100098e8:	defffe04 	addi	sp,sp,-8
100098ec:	dc000015 	stw	r16,0(sp)
100098f0:	2821883a 	mov	r16,r5
100098f4:	2940038f 	ldh	r5,14(r5)
100098f8:	dfc00115 	stw	ra,4(sp)
100098fc:	000b7a40 	call	1000b7a4 <_read_r>
10009900:	10000716 	blt	r2,zero,10009920 <__sread+0x38>
10009904:	80c01417 	ldw	r3,80(r16)
10009908:	1887883a 	add	r3,r3,r2
1000990c:	80c01415 	stw	r3,80(r16)
10009910:	dfc00117 	ldw	ra,4(sp)
10009914:	dc000017 	ldw	r16,0(sp)
10009918:	dec00204 	addi	sp,sp,8
1000991c:	f800283a 	ret
10009920:	80c0030b 	ldhu	r3,12(r16)
10009924:	18fbffcc 	andi	r3,r3,61439
10009928:	80c0030d 	sth	r3,12(r16)
1000992c:	dfc00117 	ldw	ra,4(sp)
10009930:	dc000017 	ldw	r16,0(sp)
10009934:	dec00204 	addi	sp,sp,8
10009938:	f800283a 	ret

1000993c <__seofread>:
1000993c:	0005883a 	mov	r2,zero
10009940:	f800283a 	ret

10009944 <__swrite>:
10009944:	2880030b 	ldhu	r2,12(r5)
10009948:	defffb04 	addi	sp,sp,-20
1000994c:	dcc00315 	stw	r19,12(sp)
10009950:	dc800215 	stw	r18,8(sp)
10009954:	dc400115 	stw	r17,4(sp)
10009958:	dc000015 	stw	r16,0(sp)
1000995c:	dfc00415 	stw	ra,16(sp)
10009960:	10c0400c 	andi	r3,r2,256
10009964:	2821883a 	mov	r16,r5
10009968:	2023883a 	mov	r17,r4
1000996c:	3025883a 	mov	r18,r6
10009970:	3827883a 	mov	r19,r7
10009974:	18000526 	beq	r3,zero,1000998c <__swrite+0x48>
10009978:	2940038f 	ldh	r5,14(r5)
1000997c:	01c00084 	movi	r7,2
10009980:	000d883a 	mov	r6,zero
10009984:	000b7440 	call	1000b744 <_lseek_r>
10009988:	8080030b 	ldhu	r2,12(r16)
1000998c:	8140038f 	ldh	r5,14(r16)
10009990:	10bbffcc 	andi	r2,r2,61439
10009994:	980f883a 	mov	r7,r19
10009998:	900d883a 	mov	r6,r18
1000999c:	8809883a 	mov	r4,r17
100099a0:	8080030d 	sth	r2,12(r16)
100099a4:	dfc00417 	ldw	ra,16(sp)
100099a8:	dcc00317 	ldw	r19,12(sp)
100099ac:	dc800217 	ldw	r18,8(sp)
100099b0:	dc400117 	ldw	r17,4(sp)
100099b4:	dc000017 	ldw	r16,0(sp)
100099b8:	dec00504 	addi	sp,sp,20
100099bc:	000b1f81 	jmpi	1000b1f8 <_write_r>

100099c0 <__sseek>:
100099c0:	defffe04 	addi	sp,sp,-8
100099c4:	dc000015 	stw	r16,0(sp)
100099c8:	2821883a 	mov	r16,r5
100099cc:	2940038f 	ldh	r5,14(r5)
100099d0:	dfc00115 	stw	ra,4(sp)
100099d4:	000b7440 	call	1000b744 <_lseek_r>
100099d8:	00ffffc4 	movi	r3,-1
100099dc:	10c00826 	beq	r2,r3,10009a00 <__sseek+0x40>
100099e0:	80c0030b 	ldhu	r3,12(r16)
100099e4:	80801415 	stw	r2,80(r16)
100099e8:	18c40014 	ori	r3,r3,4096
100099ec:	80c0030d 	sth	r3,12(r16)
100099f0:	dfc00117 	ldw	ra,4(sp)
100099f4:	dc000017 	ldw	r16,0(sp)
100099f8:	dec00204 	addi	sp,sp,8
100099fc:	f800283a 	ret
10009a00:	80c0030b 	ldhu	r3,12(r16)
10009a04:	18fbffcc 	andi	r3,r3,61439
10009a08:	80c0030d 	sth	r3,12(r16)
10009a0c:	dfc00117 	ldw	ra,4(sp)
10009a10:	dc000017 	ldw	r16,0(sp)
10009a14:	dec00204 	addi	sp,sp,8
10009a18:	f800283a 	ret

10009a1c <__sclose>:
10009a1c:	2940038f 	ldh	r5,14(r5)
10009a20:	000b2581 	jmpi	1000b258 <_close_r>

10009a24 <strcmp>:
10009a24:	2144b03a 	or	r2,r4,r5
10009a28:	108000cc 	andi	r2,r2,3
10009a2c:	1000171e 	bne	r2,zero,10009a8c <strcmp+0x68>
10009a30:	20800017 	ldw	r2,0(r4)
10009a34:	28c00017 	ldw	r3,0(r5)
10009a38:	10c0141e 	bne	r2,r3,10009a8c <strcmp+0x68>
10009a3c:	027fbff4 	movhi	r9,65279
10009a40:	4a7fbfc4 	addi	r9,r9,-257
10009a44:	0086303a 	nor	r3,zero,r2
10009a48:	02202074 	movhi	r8,32897
10009a4c:	1245883a 	add	r2,r2,r9
10009a50:	42202004 	addi	r8,r8,-32640
10009a54:	10c4703a 	and	r2,r2,r3
10009a58:	1204703a 	and	r2,r2,r8
10009a5c:	10000226 	beq	r2,zero,10009a68 <strcmp+0x44>
10009a60:	00002306 	br	10009af0 <strcmp+0xcc>
10009a64:	1000221e 	bne	r2,zero,10009af0 <strcmp+0xcc>
10009a68:	21000104 	addi	r4,r4,4
10009a6c:	20c00017 	ldw	r3,0(r4)
10009a70:	29400104 	addi	r5,r5,4
10009a74:	29800017 	ldw	r6,0(r5)
10009a78:	1a4f883a 	add	r7,r3,r9
10009a7c:	00c4303a 	nor	r2,zero,r3
10009a80:	3884703a 	and	r2,r7,r2
10009a84:	1204703a 	and	r2,r2,r8
10009a88:	19bff626 	beq	r3,r6,10009a64 <__alt_data_end+0xf8009a64>
10009a8c:	20800003 	ldbu	r2,0(r4)
10009a90:	10c03fcc 	andi	r3,r2,255
10009a94:	18c0201c 	xori	r3,r3,128
10009a98:	18ffe004 	addi	r3,r3,-128
10009a9c:	18000c26 	beq	r3,zero,10009ad0 <strcmp+0xac>
10009aa0:	29800007 	ldb	r6,0(r5)
10009aa4:	19800326 	beq	r3,r6,10009ab4 <strcmp+0x90>
10009aa8:	00001306 	br	10009af8 <strcmp+0xd4>
10009aac:	29800007 	ldb	r6,0(r5)
10009ab0:	11800b1e 	bne	r2,r6,10009ae0 <strcmp+0xbc>
10009ab4:	21000044 	addi	r4,r4,1
10009ab8:	20c00003 	ldbu	r3,0(r4)
10009abc:	29400044 	addi	r5,r5,1
10009ac0:	18803fcc 	andi	r2,r3,255
10009ac4:	1080201c 	xori	r2,r2,128
10009ac8:	10bfe004 	addi	r2,r2,-128
10009acc:	103ff71e 	bne	r2,zero,10009aac <__alt_data_end+0xf8009aac>
10009ad0:	0007883a 	mov	r3,zero
10009ad4:	28800003 	ldbu	r2,0(r5)
10009ad8:	1885c83a 	sub	r2,r3,r2
10009adc:	f800283a 	ret
10009ae0:	28800003 	ldbu	r2,0(r5)
10009ae4:	18c03fcc 	andi	r3,r3,255
10009ae8:	1885c83a 	sub	r2,r3,r2
10009aec:	f800283a 	ret
10009af0:	0005883a 	mov	r2,zero
10009af4:	f800283a 	ret
10009af8:	10c03fcc 	andi	r3,r2,255
10009afc:	003ff506 	br	10009ad4 <__alt_data_end+0xf8009ad4>

10009b00 <__sprint_r.part.0>:
10009b00:	28801917 	ldw	r2,100(r5)
10009b04:	defff604 	addi	sp,sp,-40
10009b08:	dd400515 	stw	r21,20(sp)
10009b0c:	dfc00915 	stw	ra,36(sp)
10009b10:	df000815 	stw	fp,32(sp)
10009b14:	ddc00715 	stw	r23,28(sp)
10009b18:	dd800615 	stw	r22,24(sp)
10009b1c:	dd000415 	stw	r20,16(sp)
10009b20:	dcc00315 	stw	r19,12(sp)
10009b24:	dc800215 	stw	r18,8(sp)
10009b28:	dc400115 	stw	r17,4(sp)
10009b2c:	dc000015 	stw	r16,0(sp)
10009b30:	1088000c 	andi	r2,r2,8192
10009b34:	302b883a 	mov	r21,r6
10009b38:	10002e26 	beq	r2,zero,10009bf4 <__sprint_r.part.0+0xf4>
10009b3c:	30800217 	ldw	r2,8(r6)
10009b40:	35800017 	ldw	r22,0(r6)
10009b44:	10002926 	beq	r2,zero,10009bec <__sprint_r.part.0+0xec>
10009b48:	2827883a 	mov	r19,r5
10009b4c:	2029883a 	mov	r20,r4
10009b50:	b5c00104 	addi	r23,r22,4
10009b54:	04bfffc4 	movi	r18,-1
10009b58:	bc400017 	ldw	r17,0(r23)
10009b5c:	b4000017 	ldw	r16,0(r22)
10009b60:	0039883a 	mov	fp,zero
10009b64:	8822d0ba 	srli	r17,r17,2
10009b68:	8800031e 	bne	r17,zero,10009b78 <__sprint_r.part.0+0x78>
10009b6c:	00001806 	br	10009bd0 <__sprint_r.part.0+0xd0>
10009b70:	84000104 	addi	r16,r16,4
10009b74:	8f001526 	beq	r17,fp,10009bcc <__sprint_r.part.0+0xcc>
10009b78:	81400017 	ldw	r5,0(r16)
10009b7c:	980d883a 	mov	r6,r19
10009b80:	a009883a 	mov	r4,r20
10009b84:	000b5f00 	call	1000b5f0 <_fputwc_r>
10009b88:	e7000044 	addi	fp,fp,1
10009b8c:	14bff81e 	bne	r2,r18,10009b70 <__alt_data_end+0xf8009b70>
10009b90:	9005883a 	mov	r2,r18
10009b94:	a8000215 	stw	zero,8(r21)
10009b98:	a8000115 	stw	zero,4(r21)
10009b9c:	dfc00917 	ldw	ra,36(sp)
10009ba0:	df000817 	ldw	fp,32(sp)
10009ba4:	ddc00717 	ldw	r23,28(sp)
10009ba8:	dd800617 	ldw	r22,24(sp)
10009bac:	dd400517 	ldw	r21,20(sp)
10009bb0:	dd000417 	ldw	r20,16(sp)
10009bb4:	dcc00317 	ldw	r19,12(sp)
10009bb8:	dc800217 	ldw	r18,8(sp)
10009bbc:	dc400117 	ldw	r17,4(sp)
10009bc0:	dc000017 	ldw	r16,0(sp)
10009bc4:	dec00a04 	addi	sp,sp,40
10009bc8:	f800283a 	ret
10009bcc:	a8800217 	ldw	r2,8(r21)
10009bd0:	8c63883a 	add	r17,r17,r17
10009bd4:	8c63883a 	add	r17,r17,r17
10009bd8:	1445c83a 	sub	r2,r2,r17
10009bdc:	a8800215 	stw	r2,8(r21)
10009be0:	b5800204 	addi	r22,r22,8
10009be4:	bdc00204 	addi	r23,r23,8
10009be8:	103fdb1e 	bne	r2,zero,10009b58 <__alt_data_end+0xf8009b58>
10009bec:	0005883a 	mov	r2,zero
10009bf0:	003fe806 	br	10009b94 <__alt_data_end+0xf8009b94>
10009bf4:	0006c600 	call	10006c60 <__sfvwrite_r>
10009bf8:	003fe606 	br	10009b94 <__alt_data_end+0xf8009b94>

10009bfc <__sprint_r>:
10009bfc:	30c00217 	ldw	r3,8(r6)
10009c00:	18000126 	beq	r3,zero,10009c08 <__sprint_r+0xc>
10009c04:	0009b001 	jmpi	10009b00 <__sprint_r.part.0>
10009c08:	30000115 	stw	zero,4(r6)
10009c0c:	0005883a 	mov	r2,zero
10009c10:	f800283a 	ret

10009c14 <___vfiprintf_internal_r>:
10009c14:	deffca04 	addi	sp,sp,-216
10009c18:	dd403115 	stw	r21,196(sp)
10009c1c:	dfc03515 	stw	ra,212(sp)
10009c20:	df003415 	stw	fp,208(sp)
10009c24:	ddc03315 	stw	r23,204(sp)
10009c28:	dd803215 	stw	r22,200(sp)
10009c2c:	dd003015 	stw	r20,192(sp)
10009c30:	dcc02f15 	stw	r19,188(sp)
10009c34:	dc802e15 	stw	r18,184(sp)
10009c38:	dc402d15 	stw	r17,180(sp)
10009c3c:	dc002c15 	stw	r16,176(sp)
10009c40:	d9002115 	stw	r4,132(sp)
10009c44:	d9402015 	stw	r5,128(sp)
10009c48:	d9c02215 	stw	r7,136(sp)
10009c4c:	302b883a 	mov	r21,r6
10009c50:	20000226 	beq	r4,zero,10009c5c <___vfiprintf_internal_r+0x48>
10009c54:	20800e17 	ldw	r2,56(r4)
10009c58:	1000cf26 	beq	r2,zero,10009f98 <___vfiprintf_internal_r+0x384>
10009c5c:	d8c02017 	ldw	r3,128(sp)
10009c60:	1880030b 	ldhu	r2,12(r3)
10009c64:	10c8000c 	andi	r3,r2,8192
10009c68:	1800071e 	bne	r3,zero,10009c88 <___vfiprintf_internal_r+0x74>
10009c6c:	d9402017 	ldw	r5,128(sp)
10009c70:	00f7ffc4 	movi	r3,-8193
10009c74:	10880014 	ori	r2,r2,8192
10009c78:	29001917 	ldw	r4,100(r5)
10009c7c:	2880030d 	sth	r2,12(r5)
10009c80:	20c6703a 	and	r3,r4,r3
10009c84:	28c01915 	stw	r3,100(r5)
10009c88:	10c0020c 	andi	r3,r2,8
10009c8c:	1800a526 	beq	r3,zero,10009f24 <___vfiprintf_internal_r+0x310>
10009c90:	d9002017 	ldw	r4,128(sp)
10009c94:	20c00417 	ldw	r3,16(r4)
10009c98:	1800a226 	beq	r3,zero,10009f24 <___vfiprintf_internal_r+0x310>
10009c9c:	1080068c 	andi	r2,r2,26
10009ca0:	00c00284 	movi	r3,10
10009ca4:	10c0a826 	beq	r2,r3,10009f48 <___vfiprintf_internal_r+0x334>
10009ca8:	d9001a04 	addi	r4,sp,104
10009cac:	d94019c4 	addi	r5,sp,103
10009cb0:	04840074 	movhi	r18,4097
10009cb4:	2145c83a 	sub	r2,r4,r5
10009cb8:	9488b204 	addi	r18,r18,8904
10009cbc:	d9001e15 	stw	r4,120(sp)
10009cc0:	d9401f15 	stw	r5,124(sp)
10009cc4:	dec01a15 	stw	sp,104(sp)
10009cc8:	d8001c15 	stw	zero,112(sp)
10009ccc:	d8001b15 	stw	zero,108(sp)
10009cd0:	d811883a 	mov	r8,sp
10009cd4:	d8002615 	stw	zero,152(sp)
10009cd8:	d8002415 	stw	zero,144(sp)
10009cdc:	d8802815 	stw	r2,160(sp)
10009ce0:	a82d883a 	mov	r22,r21
10009ce4:	b0800007 	ldb	r2,0(r22)
10009ce8:	10040d26 	beq	r2,zero,1000ad20 <___vfiprintf_internal_r+0x110c>
10009cec:	00c00944 	movi	r3,37
10009cf0:	b029883a 	mov	r20,r22
10009cf4:	10c0021e 	bne	r2,r3,10009d00 <___vfiprintf_internal_r+0xec>
10009cf8:	00001606 	br	10009d54 <___vfiprintf_internal_r+0x140>
10009cfc:	10c00326 	beq	r2,r3,10009d0c <___vfiprintf_internal_r+0xf8>
10009d00:	a5000044 	addi	r20,r20,1
10009d04:	a0800007 	ldb	r2,0(r20)
10009d08:	103ffc1e 	bne	r2,zero,10009cfc <__alt_data_end+0xf8009cfc>
10009d0c:	a5a1c83a 	sub	r16,r20,r22
10009d10:	80001026 	beq	r16,zero,10009d54 <___vfiprintf_internal_r+0x140>
10009d14:	d8c01c17 	ldw	r3,112(sp)
10009d18:	d8801b17 	ldw	r2,108(sp)
10009d1c:	45800015 	stw	r22,0(r8)
10009d20:	80c7883a 	add	r3,r16,r3
10009d24:	10800044 	addi	r2,r2,1
10009d28:	44000115 	stw	r16,4(r8)
10009d2c:	d8c01c15 	stw	r3,112(sp)
10009d30:	d8801b15 	stw	r2,108(sp)
10009d34:	010001c4 	movi	r4,7
10009d38:	2080750e 	bge	r4,r2,10009f10 <___vfiprintf_internal_r+0x2fc>
10009d3c:	1803951e 	bne	r3,zero,1000ab94 <___vfiprintf_internal_r+0xf80>
10009d40:	d8c02417 	ldw	r3,144(sp)
10009d44:	d8001b15 	stw	zero,108(sp)
10009d48:	d811883a 	mov	r8,sp
10009d4c:	1c07883a 	add	r3,r3,r16
10009d50:	d8c02415 	stw	r3,144(sp)
10009d54:	a0800007 	ldb	r2,0(r20)
10009d58:	1002e026 	beq	r2,zero,1000a8dc <___vfiprintf_internal_r+0xcc8>
10009d5c:	a5800044 	addi	r22,r20,1
10009d60:	a0c00047 	ldb	r3,1(r20)
10009d64:	d8001d85 	stb	zero,118(sp)
10009d68:	0027883a 	mov	r19,zero
10009d6c:	d8002305 	stb	zero,140(sp)
10009d70:	043fffc4 	movi	r16,-1
10009d74:	d8002515 	stw	zero,148(sp)
10009d78:	0023883a 	mov	r17,zero
10009d7c:	05001604 	movi	r20,88
10009d80:	05400244 	movi	r21,9
10009d84:	402f883a 	mov	r23,r8
10009d88:	b5800044 	addi	r22,r22,1
10009d8c:	18bff804 	addi	r2,r3,-32
10009d90:	a0827736 	bltu	r20,r2,1000a770 <___vfiprintf_internal_r+0xb5c>
10009d94:	100490ba 	slli	r2,r2,2
10009d98:	01040074 	movhi	r4,4097
10009d9c:	21276b04 	addi	r4,r4,-25172
10009da0:	1105883a 	add	r2,r2,r4
10009da4:	10800017 	ldw	r2,0(r2)
10009da8:	1000683a 	jmp	r2
10009dac:	1000a470 	cmpltui	zero,r2,657
10009db0:	1000a770 	cmpltui	zero,r2,669
10009db4:	1000a770 	cmpltui	zero,r2,669
10009db8:	1000a48c 	andi	zero,r2,658
10009dbc:	1000a770 	cmpltui	zero,r2,669
10009dc0:	1000a770 	cmpltui	zero,r2,669
10009dc4:	1000a770 	cmpltui	zero,r2,669
10009dc8:	1000a770 	cmpltui	zero,r2,669
10009dcc:	1000a770 	cmpltui	zero,r2,669
10009dd0:	1000a770 	cmpltui	zero,r2,669
10009dd4:	1000a694 	ori	zero,r2,666
10009dd8:	1000a6b8 	rdprs	zero,r2,666
10009ddc:	1000a770 	cmpltui	zero,r2,669
10009de0:	10009fb0 	cmpltui	zero,r2,638
10009de4:	1000a6cc 	andi	zero,r2,667
10009de8:	1000a770 	cmpltui	zero,r2,669
10009dec:	1000a498 	cmpnei	zero,r2,658
10009df0:	1000a4a4 	muli	zero,r2,658
10009df4:	1000a4a4 	muli	zero,r2,658
10009df8:	1000a4a4 	muli	zero,r2,658
10009dfc:	1000a4a4 	muli	zero,r2,658
10009e00:	1000a4a4 	muli	zero,r2,658
10009e04:	1000a4a4 	muli	zero,r2,658
10009e08:	1000a4a4 	muli	zero,r2,658
10009e0c:	1000a4a4 	muli	zero,r2,658
10009e10:	1000a4a4 	muli	zero,r2,658
10009e14:	1000a770 	cmpltui	zero,r2,669
10009e18:	1000a770 	cmpltui	zero,r2,669
10009e1c:	1000a770 	cmpltui	zero,r2,669
10009e20:	1000a770 	cmpltui	zero,r2,669
10009e24:	1000a770 	cmpltui	zero,r2,669
10009e28:	1000a770 	cmpltui	zero,r2,669
10009e2c:	1000a770 	cmpltui	zero,r2,669
10009e30:	1000a770 	cmpltui	zero,r2,669
10009e34:	1000a770 	cmpltui	zero,r2,669
10009e38:	1000a770 	cmpltui	zero,r2,669
10009e3c:	1000a4e4 	muli	zero,r2,659
10009e40:	1000a770 	cmpltui	zero,r2,669
10009e44:	1000a770 	cmpltui	zero,r2,669
10009e48:	1000a770 	cmpltui	zero,r2,669
10009e4c:	1000a770 	cmpltui	zero,r2,669
10009e50:	1000a770 	cmpltui	zero,r2,669
10009e54:	1000a770 	cmpltui	zero,r2,669
10009e58:	1000a770 	cmpltui	zero,r2,669
10009e5c:	1000a770 	cmpltui	zero,r2,669
10009e60:	1000a770 	cmpltui	zero,r2,669
10009e64:	1000a770 	cmpltui	zero,r2,669
10009e68:	1000a520 	cmpeqi	zero,r2,660
10009e6c:	1000a770 	cmpltui	zero,r2,669
10009e70:	1000a770 	cmpltui	zero,r2,669
10009e74:	1000a770 	cmpltui	zero,r2,669
10009e78:	1000a770 	cmpltui	zero,r2,669
10009e7c:	1000a770 	cmpltui	zero,r2,669
10009e80:	1000a57c 	xorhi	zero,r2,661
10009e84:	1000a770 	cmpltui	zero,r2,669
10009e88:	1000a770 	cmpltui	zero,r2,669
10009e8c:	1000a5f0 	cmpltui	zero,r2,663
10009e90:	1000a770 	cmpltui	zero,r2,669
10009e94:	1000a770 	cmpltui	zero,r2,669
10009e98:	1000a770 	cmpltui	zero,r2,669
10009e9c:	1000a770 	cmpltui	zero,r2,669
10009ea0:	1000a770 	cmpltui	zero,r2,669
10009ea4:	1000a770 	cmpltui	zero,r2,669
10009ea8:	1000a770 	cmpltui	zero,r2,669
10009eac:	1000a770 	cmpltui	zero,r2,669
10009eb0:	1000a770 	cmpltui	zero,r2,669
10009eb4:	1000a770 	cmpltui	zero,r2,669
10009eb8:	1000a398 	cmpnei	zero,r2,654
10009ebc:	1000a3c8 	cmpgei	zero,r2,655
10009ec0:	1000a770 	cmpltui	zero,r2,669
10009ec4:	1000a770 	cmpltui	zero,r2,669
10009ec8:	1000a770 	cmpltui	zero,r2,669
10009ecc:	1000a718 	cmpnei	zero,r2,668
10009ed0:	1000a3c8 	cmpgei	zero,r2,655
10009ed4:	1000a770 	cmpltui	zero,r2,669
10009ed8:	1000a770 	cmpltui	zero,r2,669
10009edc:	1000a270 	cmpltui	zero,r2,649
10009ee0:	1000a770 	cmpltui	zero,r2,669
10009ee4:	1000a284 	addi	zero,r2,650
10009ee8:	1000a2bc 	xorhi	zero,r2,650
10009eec:	10009fbc 	xorhi	zero,r2,638
10009ef0:	1000a264 	muli	zero,r2,649
10009ef4:	1000a770 	cmpltui	zero,r2,669
10009ef8:	1000a630 	cmpltui	zero,r2,664
10009efc:	1000a770 	cmpltui	zero,r2,669
10009f00:	1000a67c 	xorhi	zero,r2,665
10009f04:	1000a770 	cmpltui	zero,r2,669
10009f08:	1000a770 	cmpltui	zero,r2,669
10009f0c:	1000a340 	call	11000a34 <_gp+0xfe4b6c>
10009f10:	42000204 	addi	r8,r8,8
10009f14:	d8c02417 	ldw	r3,144(sp)
10009f18:	1c07883a 	add	r3,r3,r16
10009f1c:	d8c02415 	stw	r3,144(sp)
10009f20:	003f8c06 	br	10009d54 <__alt_data_end+0xf8009d54>
10009f24:	d9402017 	ldw	r5,128(sp)
10009f28:	d9002117 	ldw	r4,132(sp)
10009f2c:	00047d00 	call	100047d0 <__swsetup_r>
10009f30:	1003c11e 	bne	r2,zero,1000ae38 <___vfiprintf_internal_r+0x1224>
10009f34:	d9402017 	ldw	r5,128(sp)
10009f38:	00c00284 	movi	r3,10
10009f3c:	2880030b 	ldhu	r2,12(r5)
10009f40:	1080068c 	andi	r2,r2,26
10009f44:	10ff581e 	bne	r2,r3,10009ca8 <__alt_data_end+0xf8009ca8>
10009f48:	d8c02017 	ldw	r3,128(sp)
10009f4c:	1880038f 	ldh	r2,14(r3)
10009f50:	103f5516 	blt	r2,zero,10009ca8 <__alt_data_end+0xf8009ca8>
10009f54:	d9c02217 	ldw	r7,136(sp)
10009f58:	d9002117 	ldw	r4,132(sp)
10009f5c:	a80d883a 	mov	r6,r21
10009f60:	180b883a 	mov	r5,r3
10009f64:	000b13c0 	call	1000b13c <__sbprintf>
10009f68:	dfc03517 	ldw	ra,212(sp)
10009f6c:	df003417 	ldw	fp,208(sp)
10009f70:	ddc03317 	ldw	r23,204(sp)
10009f74:	dd803217 	ldw	r22,200(sp)
10009f78:	dd403117 	ldw	r21,196(sp)
10009f7c:	dd003017 	ldw	r20,192(sp)
10009f80:	dcc02f17 	ldw	r19,188(sp)
10009f84:	dc802e17 	ldw	r18,184(sp)
10009f88:	dc402d17 	ldw	r17,180(sp)
10009f8c:	dc002c17 	ldw	r16,176(sp)
10009f90:	dec03604 	addi	sp,sp,216
10009f94:	f800283a 	ret
10009f98:	00067dc0 	call	100067dc <__sinit>
10009f9c:	003f2f06 	br	10009c5c <__alt_data_end+0xf8009c5c>
10009fa0:	d8c02517 	ldw	r3,148(sp)
10009fa4:	d8802215 	stw	r2,136(sp)
10009fa8:	00c7c83a 	sub	r3,zero,r3
10009fac:	d8c02515 	stw	r3,148(sp)
10009fb0:	8c400114 	ori	r17,r17,4
10009fb4:	b0c00007 	ldb	r3,0(r22)
10009fb8:	003f7306 	br	10009d88 <__alt_data_end+0xf8009d88>
10009fbc:	00800c04 	movi	r2,48
10009fc0:	d9402217 	ldw	r5,136(sp)
10009fc4:	d8801d05 	stb	r2,116(sp)
10009fc8:	00801e04 	movi	r2,120
10009fcc:	d8801d45 	stb	r2,117(sp)
10009fd0:	d8001d85 	stb	zero,118(sp)
10009fd4:	b811883a 	mov	r8,r23
10009fd8:	28c00104 	addi	r3,r5,4
10009fdc:	2cc00017 	ldw	r19,0(r5)
10009fe0:	0029883a 	mov	r20,zero
10009fe4:	88800094 	ori	r2,r17,2
10009fe8:	80032516 	blt	r16,zero,1000ac80 <___vfiprintf_internal_r+0x106c>
10009fec:	00bfdfc4 	movi	r2,-129
10009ff0:	88a2703a 	and	r17,r17,r2
10009ff4:	d8c02215 	stw	r3,136(sp)
10009ff8:	8c400094 	ori	r17,r17,2
10009ffc:	98032a1e 	bne	r19,zero,1000aca8 <___vfiprintf_internal_r+0x1094>
1000a000:	00840074 	movhi	r2,4097
1000a004:	10885104 	addi	r2,r2,8516
1000a008:	d8802615 	stw	r2,152(sp)
1000a00c:	002b883a 	mov	r21,zero
1000a010:	8001741e 	bne	r16,zero,1000a5e4 <___vfiprintf_internal_r+0x9d0>
1000a014:	0021883a 	mov	r16,zero
1000a018:	0029883a 	mov	r20,zero
1000a01c:	ddc01a04 	addi	r23,sp,104
1000a020:	8027883a 	mov	r19,r16
1000a024:	8500010e 	bge	r16,r20,1000a02c <___vfiprintf_internal_r+0x418>
1000a028:	a027883a 	mov	r19,r20
1000a02c:	ad403fcc 	andi	r21,r21,255
1000a030:	ad40201c 	xori	r21,r21,128
1000a034:	ad7fe004 	addi	r21,r21,-128
1000a038:	a8000126 	beq	r21,zero,1000a040 <___vfiprintf_internal_r+0x42c>
1000a03c:	9cc00044 	addi	r19,r19,1
1000a040:	89c0008c 	andi	r7,r17,2
1000a044:	38000126 	beq	r7,zero,1000a04c <___vfiprintf_internal_r+0x438>
1000a048:	9cc00084 	addi	r19,r19,2
1000a04c:	88c0210c 	andi	r3,r17,132
1000a050:	1801dd1e 	bne	r3,zero,1000a7c8 <___vfiprintf_internal_r+0xbb4>
1000a054:	d9402517 	ldw	r5,148(sp)
1000a058:	2cebc83a 	sub	r21,r5,r19
1000a05c:	0541da0e 	bge	zero,r21,1000a7c8 <___vfiprintf_internal_r+0xbb4>
1000a060:	07000404 	movi	fp,16
1000a064:	d8801c17 	ldw	r2,112(sp)
1000a068:	e543be0e 	bge	fp,r21,1000af64 <___vfiprintf_internal_r+0x1350>
1000a06c:	01440074 	movhi	r5,4097
1000a070:	2948b604 	addi	r5,r5,8920
1000a074:	dc002715 	stw	r16,156(sp)
1000a078:	d9801b17 	ldw	r6,108(sp)
1000a07c:	a821883a 	mov	r16,r21
1000a080:	d9402315 	stw	r5,140(sp)
1000a084:	028001c4 	movi	r10,7
1000a088:	d9c02915 	stw	r7,164(sp)
1000a08c:	182b883a 	mov	r21,r3
1000a090:	00000506 	br	1000a0a8 <___vfiprintf_internal_r+0x494>
1000a094:	31000084 	addi	r4,r6,2
1000a098:	42000204 	addi	r8,r8,8
1000a09c:	180d883a 	mov	r6,r3
1000a0a0:	843ffc04 	addi	r16,r16,-16
1000a0a4:	e4000f0e 	bge	fp,r16,1000a0e4 <___vfiprintf_internal_r+0x4d0>
1000a0a8:	01040074 	movhi	r4,4097
1000a0ac:	10800404 	addi	r2,r2,16
1000a0b0:	30c00044 	addi	r3,r6,1
1000a0b4:	2108b604 	addi	r4,r4,8920
1000a0b8:	41000015 	stw	r4,0(r8)
1000a0bc:	47000115 	stw	fp,4(r8)
1000a0c0:	d8801c15 	stw	r2,112(sp)
1000a0c4:	d8c01b15 	stw	r3,108(sp)
1000a0c8:	50fff20e 	bge	r10,r3,1000a094 <__alt_data_end+0xf800a094>
1000a0cc:	1001b21e 	bne	r2,zero,1000a798 <___vfiprintf_internal_r+0xb84>
1000a0d0:	843ffc04 	addi	r16,r16,-16
1000a0d4:	000d883a 	mov	r6,zero
1000a0d8:	01000044 	movi	r4,1
1000a0dc:	d811883a 	mov	r8,sp
1000a0e0:	e43ff116 	blt	fp,r16,1000a0a8 <__alt_data_end+0xf800a0a8>
1000a0e4:	a807883a 	mov	r3,r21
1000a0e8:	d9c02917 	ldw	r7,164(sp)
1000a0ec:	802b883a 	mov	r21,r16
1000a0f0:	dc002717 	ldw	r16,156(sp)
1000a0f4:	d9402317 	ldw	r5,140(sp)
1000a0f8:	a885883a 	add	r2,r21,r2
1000a0fc:	45400115 	stw	r21,4(r8)
1000a100:	41400015 	stw	r5,0(r8)
1000a104:	d8801c15 	stw	r2,112(sp)
1000a108:	d9001b15 	stw	r4,108(sp)
1000a10c:	014001c4 	movi	r5,7
1000a110:	29026216 	blt	r5,r4,1000aa9c <___vfiprintf_internal_r+0xe88>
1000a114:	d9801d87 	ldb	r6,118(sp)
1000a118:	42000204 	addi	r8,r8,8
1000a11c:	21400044 	addi	r5,r4,1
1000a120:	3001ae1e 	bne	r6,zero,1000a7dc <___vfiprintf_internal_r+0xbc8>
1000a124:	3801bb26 	beq	r7,zero,1000a814 <___vfiprintf_internal_r+0xc00>
1000a128:	d9001d04 	addi	r4,sp,116
1000a12c:	10800084 	addi	r2,r2,2
1000a130:	41000015 	stw	r4,0(r8)
1000a134:	01000084 	movi	r4,2
1000a138:	41000115 	stw	r4,4(r8)
1000a13c:	d8801c15 	stw	r2,112(sp)
1000a140:	d9401b15 	stw	r5,108(sp)
1000a144:	010001c4 	movi	r4,7
1000a148:	2142680e 	bge	r4,r5,1000aaec <___vfiprintf_internal_r+0xed8>
1000a14c:	1002b11e 	bne	r2,zero,1000ac14 <___vfiprintf_internal_r+0x1000>
1000a150:	01802004 	movi	r6,128
1000a154:	01400044 	movi	r5,1
1000a158:	0009883a 	mov	r4,zero
1000a15c:	d811883a 	mov	r8,sp
1000a160:	1981ae1e 	bne	r3,r6,1000a81c <___vfiprintf_internal_r+0xc08>
1000a164:	d8c02517 	ldw	r3,148(sp)
1000a168:	1cf9c83a 	sub	fp,r3,r19
1000a16c:	0701ab0e 	bge	zero,fp,1000a81c <___vfiprintf_internal_r+0xc08>
1000a170:	05400404 	movi	r21,16
1000a174:	af03a90e 	bge	r21,fp,1000b01c <___vfiprintf_internal_r+0x1408>
1000a178:	01440074 	movhi	r5,4097
1000a17c:	2948b204 	addi	r5,r5,8904
1000a180:	d9402315 	stw	r5,140(sp)
1000a184:	01c001c4 	movi	r7,7
1000a188:	00000506 	br	1000a1a0 <___vfiprintf_internal_r+0x58c>
1000a18c:	21800084 	addi	r6,r4,2
1000a190:	42000204 	addi	r8,r8,8
1000a194:	1809883a 	mov	r4,r3
1000a198:	e73ffc04 	addi	fp,fp,-16
1000a19c:	af000d0e 	bge	r21,fp,1000a1d4 <___vfiprintf_internal_r+0x5c0>
1000a1a0:	10800404 	addi	r2,r2,16
1000a1a4:	20c00044 	addi	r3,r4,1
1000a1a8:	44800015 	stw	r18,0(r8)
1000a1ac:	45400115 	stw	r21,4(r8)
1000a1b0:	d8801c15 	stw	r2,112(sp)
1000a1b4:	d8c01b15 	stw	r3,108(sp)
1000a1b8:	38fff40e 	bge	r7,r3,1000a18c <__alt_data_end+0xf800a18c>
1000a1bc:	10022b1e 	bne	r2,zero,1000aa6c <___vfiprintf_internal_r+0xe58>
1000a1c0:	e73ffc04 	addi	fp,fp,-16
1000a1c4:	01800044 	movi	r6,1
1000a1c8:	0009883a 	mov	r4,zero
1000a1cc:	d811883a 	mov	r8,sp
1000a1d0:	af3ff316 	blt	r21,fp,1000a1a0 <__alt_data_end+0xf800a1a0>
1000a1d4:	d8c02317 	ldw	r3,140(sp)
1000a1d8:	1705883a 	add	r2,r2,fp
1000a1dc:	47000115 	stw	fp,4(r8)
1000a1e0:	40c00015 	stw	r3,0(r8)
1000a1e4:	d8801c15 	stw	r2,112(sp)
1000a1e8:	d9801b15 	stw	r6,108(sp)
1000a1ec:	00c001c4 	movi	r3,7
1000a1f0:	19829416 	blt	r3,r6,1000ac44 <___vfiprintf_internal_r+0x1030>
1000a1f4:	8521c83a 	sub	r16,r16,r20
1000a1f8:	42000204 	addi	r8,r8,8
1000a1fc:	31400044 	addi	r5,r6,1
1000a200:	3009883a 	mov	r4,r6
1000a204:	04018716 	blt	zero,r16,1000a824 <___vfiprintf_internal_r+0xc10>
1000a208:	a085883a 	add	r2,r20,r2
1000a20c:	45c00015 	stw	r23,0(r8)
1000a210:	45000115 	stw	r20,4(r8)
1000a214:	d8801c15 	stw	r2,112(sp)
1000a218:	d9401b15 	stw	r5,108(sp)
1000a21c:	00c001c4 	movi	r3,7
1000a220:	1941c20e 	bge	r3,r5,1000a92c <___vfiprintf_internal_r+0xd18>
1000a224:	1002531e 	bne	r2,zero,1000ab74 <___vfiprintf_internal_r+0xf60>
1000a228:	d8001b15 	stw	zero,108(sp)
1000a22c:	8c40010c 	andi	r17,r17,4
1000a230:	88023226 	beq	r17,zero,1000aafc <___vfiprintf_internal_r+0xee8>
1000a234:	d9002517 	ldw	r4,148(sp)
1000a238:	24e3c83a 	sub	r17,r4,r19
1000a23c:	04432916 	blt	zero,r17,1000aee4 <___vfiprintf_internal_r+0x12d0>
1000a240:	d8802517 	ldw	r2,148(sp)
1000a244:	14c0010e 	bge	r2,r19,1000a24c <___vfiprintf_internal_r+0x638>
1000a248:	9805883a 	mov	r2,r19
1000a24c:	d8c02417 	ldw	r3,144(sp)
1000a250:	1887883a 	add	r3,r3,r2
1000a254:	d8c02415 	stw	r3,144(sp)
1000a258:	d8001b15 	stw	zero,108(sp)
1000a25c:	d811883a 	mov	r8,sp
1000a260:	003ea006 	br	10009ce4 <__alt_data_end+0xf8009ce4>
1000a264:	8c400814 	ori	r17,r17,32
1000a268:	b0c00007 	ldb	r3,0(r22)
1000a26c:	003ec606 	br	10009d88 <__alt_data_end+0xf8009d88>
1000a270:	b0c00007 	ldb	r3,0(r22)
1000a274:	00801b04 	movi	r2,108
1000a278:	18832026 	beq	r3,r2,1000aefc <___vfiprintf_internal_r+0x12e8>
1000a27c:	8c400414 	ori	r17,r17,16
1000a280:	003ec106 	br	10009d88 <__alt_data_end+0xf8009d88>
1000a284:	9cc03fcc 	andi	r19,r19,255
1000a288:	b811883a 	mov	r8,r23
1000a28c:	9803981e 	bne	r19,zero,1000b0f0 <___vfiprintf_internal_r+0x14dc>
1000a290:	8880080c 	andi	r2,r17,32
1000a294:	1002be26 	beq	r2,zero,1000ad90 <___vfiprintf_internal_r+0x117c>
1000a298:	d9002217 	ldw	r4,136(sp)
1000a29c:	d9402417 	ldw	r5,144(sp)
1000a2a0:	20800017 	ldw	r2,0(r4)
1000a2a4:	2807d7fa 	srai	r3,r5,31
1000a2a8:	21000104 	addi	r4,r4,4
1000a2ac:	d9002215 	stw	r4,136(sp)
1000a2b0:	11400015 	stw	r5,0(r2)
1000a2b4:	10c00115 	stw	r3,4(r2)
1000a2b8:	003e8a06 	br	10009ce4 <__alt_data_end+0xf8009ce4>
1000a2bc:	9cc03fcc 	andi	r19,r19,255
1000a2c0:	b811883a 	mov	r8,r23
1000a2c4:	9803871e 	bne	r19,zero,1000b0e4 <___vfiprintf_internal_r+0x14d0>
1000a2c8:	8880080c 	andi	r2,r17,32
1000a2cc:	10009a26 	beq	r2,zero,1000a538 <___vfiprintf_internal_r+0x924>
1000a2d0:	d9002217 	ldw	r4,136(sp)
1000a2d4:	d8001d85 	stb	zero,118(sp)
1000a2d8:	20800204 	addi	r2,r4,8
1000a2dc:	24c00017 	ldw	r19,0(r4)
1000a2e0:	25000117 	ldw	r20,4(r4)
1000a2e4:	8002a416 	blt	r16,zero,1000ad78 <___vfiprintf_internal_r+0x1164>
1000a2e8:	013fdfc4 	movi	r4,-129
1000a2ec:	9d06b03a 	or	r3,r19,r20
1000a2f0:	d8802215 	stw	r2,136(sp)
1000a2f4:	8922703a 	and	r17,r17,r4
1000a2f8:	18009b26 	beq	r3,zero,1000a568 <___vfiprintf_internal_r+0x954>
1000a2fc:	002b883a 	mov	r21,zero
1000a300:	ddc01a04 	addi	r23,sp,104
1000a304:	9806d0fa 	srli	r3,r19,3
1000a308:	a008977a 	slli	r4,r20,29
1000a30c:	a028d0fa 	srli	r20,r20,3
1000a310:	9cc001cc 	andi	r19,r19,7
1000a314:	98800c04 	addi	r2,r19,48
1000a318:	bdffffc4 	addi	r23,r23,-1
1000a31c:	20e6b03a 	or	r19,r4,r3
1000a320:	b8800005 	stb	r2,0(r23)
1000a324:	9d06b03a 	or	r3,r19,r20
1000a328:	183ff61e 	bne	r3,zero,1000a304 <__alt_data_end+0xf800a304>
1000a32c:	88c0004c 	andi	r3,r17,1
1000a330:	18021f1e 	bne	r3,zero,1000abb0 <___vfiprintf_internal_r+0xf9c>
1000a334:	d9401e17 	ldw	r5,120(sp)
1000a338:	2de9c83a 	sub	r20,r5,r23
1000a33c:	003f3806 	br	1000a020 <__alt_data_end+0xf800a020>
1000a340:	9cc03fcc 	andi	r19,r19,255
1000a344:	b811883a 	mov	r8,r23
1000a348:	98034f1e 	bne	r19,zero,1000b088 <___vfiprintf_internal_r+0x1474>
1000a34c:	00840074 	movhi	r2,4097
1000a350:	10885104 	addi	r2,r2,8516
1000a354:	d8802615 	stw	r2,152(sp)
1000a358:	8880080c 	andi	r2,r17,32
1000a35c:	1000ac26 	beq	r2,zero,1000a610 <___vfiprintf_internal_r+0x9fc>
1000a360:	d9002217 	ldw	r4,136(sp)
1000a364:	24c00017 	ldw	r19,0(r4)
1000a368:	25000117 	ldw	r20,4(r4)
1000a36c:	21000204 	addi	r4,r4,8
1000a370:	d9002215 	stw	r4,136(sp)
1000a374:	8880004c 	andi	r2,r17,1
1000a378:	1001e726 	beq	r2,zero,1000ab18 <___vfiprintf_internal_r+0xf04>
1000a37c:	9d04b03a 	or	r2,r19,r20
1000a380:	10025c1e 	bne	r2,zero,1000acf4 <___vfiprintf_internal_r+0x10e0>
1000a384:	d8001d85 	stb	zero,118(sp)
1000a388:	80024416 	blt	r16,zero,1000ac9c <___vfiprintf_internal_r+0x1088>
1000a38c:	00bfdfc4 	movi	r2,-129
1000a390:	88a2703a 	and	r17,r17,r2
1000a394:	003f1d06 	br	1000a00c <__alt_data_end+0xf800a00c>
1000a398:	d8c02217 	ldw	r3,136(sp)
1000a39c:	04c00044 	movi	r19,1
1000a3a0:	b811883a 	mov	r8,r23
1000a3a4:	18800017 	ldw	r2,0(r3)
1000a3a8:	18c00104 	addi	r3,r3,4
1000a3ac:	d8001d85 	stb	zero,118(sp)
1000a3b0:	d8801005 	stb	r2,64(sp)
1000a3b4:	d8c02215 	stw	r3,136(sp)
1000a3b8:	9829883a 	mov	r20,r19
1000a3bc:	ddc01004 	addi	r23,sp,64
1000a3c0:	0021883a 	mov	r16,zero
1000a3c4:	003f1e06 	br	1000a040 <__alt_data_end+0xf800a040>
1000a3c8:	9cc03fcc 	andi	r19,r19,255
1000a3cc:	b811883a 	mov	r8,r23
1000a3d0:	9803331e 	bne	r19,zero,1000b0a0 <___vfiprintf_internal_r+0x148c>
1000a3d4:	8880080c 	andi	r2,r17,32
1000a3d8:	10004826 	beq	r2,zero,1000a4fc <___vfiprintf_internal_r+0x8e8>
1000a3dc:	d9002217 	ldw	r4,136(sp)
1000a3e0:	20800117 	ldw	r2,4(r4)
1000a3e4:	24c00017 	ldw	r19,0(r4)
1000a3e8:	21000204 	addi	r4,r4,8
1000a3ec:	d9002215 	stw	r4,136(sp)
1000a3f0:	1029883a 	mov	r20,r2
1000a3f4:	10024c16 	blt	r2,zero,1000ad28 <___vfiprintf_internal_r+0x1114>
1000a3f8:	dd401d83 	ldbu	r21,118(sp)
1000a3fc:	80007116 	blt	r16,zero,1000a5c4 <___vfiprintf_internal_r+0x9b0>
1000a400:	00ffdfc4 	movi	r3,-129
1000a404:	9d04b03a 	or	r2,r19,r20
1000a408:	88e2703a 	and	r17,r17,r3
1000a40c:	1000d126 	beq	r2,zero,1000a754 <___vfiprintf_internal_r+0xb40>
1000a410:	a0023526 	beq	r20,zero,1000ace8 <___vfiprintf_internal_r+0x10d4>
1000a414:	ddc01a04 	addi	r23,sp,104
1000a418:	4039883a 	mov	fp,r8
1000a41c:	9809883a 	mov	r4,r19
1000a420:	a00b883a 	mov	r5,r20
1000a424:	01800284 	movi	r6,10
1000a428:	000f883a 	mov	r7,zero
1000a42c:	000c1400 	call	1000c140 <__umoddi3>
1000a430:	10800c04 	addi	r2,r2,48
1000a434:	bdffffc4 	addi	r23,r23,-1
1000a438:	9809883a 	mov	r4,r19
1000a43c:	a00b883a 	mov	r5,r20
1000a440:	b8800005 	stb	r2,0(r23)
1000a444:	01800284 	movi	r6,10
1000a448:	000f883a 	mov	r7,zero
1000a44c:	000bb440 	call	1000bb44 <__udivdi3>
1000a450:	1027883a 	mov	r19,r2
1000a454:	10c4b03a 	or	r2,r2,r3
1000a458:	1829883a 	mov	r20,r3
1000a45c:	103fef1e 	bne	r2,zero,1000a41c <__alt_data_end+0xf800a41c>
1000a460:	d9001e17 	ldw	r4,120(sp)
1000a464:	e011883a 	mov	r8,fp
1000a468:	25e9c83a 	sub	r20,r4,r23
1000a46c:	003eec06 	br	1000a020 <__alt_data_end+0xf800a020>
1000a470:	d8802307 	ldb	r2,140(sp)
1000a474:	1002361e 	bne	r2,zero,1000ad50 <___vfiprintf_internal_r+0x113c>
1000a478:	00c00804 	movi	r3,32
1000a47c:	d8c02305 	stb	r3,140(sp)
1000a480:	04c00044 	movi	r19,1
1000a484:	b0c00007 	ldb	r3,0(r22)
1000a488:	003e3f06 	br	10009d88 <__alt_data_end+0xf8009d88>
1000a48c:	8c400054 	ori	r17,r17,1
1000a490:	b0c00007 	ldb	r3,0(r22)
1000a494:	003e3c06 	br	10009d88 <__alt_data_end+0xf8009d88>
1000a498:	8c402014 	ori	r17,r17,128
1000a49c:	b0c00007 	ldb	r3,0(r22)
1000a4a0:	003e3906 	br	10009d88 <__alt_data_end+0xf8009d88>
1000a4a4:	dc002715 	stw	r16,156(sp)
1000a4a8:	d8002515 	stw	zero,148(sp)
1000a4ac:	1f3ff404 	addi	fp,r3,-48
1000a4b0:	0009883a 	mov	r4,zero
1000a4b4:	b021883a 	mov	r16,r22
1000a4b8:	01400284 	movi	r5,10
1000a4bc:	000c8b80 	call	1000c8b8 <__mulsi3>
1000a4c0:	80c00007 	ldb	r3,0(r16)
1000a4c4:	e089883a 	add	r4,fp,r2
1000a4c8:	b5800044 	addi	r22,r22,1
1000a4cc:	1f3ff404 	addi	fp,r3,-48
1000a4d0:	b021883a 	mov	r16,r22
1000a4d4:	af3ff82e 	bgeu	r21,fp,1000a4b8 <__alt_data_end+0xf800a4b8>
1000a4d8:	d9002515 	stw	r4,148(sp)
1000a4dc:	dc002717 	ldw	r16,156(sp)
1000a4e0:	003e2a06 	br	10009d8c <__alt_data_end+0xf8009d8c>
1000a4e4:	9cc03fcc 	andi	r19,r19,255
1000a4e8:	b811883a 	mov	r8,r23
1000a4ec:	9802e91e 	bne	r19,zero,1000b094 <___vfiprintf_internal_r+0x1480>
1000a4f0:	8c400414 	ori	r17,r17,16
1000a4f4:	8880080c 	andi	r2,r17,32
1000a4f8:	103fb81e 	bne	r2,zero,1000a3dc <__alt_data_end+0xf800a3dc>
1000a4fc:	8880040c 	andi	r2,r17,16
1000a500:	10022e26 	beq	r2,zero,1000adbc <___vfiprintf_internal_r+0x11a8>
1000a504:	d9402217 	ldw	r5,136(sp)
1000a508:	2cc00017 	ldw	r19,0(r5)
1000a50c:	29400104 	addi	r5,r5,4
1000a510:	d9402215 	stw	r5,136(sp)
1000a514:	9829d7fa 	srai	r20,r19,31
1000a518:	a005883a 	mov	r2,r20
1000a51c:	003fb506 	br	1000a3f4 <__alt_data_end+0xf800a3f4>
1000a520:	9cc03fcc 	andi	r19,r19,255
1000a524:	b811883a 	mov	r8,r23
1000a528:	9802fa1e 	bne	r19,zero,1000b114 <___vfiprintf_internal_r+0x1500>
1000a52c:	8c400414 	ori	r17,r17,16
1000a530:	8880080c 	andi	r2,r17,32
1000a534:	103f661e 	bne	r2,zero,1000a2d0 <__alt_data_end+0xf800a2d0>
1000a538:	8880040c 	andi	r2,r17,16
1000a53c:	10020626 	beq	r2,zero,1000ad58 <___vfiprintf_internal_r+0x1144>
1000a540:	d9402217 	ldw	r5,136(sp)
1000a544:	d8001d85 	stb	zero,118(sp)
1000a548:	0029883a 	mov	r20,zero
1000a54c:	28800104 	addi	r2,r5,4
1000a550:	2cc00017 	ldw	r19,0(r5)
1000a554:	80020816 	blt	r16,zero,1000ad78 <___vfiprintf_internal_r+0x1164>
1000a558:	00ffdfc4 	movi	r3,-129
1000a55c:	d8802215 	stw	r2,136(sp)
1000a560:	88e2703a 	and	r17,r17,r3
1000a564:	983f651e 	bne	r19,zero,1000a2fc <__alt_data_end+0xf800a2fc>
1000a568:	002b883a 	mov	r21,zero
1000a56c:	8002cf26 	beq	r16,zero,1000b0ac <___vfiprintf_internal_r+0x1498>
1000a570:	0027883a 	mov	r19,zero
1000a574:	0029883a 	mov	r20,zero
1000a578:	003f6106 	br	1000a300 <__alt_data_end+0xf800a300>
1000a57c:	9cc03fcc 	andi	r19,r19,255
1000a580:	b811883a 	mov	r8,r23
1000a584:	9802e01e 	bne	r19,zero,1000b108 <___vfiprintf_internal_r+0x14f4>
1000a588:	8c400414 	ori	r17,r17,16
1000a58c:	8880080c 	andi	r2,r17,32
1000a590:	1000641e 	bne	r2,zero,1000a724 <___vfiprintf_internal_r+0xb10>
1000a594:	8880040c 	andi	r2,r17,16
1000a598:	1001c81e 	bne	r2,zero,1000acbc <___vfiprintf_internal_r+0x10a8>
1000a59c:	8880100c 	andi	r2,r17,64
1000a5a0:	d8001d85 	stb	zero,118(sp)
1000a5a4:	1002281e 	bne	r2,zero,1000ae48 <___vfiprintf_internal_r+0x1234>
1000a5a8:	d9002217 	ldw	r4,136(sp)
1000a5ac:	0029883a 	mov	r20,zero
1000a5b0:	20800104 	addi	r2,r4,4
1000a5b4:	24c00017 	ldw	r19,0(r4)
1000a5b8:	8001c60e 	bge	r16,zero,1000acd4 <___vfiprintf_internal_r+0x10c0>
1000a5bc:	d8802215 	stw	r2,136(sp)
1000a5c0:	002b883a 	mov	r21,zero
1000a5c4:	9d04b03a 	or	r2,r19,r20
1000a5c8:	103f911e 	bne	r2,zero,1000a410 <__alt_data_end+0xf800a410>
1000a5cc:	00800044 	movi	r2,1
1000a5d0:	10803fcc 	andi	r2,r2,255
1000a5d4:	00c00044 	movi	r3,1
1000a5d8:	10c05f26 	beq	r2,r3,1000a758 <___vfiprintf_internal_r+0xb44>
1000a5dc:	00c00084 	movi	r3,2
1000a5e0:	10ffe31e 	bne	r2,r3,1000a570 <__alt_data_end+0xf800a570>
1000a5e4:	0027883a 	mov	r19,zero
1000a5e8:	0029883a 	mov	r20,zero
1000a5ec:	00015106 	br	1000ab34 <___vfiprintf_internal_r+0xf20>
1000a5f0:	9cc03fcc 	andi	r19,r19,255
1000a5f4:	b811883a 	mov	r8,r23
1000a5f8:	9802c01e 	bne	r19,zero,1000b0fc <___vfiprintf_internal_r+0x14e8>
1000a5fc:	01440074 	movhi	r5,4097
1000a600:	29484c04 	addi	r5,r5,8496
1000a604:	d9402615 	stw	r5,152(sp)
1000a608:	8880080c 	andi	r2,r17,32
1000a60c:	103f541e 	bne	r2,zero,1000a360 <__alt_data_end+0xf800a360>
1000a610:	8880040c 	andi	r2,r17,16
1000a614:	1001f226 	beq	r2,zero,1000ade0 <___vfiprintf_internal_r+0x11cc>
1000a618:	d9402217 	ldw	r5,136(sp)
1000a61c:	0029883a 	mov	r20,zero
1000a620:	2cc00017 	ldw	r19,0(r5)
1000a624:	29400104 	addi	r5,r5,4
1000a628:	d9402215 	stw	r5,136(sp)
1000a62c:	003f5106 	br	1000a374 <__alt_data_end+0xf800a374>
1000a630:	d8c02217 	ldw	r3,136(sp)
1000a634:	b811883a 	mov	r8,r23
1000a638:	d8001d85 	stb	zero,118(sp)
1000a63c:	1dc00017 	ldw	r23,0(r3)
1000a640:	1f000104 	addi	fp,r3,4
1000a644:	b8025926 	beq	r23,zero,1000afac <___vfiprintf_internal_r+0x1398>
1000a648:	80023316 	blt	r16,zero,1000af18 <___vfiprintf_internal_r+0x1304>
1000a64c:	800d883a 	mov	r6,r16
1000a650:	000b883a 	mov	r5,zero
1000a654:	b809883a 	mov	r4,r23
1000a658:	da002a15 	stw	r8,168(sp)
1000a65c:	0007d540 	call	10007d54 <memchr>
1000a660:	da002a17 	ldw	r8,168(sp)
1000a664:	10026826 	beq	r2,zero,1000b008 <___vfiprintf_internal_r+0x13f4>
1000a668:	15e9c83a 	sub	r20,r2,r23
1000a66c:	dd401d83 	ldbu	r21,118(sp)
1000a670:	df002215 	stw	fp,136(sp)
1000a674:	0021883a 	mov	r16,zero
1000a678:	003e6906 	br	1000a020 <__alt_data_end+0xf800a020>
1000a67c:	9cc03fcc 	andi	r19,r19,255
1000a680:	b811883a 	mov	r8,r23
1000a684:	983fc126 	beq	r19,zero,1000a58c <__alt_data_end+0xf800a58c>
1000a688:	d8c02303 	ldbu	r3,140(sp)
1000a68c:	d8c01d85 	stb	r3,118(sp)
1000a690:	003fbe06 	br	1000a58c <__alt_data_end+0xf800a58c>
1000a694:	d9002217 	ldw	r4,136(sp)
1000a698:	d9402217 	ldw	r5,136(sp)
1000a69c:	21000017 	ldw	r4,0(r4)
1000a6a0:	28800104 	addi	r2,r5,4
1000a6a4:	d9002515 	stw	r4,148(sp)
1000a6a8:	203e3d16 	blt	r4,zero,10009fa0 <__alt_data_end+0xf8009fa0>
1000a6ac:	d8802215 	stw	r2,136(sp)
1000a6b0:	b0c00007 	ldb	r3,0(r22)
1000a6b4:	003db406 	br	10009d88 <__alt_data_end+0xf8009d88>
1000a6b8:	00c00ac4 	movi	r3,43
1000a6bc:	d8c02305 	stb	r3,140(sp)
1000a6c0:	04c00044 	movi	r19,1
1000a6c4:	b0c00007 	ldb	r3,0(r22)
1000a6c8:	003daf06 	br	10009d88 <__alt_data_end+0xf8009d88>
1000a6cc:	b0c00007 	ldb	r3,0(r22)
1000a6d0:	01000a84 	movi	r4,42
1000a6d4:	b4000044 	addi	r16,r22,1
1000a6d8:	19025e26 	beq	r3,r4,1000b054 <___vfiprintf_internal_r+0x1440>
1000a6dc:	1f3ff404 	addi	fp,r3,-48
1000a6e0:	0009883a 	mov	r4,zero
1000a6e4:	af025236 	bltu	r21,fp,1000b030 <___vfiprintf_internal_r+0x141c>
1000a6e8:	01400284 	movi	r5,10
1000a6ec:	000c8b80 	call	1000c8b8 <__mulsi3>
1000a6f0:	80c00007 	ldb	r3,0(r16)
1000a6f4:	1709883a 	add	r4,r2,fp
1000a6f8:	85800044 	addi	r22,r16,1
1000a6fc:	1f3ff404 	addi	fp,r3,-48
1000a700:	b021883a 	mov	r16,r22
1000a704:	af3ff82e 	bgeu	r21,fp,1000a6e8 <__alt_data_end+0xf800a6e8>
1000a708:	2021883a 	mov	r16,r4
1000a70c:	203d9f0e 	bge	r4,zero,10009d8c <__alt_data_end+0xf8009d8c>
1000a710:	043fffc4 	movi	r16,-1
1000a714:	003d9d06 	br	10009d8c <__alt_data_end+0xf8009d8c>
1000a718:	8c401014 	ori	r17,r17,64
1000a71c:	b0c00007 	ldb	r3,0(r22)
1000a720:	003d9906 	br	10009d88 <__alt_data_end+0xf8009d88>
1000a724:	d9002217 	ldw	r4,136(sp)
1000a728:	d8001d85 	stb	zero,118(sp)
1000a72c:	20c00204 	addi	r3,r4,8
1000a730:	24c00017 	ldw	r19,0(r4)
1000a734:	25000117 	ldw	r20,4(r4)
1000a738:	8001e716 	blt	r16,zero,1000aed8 <___vfiprintf_internal_r+0x12c4>
1000a73c:	013fdfc4 	movi	r4,-129
1000a740:	9d04b03a 	or	r2,r19,r20
1000a744:	d8c02215 	stw	r3,136(sp)
1000a748:	8922703a 	and	r17,r17,r4
1000a74c:	002b883a 	mov	r21,zero
1000a750:	103f2f1e 	bne	r2,zero,1000a410 <__alt_data_end+0xf800a410>
1000a754:	803e2f26 	beq	r16,zero,1000a014 <__alt_data_end+0xf800a014>
1000a758:	0027883a 	mov	r19,zero
1000a75c:	9cc00c04 	addi	r19,r19,48
1000a760:	dcc019c5 	stb	r19,103(sp)
1000a764:	dd002817 	ldw	r20,160(sp)
1000a768:	ddc019c4 	addi	r23,sp,103
1000a76c:	003e2c06 	br	1000a020 <__alt_data_end+0xf800a020>
1000a770:	9cc03fcc 	andi	r19,r19,255
1000a774:	b811883a 	mov	r8,r23
1000a778:	9802571e 	bne	r19,zero,1000b0d8 <___vfiprintf_internal_r+0x14c4>
1000a77c:	18005726 	beq	r3,zero,1000a8dc <___vfiprintf_internal_r+0xcc8>
1000a780:	04c00044 	movi	r19,1
1000a784:	d8c01005 	stb	r3,64(sp)
1000a788:	d8001d85 	stb	zero,118(sp)
1000a78c:	9829883a 	mov	r20,r19
1000a790:	ddc01004 	addi	r23,sp,64
1000a794:	003f0a06 	br	1000a3c0 <__alt_data_end+0xf800a3c0>
1000a798:	d9402017 	ldw	r5,128(sp)
1000a79c:	d9002117 	ldw	r4,132(sp)
1000a7a0:	d9801a04 	addi	r6,sp,104
1000a7a4:	da802a15 	stw	r10,168(sp)
1000a7a8:	0009b000 	call	10009b00 <__sprint_r.part.0>
1000a7ac:	da802a17 	ldw	r10,168(sp)
1000a7b0:	1000501e 	bne	r2,zero,1000a8f4 <___vfiprintf_internal_r+0xce0>
1000a7b4:	d9801b17 	ldw	r6,108(sp)
1000a7b8:	d8801c17 	ldw	r2,112(sp)
1000a7bc:	d811883a 	mov	r8,sp
1000a7c0:	31000044 	addi	r4,r6,1
1000a7c4:	003e3606 	br	1000a0a0 <__alt_data_end+0xf800a0a0>
1000a7c8:	d9001b17 	ldw	r4,108(sp)
1000a7cc:	d8801c17 	ldw	r2,112(sp)
1000a7d0:	21400044 	addi	r5,r4,1
1000a7d4:	d9801d87 	ldb	r6,118(sp)
1000a7d8:	303e5226 	beq	r6,zero,1000a124 <__alt_data_end+0xf800a124>
1000a7dc:	01800044 	movi	r6,1
1000a7e0:	d9001d84 	addi	r4,sp,118
1000a7e4:	1185883a 	add	r2,r2,r6
1000a7e8:	41000015 	stw	r4,0(r8)
1000a7ec:	41800115 	stw	r6,4(r8)
1000a7f0:	d8801c15 	stw	r2,112(sp)
1000a7f4:	d9401b15 	stw	r5,108(sp)
1000a7f8:	010001c4 	movi	r4,7
1000a7fc:	2140b00e 	bge	r4,r5,1000aac0 <___vfiprintf_internal_r+0xeac>
1000a800:	1000f61e 	bne	r2,zero,1000abdc <___vfiprintf_internal_r+0xfc8>
1000a804:	3800b31e 	bne	r7,zero,1000aad4 <___vfiprintf_internal_r+0xec0>
1000a808:	0009883a 	mov	r4,zero
1000a80c:	300b883a 	mov	r5,r6
1000a810:	d811883a 	mov	r8,sp
1000a814:	01802004 	movi	r6,128
1000a818:	19be5226 	beq	r3,r6,1000a164 <__alt_data_end+0xf800a164>
1000a81c:	8521c83a 	sub	r16,r16,r20
1000a820:	043e790e 	bge	zero,r16,1000a208 <__alt_data_end+0xf800a208>
1000a824:	05400404 	movi	r21,16
1000a828:	ac01b00e 	bge	r21,r16,1000aeec <___vfiprintf_internal_r+0x12d8>
1000a82c:	01440074 	movhi	r5,4097
1000a830:	2948b204 	addi	r5,r5,8904
1000a834:	d9402315 	stw	r5,140(sp)
1000a838:	070001c4 	movi	fp,7
1000a83c:	00000506 	br	1000a854 <___vfiprintf_internal_r+0xc40>
1000a840:	21400084 	addi	r5,r4,2
1000a844:	42000204 	addi	r8,r8,8
1000a848:	1809883a 	mov	r4,r3
1000a84c:	843ffc04 	addi	r16,r16,-16
1000a850:	ac000d0e 	bge	r21,r16,1000a888 <___vfiprintf_internal_r+0xc74>
1000a854:	10800404 	addi	r2,r2,16
1000a858:	20c00044 	addi	r3,r4,1
1000a85c:	44800015 	stw	r18,0(r8)
1000a860:	45400115 	stw	r21,4(r8)
1000a864:	d8801c15 	stw	r2,112(sp)
1000a868:	d8c01b15 	stw	r3,108(sp)
1000a86c:	e0fff40e 	bge	fp,r3,1000a840 <__alt_data_end+0xf800a840>
1000a870:	1000101e 	bne	r2,zero,1000a8b4 <___vfiprintf_internal_r+0xca0>
1000a874:	843ffc04 	addi	r16,r16,-16
1000a878:	01400044 	movi	r5,1
1000a87c:	0009883a 	mov	r4,zero
1000a880:	d811883a 	mov	r8,sp
1000a884:	ac3ff316 	blt	r21,r16,1000a854 <__alt_data_end+0xf800a854>
1000a888:	d8c02317 	ldw	r3,140(sp)
1000a88c:	1405883a 	add	r2,r2,r16
1000a890:	44000115 	stw	r16,4(r8)
1000a894:	40c00015 	stw	r3,0(r8)
1000a898:	d8801c15 	stw	r2,112(sp)
1000a89c:	d9401b15 	stw	r5,108(sp)
1000a8a0:	00c001c4 	movi	r3,7
1000a8a4:	19401916 	blt	r3,r5,1000a90c <___vfiprintf_internal_r+0xcf8>
1000a8a8:	42000204 	addi	r8,r8,8
1000a8ac:	29400044 	addi	r5,r5,1
1000a8b0:	003e5506 	br	1000a208 <__alt_data_end+0xf800a208>
1000a8b4:	d9402017 	ldw	r5,128(sp)
1000a8b8:	d9002117 	ldw	r4,132(sp)
1000a8bc:	d9801a04 	addi	r6,sp,104
1000a8c0:	0009b000 	call	10009b00 <__sprint_r.part.0>
1000a8c4:	10000b1e 	bne	r2,zero,1000a8f4 <___vfiprintf_internal_r+0xce0>
1000a8c8:	d9001b17 	ldw	r4,108(sp)
1000a8cc:	d8801c17 	ldw	r2,112(sp)
1000a8d0:	d811883a 	mov	r8,sp
1000a8d4:	21400044 	addi	r5,r4,1
1000a8d8:	003fdc06 	br	1000a84c <__alt_data_end+0xf800a84c>
1000a8dc:	d8801c17 	ldw	r2,112(sp)
1000a8e0:	10000426 	beq	r2,zero,1000a8f4 <___vfiprintf_internal_r+0xce0>
1000a8e4:	d9402017 	ldw	r5,128(sp)
1000a8e8:	d9002117 	ldw	r4,132(sp)
1000a8ec:	d9801a04 	addi	r6,sp,104
1000a8f0:	0009b000 	call	10009b00 <__sprint_r.part.0>
1000a8f4:	d9402017 	ldw	r5,128(sp)
1000a8f8:	2880030b 	ldhu	r2,12(r5)
1000a8fc:	1080100c 	andi	r2,r2,64
1000a900:	10014d1e 	bne	r2,zero,1000ae38 <___vfiprintf_internal_r+0x1224>
1000a904:	d8802417 	ldw	r2,144(sp)
1000a908:	003d9706 	br	10009f68 <__alt_data_end+0xf8009f68>
1000a90c:	1000d21e 	bne	r2,zero,1000ac58 <___vfiprintf_internal_r+0x1044>
1000a910:	00c00044 	movi	r3,1
1000a914:	a005883a 	mov	r2,r20
1000a918:	ddc00015 	stw	r23,0(sp)
1000a91c:	dd000115 	stw	r20,4(sp)
1000a920:	dd001c15 	stw	r20,112(sp)
1000a924:	d8c01b15 	stw	r3,108(sp)
1000a928:	d811883a 	mov	r8,sp
1000a92c:	42000204 	addi	r8,r8,8
1000a930:	8c40010c 	andi	r17,r17,4
1000a934:	88004026 	beq	r17,zero,1000aa38 <___vfiprintf_internal_r+0xe24>
1000a938:	d9002517 	ldw	r4,148(sp)
1000a93c:	24e3c83a 	sub	r17,r4,r19
1000a940:	04403d0e 	bge	zero,r17,1000aa38 <___vfiprintf_internal_r+0xe24>
1000a944:	04000404 	movi	r16,16
1000a948:	8441a90e 	bge	r16,r17,1000aff0 <___vfiprintf_internal_r+0x13dc>
1000a94c:	00c40074 	movhi	r3,4097
1000a950:	18c8b604 	addi	r3,r3,8920
1000a954:	d9001b17 	ldw	r4,108(sp)
1000a958:	d8c02315 	stw	r3,140(sp)
1000a95c:	050001c4 	movi	r20,7
1000a960:	dd402117 	ldw	r21,132(sp)
1000a964:	ddc02017 	ldw	r23,128(sp)
1000a968:	00000506 	br	1000a980 <___vfiprintf_internal_r+0xd6c>
1000a96c:	21400084 	addi	r5,r4,2
1000a970:	42000204 	addi	r8,r8,8
1000a974:	1809883a 	mov	r4,r3
1000a978:	8c7ffc04 	addi	r17,r17,-16
1000a97c:	84400f0e 	bge	r16,r17,1000a9bc <___vfiprintf_internal_r+0xda8>
1000a980:	01440074 	movhi	r5,4097
1000a984:	10800404 	addi	r2,r2,16
1000a988:	20c00044 	addi	r3,r4,1
1000a98c:	2948b604 	addi	r5,r5,8920
1000a990:	41400015 	stw	r5,0(r8)
1000a994:	44000115 	stw	r16,4(r8)
1000a998:	d8801c15 	stw	r2,112(sp)
1000a99c:	d8c01b15 	stw	r3,108(sp)
1000a9a0:	a0fff20e 	bge	r20,r3,1000a96c <__alt_data_end+0xf800a96c>
1000a9a4:	1000141e 	bne	r2,zero,1000a9f8 <___vfiprintf_internal_r+0xde4>
1000a9a8:	8c7ffc04 	addi	r17,r17,-16
1000a9ac:	01400044 	movi	r5,1
1000a9b0:	0009883a 	mov	r4,zero
1000a9b4:	d811883a 	mov	r8,sp
1000a9b8:	847ff116 	blt	r16,r17,1000a980 <__alt_data_end+0xf800a980>
1000a9bc:	d8c02317 	ldw	r3,140(sp)
1000a9c0:	1445883a 	add	r2,r2,r17
1000a9c4:	44400115 	stw	r17,4(r8)
1000a9c8:	40c00015 	stw	r3,0(r8)
1000a9cc:	d8801c15 	stw	r2,112(sp)
1000a9d0:	d9401b15 	stw	r5,108(sp)
1000a9d4:	00c001c4 	movi	r3,7
1000a9d8:	1940170e 	bge	r3,r5,1000aa38 <___vfiprintf_internal_r+0xe24>
1000a9dc:	1000101e 	bne	r2,zero,1000aa20 <___vfiprintf_internal_r+0xe0c>
1000a9e0:	d8802517 	ldw	r2,148(sp)
1000a9e4:	14c11616 	blt	r2,r19,1000ae40 <___vfiprintf_internal_r+0x122c>
1000a9e8:	d9002417 	ldw	r4,144(sp)
1000a9ec:	2089883a 	add	r4,r4,r2
1000a9f0:	d9002415 	stw	r4,144(sp)
1000a9f4:	003e1806 	br	1000a258 <__alt_data_end+0xf800a258>
1000a9f8:	d9801a04 	addi	r6,sp,104
1000a9fc:	b80b883a 	mov	r5,r23
1000aa00:	a809883a 	mov	r4,r21
1000aa04:	0009b000 	call	10009b00 <__sprint_r.part.0>
1000aa08:	103fba1e 	bne	r2,zero,1000a8f4 <__alt_data_end+0xf800a8f4>
1000aa0c:	d9001b17 	ldw	r4,108(sp)
1000aa10:	d8801c17 	ldw	r2,112(sp)
1000aa14:	d811883a 	mov	r8,sp
1000aa18:	21400044 	addi	r5,r4,1
1000aa1c:	003fd606 	br	1000a978 <__alt_data_end+0xf800a978>
1000aa20:	d9402017 	ldw	r5,128(sp)
1000aa24:	d9002117 	ldw	r4,132(sp)
1000aa28:	d9801a04 	addi	r6,sp,104
1000aa2c:	0009b000 	call	10009b00 <__sprint_r.part.0>
1000aa30:	103fb01e 	bne	r2,zero,1000a8f4 <__alt_data_end+0xf800a8f4>
1000aa34:	d8801c17 	ldw	r2,112(sp)
1000aa38:	d8c02517 	ldw	r3,148(sp)
1000aa3c:	1cc0010e 	bge	r3,r19,1000aa44 <___vfiprintf_internal_r+0xe30>
1000aa40:	9807883a 	mov	r3,r19
1000aa44:	d9002417 	ldw	r4,144(sp)
1000aa48:	20c9883a 	add	r4,r4,r3
1000aa4c:	d9002415 	stw	r4,144(sp)
1000aa50:	103e0126 	beq	r2,zero,1000a258 <__alt_data_end+0xf800a258>
1000aa54:	d9402017 	ldw	r5,128(sp)
1000aa58:	d9002117 	ldw	r4,132(sp)
1000aa5c:	d9801a04 	addi	r6,sp,104
1000aa60:	0009b000 	call	10009b00 <__sprint_r.part.0>
1000aa64:	103dfc26 	beq	r2,zero,1000a258 <__alt_data_end+0xf800a258>
1000aa68:	003fa206 	br	1000a8f4 <__alt_data_end+0xf800a8f4>
1000aa6c:	d9402017 	ldw	r5,128(sp)
1000aa70:	d9002117 	ldw	r4,132(sp)
1000aa74:	d9801a04 	addi	r6,sp,104
1000aa78:	d9c02b15 	stw	r7,172(sp)
1000aa7c:	0009b000 	call	10009b00 <__sprint_r.part.0>
1000aa80:	d9c02b17 	ldw	r7,172(sp)
1000aa84:	103f9b1e 	bne	r2,zero,1000a8f4 <__alt_data_end+0xf800a8f4>
1000aa88:	d9001b17 	ldw	r4,108(sp)
1000aa8c:	d8801c17 	ldw	r2,112(sp)
1000aa90:	d811883a 	mov	r8,sp
1000aa94:	21800044 	addi	r6,r4,1
1000aa98:	003dbf06 	br	1000a198 <__alt_data_end+0xf800a198>
1000aa9c:	1000d81e 	bne	r2,zero,1000ae00 <___vfiprintf_internal_r+0x11ec>
1000aaa0:	d9001d87 	ldb	r4,118(sp)
1000aaa4:	20000a26 	beq	r4,zero,1000aad0 <___vfiprintf_internal_r+0xebc>
1000aaa8:	00800044 	movi	r2,1
1000aaac:	d9001d84 	addi	r4,sp,118
1000aab0:	100b883a 	mov	r5,r2
1000aab4:	d9000015 	stw	r4,0(sp)
1000aab8:	d8800115 	stw	r2,4(sp)
1000aabc:	d811883a 	mov	r8,sp
1000aac0:	2809883a 	mov	r4,r5
1000aac4:	42000204 	addi	r8,r8,8
1000aac8:	29400044 	addi	r5,r5,1
1000aacc:	003d9506 	br	1000a124 <__alt_data_end+0xf800a124>
1000aad0:	3800fd26 	beq	r7,zero,1000aec8 <___vfiprintf_internal_r+0x12b4>
1000aad4:	00800084 	movi	r2,2
1000aad8:	d9001d04 	addi	r4,sp,116
1000aadc:	d9000015 	stw	r4,0(sp)
1000aae0:	d8800115 	stw	r2,4(sp)
1000aae4:	01400044 	movi	r5,1
1000aae8:	d811883a 	mov	r8,sp
1000aaec:	2809883a 	mov	r4,r5
1000aaf0:	42000204 	addi	r8,r8,8
1000aaf4:	29400044 	addi	r5,r5,1
1000aaf8:	003f4606 	br	1000a814 <__alt_data_end+0xf800a814>
1000aafc:	d8802517 	ldw	r2,148(sp)
1000ab00:	14c0010e 	bge	r2,r19,1000ab08 <___vfiprintf_internal_r+0xef4>
1000ab04:	9805883a 	mov	r2,r19
1000ab08:	d9402417 	ldw	r5,144(sp)
1000ab0c:	288b883a 	add	r5,r5,r2
1000ab10:	d9402415 	stw	r5,144(sp)
1000ab14:	003dd006 	br	1000a258 <__alt_data_end+0xf800a258>
1000ab18:	d8001d85 	stb	zero,118(sp)
1000ab1c:	80005d16 	blt	r16,zero,1000ac94 <___vfiprintf_internal_r+0x1080>
1000ab20:	00ffdfc4 	movi	r3,-129
1000ab24:	9d04b03a 	or	r2,r19,r20
1000ab28:	88e2703a 	and	r17,r17,r3
1000ab2c:	103d3726 	beq	r2,zero,1000a00c <__alt_data_end+0xf800a00c>
1000ab30:	002b883a 	mov	r21,zero
1000ab34:	d9002617 	ldw	r4,152(sp)
1000ab38:	ddc01a04 	addi	r23,sp,104
1000ab3c:	988003cc 	andi	r2,r19,15
1000ab40:	a006973a 	slli	r3,r20,28
1000ab44:	2085883a 	add	r2,r4,r2
1000ab48:	9826d13a 	srli	r19,r19,4
1000ab4c:	10800003 	ldbu	r2,0(r2)
1000ab50:	a028d13a 	srli	r20,r20,4
1000ab54:	bdffffc4 	addi	r23,r23,-1
1000ab58:	1ce6b03a 	or	r19,r3,r19
1000ab5c:	b8800005 	stb	r2,0(r23)
1000ab60:	9d04b03a 	or	r2,r19,r20
1000ab64:	103ff51e 	bne	r2,zero,1000ab3c <__alt_data_end+0xf800ab3c>
1000ab68:	d8801e17 	ldw	r2,120(sp)
1000ab6c:	15e9c83a 	sub	r20,r2,r23
1000ab70:	003d2b06 	br	1000a020 <__alt_data_end+0xf800a020>
1000ab74:	d9402017 	ldw	r5,128(sp)
1000ab78:	d9002117 	ldw	r4,132(sp)
1000ab7c:	d9801a04 	addi	r6,sp,104
1000ab80:	0009b000 	call	10009b00 <__sprint_r.part.0>
1000ab84:	103f5b1e 	bne	r2,zero,1000a8f4 <__alt_data_end+0xf800a8f4>
1000ab88:	d8801c17 	ldw	r2,112(sp)
1000ab8c:	d811883a 	mov	r8,sp
1000ab90:	003f6706 	br	1000a930 <__alt_data_end+0xf800a930>
1000ab94:	d9402017 	ldw	r5,128(sp)
1000ab98:	d9002117 	ldw	r4,132(sp)
1000ab9c:	d9801a04 	addi	r6,sp,104
1000aba0:	0009b000 	call	10009b00 <__sprint_r.part.0>
1000aba4:	103f531e 	bne	r2,zero,1000a8f4 <__alt_data_end+0xf800a8f4>
1000aba8:	d811883a 	mov	r8,sp
1000abac:	003cd906 	br	10009f14 <__alt_data_end+0xf8009f14>
1000abb0:	10803fcc 	andi	r2,r2,255
1000abb4:	1080201c 	xori	r2,r2,128
1000abb8:	10bfe004 	addi	r2,r2,-128
1000abbc:	00c00c04 	movi	r3,48
1000abc0:	10ffe926 	beq	r2,r3,1000ab68 <__alt_data_end+0xf800ab68>
1000abc4:	b8ffffc5 	stb	r3,-1(r23)
1000abc8:	d8c01e17 	ldw	r3,120(sp)
1000abcc:	b8bfffc4 	addi	r2,r23,-1
1000abd0:	102f883a 	mov	r23,r2
1000abd4:	18a9c83a 	sub	r20,r3,r2
1000abd8:	003d1106 	br	1000a020 <__alt_data_end+0xf800a020>
1000abdc:	d9402017 	ldw	r5,128(sp)
1000abe0:	d9002117 	ldw	r4,132(sp)
1000abe4:	d9801a04 	addi	r6,sp,104
1000abe8:	d8c02a15 	stw	r3,168(sp)
1000abec:	d9c02b15 	stw	r7,172(sp)
1000abf0:	0009b000 	call	10009b00 <__sprint_r.part.0>
1000abf4:	d8c02a17 	ldw	r3,168(sp)
1000abf8:	d9c02b17 	ldw	r7,172(sp)
1000abfc:	103f3d1e 	bne	r2,zero,1000a8f4 <__alt_data_end+0xf800a8f4>
1000ac00:	d9001b17 	ldw	r4,108(sp)
1000ac04:	d8801c17 	ldw	r2,112(sp)
1000ac08:	d811883a 	mov	r8,sp
1000ac0c:	21400044 	addi	r5,r4,1
1000ac10:	003d4406 	br	1000a124 <__alt_data_end+0xf800a124>
1000ac14:	d9402017 	ldw	r5,128(sp)
1000ac18:	d9002117 	ldw	r4,132(sp)
1000ac1c:	d9801a04 	addi	r6,sp,104
1000ac20:	d8c02a15 	stw	r3,168(sp)
1000ac24:	0009b000 	call	10009b00 <__sprint_r.part.0>
1000ac28:	d8c02a17 	ldw	r3,168(sp)
1000ac2c:	103f311e 	bne	r2,zero,1000a8f4 <__alt_data_end+0xf800a8f4>
1000ac30:	d9001b17 	ldw	r4,108(sp)
1000ac34:	d8801c17 	ldw	r2,112(sp)
1000ac38:	d811883a 	mov	r8,sp
1000ac3c:	21400044 	addi	r5,r4,1
1000ac40:	003ef406 	br	1000a814 <__alt_data_end+0xf800a814>
1000ac44:	1000bd1e 	bne	r2,zero,1000af3c <___vfiprintf_internal_r+0x1328>
1000ac48:	01400044 	movi	r5,1
1000ac4c:	0009883a 	mov	r4,zero
1000ac50:	d811883a 	mov	r8,sp
1000ac54:	003ef106 	br	1000a81c <__alt_data_end+0xf800a81c>
1000ac58:	d9402017 	ldw	r5,128(sp)
1000ac5c:	d9002117 	ldw	r4,132(sp)
1000ac60:	d9801a04 	addi	r6,sp,104
1000ac64:	0009b000 	call	10009b00 <__sprint_r.part.0>
1000ac68:	103f221e 	bne	r2,zero,1000a8f4 <__alt_data_end+0xf800a8f4>
1000ac6c:	d9401b17 	ldw	r5,108(sp)
1000ac70:	d8801c17 	ldw	r2,112(sp)
1000ac74:	d811883a 	mov	r8,sp
1000ac78:	29400044 	addi	r5,r5,1
1000ac7c:	003d6206 	br	1000a208 <__alt_data_end+0xf800a208>
1000ac80:	01440074 	movhi	r5,4097
1000ac84:	29485104 	addi	r5,r5,8516
1000ac88:	d9402615 	stw	r5,152(sp)
1000ac8c:	d8c02215 	stw	r3,136(sp)
1000ac90:	1023883a 	mov	r17,r2
1000ac94:	9d04b03a 	or	r2,r19,r20
1000ac98:	103fa51e 	bne	r2,zero,1000ab30 <__alt_data_end+0xf800ab30>
1000ac9c:	002b883a 	mov	r21,zero
1000aca0:	00800084 	movi	r2,2
1000aca4:	003e4a06 	br	1000a5d0 <__alt_data_end+0xf800a5d0>
1000aca8:	01440074 	movhi	r5,4097
1000acac:	29485104 	addi	r5,r5,8516
1000acb0:	002b883a 	mov	r21,zero
1000acb4:	d9402615 	stw	r5,152(sp)
1000acb8:	003f9e06 	br	1000ab34 <__alt_data_end+0xf800ab34>
1000acbc:	d9402217 	ldw	r5,136(sp)
1000acc0:	d8001d85 	stb	zero,118(sp)
1000acc4:	0029883a 	mov	r20,zero
1000acc8:	28800104 	addi	r2,r5,4
1000accc:	2cc00017 	ldw	r19,0(r5)
1000acd0:	803e3a16 	blt	r16,zero,1000a5bc <__alt_data_end+0xf800a5bc>
1000acd4:	00ffdfc4 	movi	r3,-129
1000acd8:	d8802215 	stw	r2,136(sp)
1000acdc:	88e2703a 	and	r17,r17,r3
1000ace0:	002b883a 	mov	r21,zero
1000ace4:	983e9b26 	beq	r19,zero,1000a754 <__alt_data_end+0xf800a754>
1000ace8:	00800244 	movi	r2,9
1000acec:	14fdc936 	bltu	r2,r19,1000a414 <__alt_data_end+0xf800a414>
1000acf0:	003e9a06 	br	1000a75c <__alt_data_end+0xf800a75c>
1000acf4:	00800c04 	movi	r2,48
1000acf8:	d8c01d45 	stb	r3,117(sp)
1000acfc:	d8801d05 	stb	r2,116(sp)
1000ad00:	d8001d85 	stb	zero,118(sp)
1000ad04:	88c00094 	ori	r3,r17,2
1000ad08:	80009c16 	blt	r16,zero,1000af7c <___vfiprintf_internal_r+0x1368>
1000ad0c:	00bfdfc4 	movi	r2,-129
1000ad10:	88a2703a 	and	r17,r17,r2
1000ad14:	8c400094 	ori	r17,r17,2
1000ad18:	002b883a 	mov	r21,zero
1000ad1c:	003f8506 	br	1000ab34 <__alt_data_end+0xf800ab34>
1000ad20:	b029883a 	mov	r20,r22
1000ad24:	003c0b06 	br	10009d54 <__alt_data_end+0xf8009d54>
1000ad28:	04e7c83a 	sub	r19,zero,r19
1000ad2c:	05400b44 	movi	r21,45
1000ad30:	9804c03a 	cmpne	r2,r19,zero
1000ad34:	0529c83a 	sub	r20,zero,r20
1000ad38:	dd401d85 	stb	r21,118(sp)
1000ad3c:	a0a9c83a 	sub	r20,r20,r2
1000ad40:	80009716 	blt	r16,zero,1000afa0 <___vfiprintf_internal_r+0x138c>
1000ad44:	00bfdfc4 	movi	r2,-129
1000ad48:	88a2703a 	and	r17,r17,r2
1000ad4c:	003db006 	br	1000a410 <__alt_data_end+0xf800a410>
1000ad50:	b0c00007 	ldb	r3,0(r22)
1000ad54:	003c0c06 	br	10009d88 <__alt_data_end+0xf8009d88>
1000ad58:	8880100c 	andi	r2,r17,64
1000ad5c:	d8001d85 	stb	zero,118(sp)
1000ad60:	1000461e 	bne	r2,zero,1000ae7c <___vfiprintf_internal_r+0x1268>
1000ad64:	d9002217 	ldw	r4,136(sp)
1000ad68:	0029883a 	mov	r20,zero
1000ad6c:	20800104 	addi	r2,r4,4
1000ad70:	24c00017 	ldw	r19,0(r4)
1000ad74:	803df80e 	bge	r16,zero,1000a558 <__alt_data_end+0xf800a558>
1000ad78:	9d06b03a 	or	r3,r19,r20
1000ad7c:	d8802215 	stw	r2,136(sp)
1000ad80:	183d5e1e 	bne	r3,zero,1000a2fc <__alt_data_end+0xf800a2fc>
1000ad84:	002b883a 	mov	r21,zero
1000ad88:	0005883a 	mov	r2,zero
1000ad8c:	003e1006 	br	1000a5d0 <__alt_data_end+0xf800a5d0>
1000ad90:	8880040c 	andi	r2,r17,16
1000ad94:	1000321e 	bne	r2,zero,1000ae60 <___vfiprintf_internal_r+0x124c>
1000ad98:	8c40100c 	andi	r17,r17,64
1000ad9c:	88008d26 	beq	r17,zero,1000afd4 <___vfiprintf_internal_r+0x13c0>
1000ada0:	d9402217 	ldw	r5,136(sp)
1000ada4:	d8c02417 	ldw	r3,144(sp)
1000ada8:	28800017 	ldw	r2,0(r5)
1000adac:	29400104 	addi	r5,r5,4
1000adb0:	d9402215 	stw	r5,136(sp)
1000adb4:	10c0000d 	sth	r3,0(r2)
1000adb8:	003bca06 	br	10009ce4 <__alt_data_end+0xf8009ce4>
1000adbc:	8880100c 	andi	r2,r17,64
1000adc0:	10003a26 	beq	r2,zero,1000aeac <___vfiprintf_internal_r+0x1298>
1000adc4:	d8802217 	ldw	r2,136(sp)
1000adc8:	14c0000f 	ldh	r19,0(r2)
1000adcc:	10800104 	addi	r2,r2,4
1000add0:	d8802215 	stw	r2,136(sp)
1000add4:	9829d7fa 	srai	r20,r19,31
1000add8:	a005883a 	mov	r2,r20
1000addc:	003d8506 	br	1000a3f4 <__alt_data_end+0xf800a3f4>
1000ade0:	8880100c 	andi	r2,r17,64
1000ade4:	10002b26 	beq	r2,zero,1000ae94 <___vfiprintf_internal_r+0x1280>
1000ade8:	d8802217 	ldw	r2,136(sp)
1000adec:	0029883a 	mov	r20,zero
1000adf0:	14c0000b 	ldhu	r19,0(r2)
1000adf4:	10800104 	addi	r2,r2,4
1000adf8:	d8802215 	stw	r2,136(sp)
1000adfc:	003d5d06 	br	1000a374 <__alt_data_end+0xf800a374>
1000ae00:	d9402017 	ldw	r5,128(sp)
1000ae04:	d9002117 	ldw	r4,132(sp)
1000ae08:	d9801a04 	addi	r6,sp,104
1000ae0c:	d8c02a15 	stw	r3,168(sp)
1000ae10:	d9c02b15 	stw	r7,172(sp)
1000ae14:	0009b000 	call	10009b00 <__sprint_r.part.0>
1000ae18:	d8c02a17 	ldw	r3,168(sp)
1000ae1c:	d9c02b17 	ldw	r7,172(sp)
1000ae20:	103eb41e 	bne	r2,zero,1000a8f4 <__alt_data_end+0xf800a8f4>
1000ae24:	d9001b17 	ldw	r4,108(sp)
1000ae28:	d8801c17 	ldw	r2,112(sp)
1000ae2c:	d811883a 	mov	r8,sp
1000ae30:	21400044 	addi	r5,r4,1
1000ae34:	003e6706 	br	1000a7d4 <__alt_data_end+0xf800a7d4>
1000ae38:	00bfffc4 	movi	r2,-1
1000ae3c:	003c4a06 	br	10009f68 <__alt_data_end+0xf8009f68>
1000ae40:	9805883a 	mov	r2,r19
1000ae44:	003ee806 	br	1000a9e8 <__alt_data_end+0xf800a9e8>
1000ae48:	d8c02217 	ldw	r3,136(sp)
1000ae4c:	0029883a 	mov	r20,zero
1000ae50:	18800104 	addi	r2,r3,4
1000ae54:	1cc0000b 	ldhu	r19,0(r3)
1000ae58:	803f9e0e 	bge	r16,zero,1000acd4 <__alt_data_end+0xf800acd4>
1000ae5c:	003dd706 	br	1000a5bc <__alt_data_end+0xf800a5bc>
1000ae60:	d8c02217 	ldw	r3,136(sp)
1000ae64:	d9002417 	ldw	r4,144(sp)
1000ae68:	18800017 	ldw	r2,0(r3)
1000ae6c:	18c00104 	addi	r3,r3,4
1000ae70:	d8c02215 	stw	r3,136(sp)
1000ae74:	11000015 	stw	r4,0(r2)
1000ae78:	003b9a06 	br	10009ce4 <__alt_data_end+0xf8009ce4>
1000ae7c:	d8c02217 	ldw	r3,136(sp)
1000ae80:	0029883a 	mov	r20,zero
1000ae84:	18800104 	addi	r2,r3,4
1000ae88:	1cc0000b 	ldhu	r19,0(r3)
1000ae8c:	803db20e 	bge	r16,zero,1000a558 <__alt_data_end+0xf800a558>
1000ae90:	003fb906 	br	1000ad78 <__alt_data_end+0xf800ad78>
1000ae94:	d9002217 	ldw	r4,136(sp)
1000ae98:	0029883a 	mov	r20,zero
1000ae9c:	24c00017 	ldw	r19,0(r4)
1000aea0:	21000104 	addi	r4,r4,4
1000aea4:	d9002215 	stw	r4,136(sp)
1000aea8:	003d3206 	br	1000a374 <__alt_data_end+0xf800a374>
1000aeac:	d8c02217 	ldw	r3,136(sp)
1000aeb0:	1cc00017 	ldw	r19,0(r3)
1000aeb4:	18c00104 	addi	r3,r3,4
1000aeb8:	d8c02215 	stw	r3,136(sp)
1000aebc:	9829d7fa 	srai	r20,r19,31
1000aec0:	a005883a 	mov	r2,r20
1000aec4:	003d4b06 	br	1000a3f4 <__alt_data_end+0xf800a3f4>
1000aec8:	0009883a 	mov	r4,zero
1000aecc:	01400044 	movi	r5,1
1000aed0:	d811883a 	mov	r8,sp
1000aed4:	003e4f06 	br	1000a814 <__alt_data_end+0xf800a814>
1000aed8:	d8c02215 	stw	r3,136(sp)
1000aedc:	002b883a 	mov	r21,zero
1000aee0:	003db806 	br	1000a5c4 <__alt_data_end+0xf800a5c4>
1000aee4:	d811883a 	mov	r8,sp
1000aee8:	003e9606 	br	1000a944 <__alt_data_end+0xf800a944>
1000aeec:	01040074 	movhi	r4,4097
1000aef0:	2108b204 	addi	r4,r4,8904
1000aef4:	d9002315 	stw	r4,140(sp)
1000aef8:	003e6306 	br	1000a888 <__alt_data_end+0xf800a888>
1000aefc:	b0c00043 	ldbu	r3,1(r22)
1000af00:	8c400814 	ori	r17,r17,32
1000af04:	b5800044 	addi	r22,r22,1
1000af08:	18c03fcc 	andi	r3,r3,255
1000af0c:	18c0201c 	xori	r3,r3,128
1000af10:	18ffe004 	addi	r3,r3,-128
1000af14:	003b9c06 	br	10009d88 <__alt_data_end+0xf8009d88>
1000af18:	b809883a 	mov	r4,r23
1000af1c:	da002a15 	stw	r8,168(sp)
1000af20:	00023840 	call	10002384 <strlen>
1000af24:	1029883a 	mov	r20,r2
1000af28:	dd401d83 	ldbu	r21,118(sp)
1000af2c:	df002215 	stw	fp,136(sp)
1000af30:	0021883a 	mov	r16,zero
1000af34:	da002a17 	ldw	r8,168(sp)
1000af38:	003c3906 	br	1000a020 <__alt_data_end+0xf800a020>
1000af3c:	d9402017 	ldw	r5,128(sp)
1000af40:	d9002117 	ldw	r4,132(sp)
1000af44:	d9801a04 	addi	r6,sp,104
1000af48:	0009b000 	call	10009b00 <__sprint_r.part.0>
1000af4c:	103e691e 	bne	r2,zero,1000a8f4 <__alt_data_end+0xf800a8f4>
1000af50:	d9001b17 	ldw	r4,108(sp)
1000af54:	d8801c17 	ldw	r2,112(sp)
1000af58:	d811883a 	mov	r8,sp
1000af5c:	21400044 	addi	r5,r4,1
1000af60:	003e2e06 	br	1000a81c <__alt_data_end+0xf800a81c>
1000af64:	01040074 	movhi	r4,4097
1000af68:	2108b604 	addi	r4,r4,8920
1000af6c:	d9002315 	stw	r4,140(sp)
1000af70:	d9001b17 	ldw	r4,108(sp)
1000af74:	21000044 	addi	r4,r4,1
1000af78:	003c5e06 	br	1000a0f4 <__alt_data_end+0xf800a0f4>
1000af7c:	002b883a 	mov	r21,zero
1000af80:	00800084 	movi	r2,2
1000af84:	10803fcc 	andi	r2,r2,255
1000af88:	01000044 	movi	r4,1
1000af8c:	11002b26 	beq	r2,r4,1000b03c <___vfiprintf_internal_r+0x1428>
1000af90:	01000084 	movi	r4,2
1000af94:	11002b1e 	bne	r2,r4,1000b044 <___vfiprintf_internal_r+0x1430>
1000af98:	1823883a 	mov	r17,r3
1000af9c:	003ee506 	br	1000ab34 <__alt_data_end+0xf800ab34>
1000afa0:	8807883a 	mov	r3,r17
1000afa4:	00800044 	movi	r2,1
1000afa8:	003ff606 	br	1000af84 <__alt_data_end+0xf800af84>
1000afac:	00800184 	movi	r2,6
1000afb0:	1400012e 	bgeu	r2,r16,1000afb8 <___vfiprintf_internal_r+0x13a4>
1000afb4:	1021883a 	mov	r16,r2
1000afb8:	8029883a 	mov	r20,r16
1000afbc:	8027883a 	mov	r19,r16
1000afc0:	80002216 	blt	r16,zero,1000b04c <___vfiprintf_internal_r+0x1438>
1000afc4:	05c40074 	movhi	r23,4097
1000afc8:	df002215 	stw	fp,136(sp)
1000afcc:	bdc85604 	addi	r23,r23,8536
1000afd0:	003cfb06 	br	1000a3c0 <__alt_data_end+0xf800a3c0>
1000afd4:	d9002217 	ldw	r4,136(sp)
1000afd8:	d9402417 	ldw	r5,144(sp)
1000afdc:	20800017 	ldw	r2,0(r4)
1000afe0:	21000104 	addi	r4,r4,4
1000afe4:	d9002215 	stw	r4,136(sp)
1000afe8:	11400015 	stw	r5,0(r2)
1000afec:	003b3d06 	br	10009ce4 <__alt_data_end+0xf8009ce4>
1000aff0:	01440074 	movhi	r5,4097
1000aff4:	2948b604 	addi	r5,r5,8920
1000aff8:	d9402315 	stw	r5,140(sp)
1000affc:	d9401b17 	ldw	r5,108(sp)
1000b000:	29400044 	addi	r5,r5,1
1000b004:	003e6d06 	br	1000a9bc <__alt_data_end+0xf800a9bc>
1000b008:	8029883a 	mov	r20,r16
1000b00c:	dd401d83 	ldbu	r21,118(sp)
1000b010:	df002215 	stw	fp,136(sp)
1000b014:	0021883a 	mov	r16,zero
1000b018:	003c0106 	br	1000a020 <__alt_data_end+0xf800a020>
1000b01c:	00c40074 	movhi	r3,4097
1000b020:	18c8b204 	addi	r3,r3,8904
1000b024:	d8c02315 	stw	r3,140(sp)
1000b028:	280d883a 	mov	r6,r5
1000b02c:	003c6906 	br	1000a1d4 <__alt_data_end+0xf800a1d4>
1000b030:	802d883a 	mov	r22,r16
1000b034:	0021883a 	mov	r16,zero
1000b038:	003b5406 	br	10009d8c <__alt_data_end+0xf8009d8c>
1000b03c:	1823883a 	mov	r17,r3
1000b040:	003cf306 	br	1000a410 <__alt_data_end+0xf800a410>
1000b044:	1823883a 	mov	r17,r3
1000b048:	003cad06 	br	1000a300 <__alt_data_end+0xf800a300>
1000b04c:	0027883a 	mov	r19,zero
1000b050:	003fdc06 	br	1000afc4 <__alt_data_end+0xf800afc4>
1000b054:	d9402217 	ldw	r5,136(sp)
1000b058:	8005883a 	mov	r2,r16
1000b05c:	b0c00043 	ldbu	r3,1(r22)
1000b060:	2c000017 	ldw	r16,0(r5)
1000b064:	29000104 	addi	r4,r5,4
1000b068:	d9002215 	stw	r4,136(sp)
1000b06c:	102d883a 	mov	r22,r2
1000b070:	803fa50e 	bge	r16,zero,1000af08 <__alt_data_end+0xf800af08>
1000b074:	18c03fcc 	andi	r3,r3,255
1000b078:	18c0201c 	xori	r3,r3,128
1000b07c:	043fffc4 	movi	r16,-1
1000b080:	18ffe004 	addi	r3,r3,-128
1000b084:	003b4006 	br	10009d88 <__alt_data_end+0xf8009d88>
1000b088:	d9402303 	ldbu	r5,140(sp)
1000b08c:	d9401d85 	stb	r5,118(sp)
1000b090:	003cae06 	br	1000a34c <__alt_data_end+0xf800a34c>
1000b094:	d8c02303 	ldbu	r3,140(sp)
1000b098:	d8c01d85 	stb	r3,118(sp)
1000b09c:	003d1406 	br	1000a4f0 <__alt_data_end+0xf800a4f0>
1000b0a0:	d8c02303 	ldbu	r3,140(sp)
1000b0a4:	d8c01d85 	stb	r3,118(sp)
1000b0a8:	003cca06 	br	1000a3d4 <__alt_data_end+0xf800a3d4>
1000b0ac:	8880004c 	andi	r2,r17,1
1000b0b0:	002b883a 	mov	r21,zero
1000b0b4:	10000526 	beq	r2,zero,1000b0cc <___vfiprintf_internal_r+0x14b8>
1000b0b8:	00800c04 	movi	r2,48
1000b0bc:	d88019c5 	stb	r2,103(sp)
1000b0c0:	dd002817 	ldw	r20,160(sp)
1000b0c4:	ddc019c4 	addi	r23,sp,103
1000b0c8:	003bd506 	br	1000a020 <__alt_data_end+0xf800a020>
1000b0cc:	0029883a 	mov	r20,zero
1000b0d0:	ddc01a04 	addi	r23,sp,104
1000b0d4:	003bd206 	br	1000a020 <__alt_data_end+0xf800a020>
1000b0d8:	d9002303 	ldbu	r4,140(sp)
1000b0dc:	d9001d85 	stb	r4,118(sp)
1000b0e0:	003da606 	br	1000a77c <__alt_data_end+0xf800a77c>
1000b0e4:	d8c02303 	ldbu	r3,140(sp)
1000b0e8:	d8c01d85 	stb	r3,118(sp)
1000b0ec:	003c7606 	br	1000a2c8 <__alt_data_end+0xf800a2c8>
1000b0f0:	d8c02303 	ldbu	r3,140(sp)
1000b0f4:	d8c01d85 	stb	r3,118(sp)
1000b0f8:	003c6506 	br	1000a290 <__alt_data_end+0xf800a290>
1000b0fc:	d9002303 	ldbu	r4,140(sp)
1000b100:	d9001d85 	stb	r4,118(sp)
1000b104:	003d3d06 	br	1000a5fc <__alt_data_end+0xf800a5fc>
1000b108:	d8c02303 	ldbu	r3,140(sp)
1000b10c:	d8c01d85 	stb	r3,118(sp)
1000b110:	003d1d06 	br	1000a588 <__alt_data_end+0xf800a588>
1000b114:	d8c02303 	ldbu	r3,140(sp)
1000b118:	d8c01d85 	stb	r3,118(sp)
1000b11c:	003d0306 	br	1000a52c <__alt_data_end+0xf800a52c>

1000b120 <__vfiprintf_internal>:
1000b120:	00840074 	movhi	r2,4097
1000b124:	108fb304 	addi	r2,r2,16076
1000b128:	300f883a 	mov	r7,r6
1000b12c:	280d883a 	mov	r6,r5
1000b130:	200b883a 	mov	r5,r4
1000b134:	11000017 	ldw	r4,0(r2)
1000b138:	0009c141 	jmpi	10009c14 <___vfiprintf_internal_r>

1000b13c <__sbprintf>:
1000b13c:	2880030b 	ldhu	r2,12(r5)
1000b140:	2ac01917 	ldw	r11,100(r5)
1000b144:	2a80038b 	ldhu	r10,14(r5)
1000b148:	2a400717 	ldw	r9,28(r5)
1000b14c:	2a000917 	ldw	r8,36(r5)
1000b150:	defee204 	addi	sp,sp,-1144
1000b154:	00c10004 	movi	r3,1024
1000b158:	dc011a15 	stw	r16,1128(sp)
1000b15c:	10bfff4c 	andi	r2,r2,65533
1000b160:	2821883a 	mov	r16,r5
1000b164:	d8cb883a 	add	r5,sp,r3
1000b168:	dc811c15 	stw	r18,1136(sp)
1000b16c:	dc411b15 	stw	r17,1132(sp)
1000b170:	dfc11d15 	stw	ra,1140(sp)
1000b174:	2025883a 	mov	r18,r4
1000b178:	d881030d 	sth	r2,1036(sp)
1000b17c:	dac11915 	stw	r11,1124(sp)
1000b180:	da81038d 	sth	r10,1038(sp)
1000b184:	da410715 	stw	r9,1052(sp)
1000b188:	da010915 	stw	r8,1060(sp)
1000b18c:	dec10015 	stw	sp,1024(sp)
1000b190:	dec10415 	stw	sp,1040(sp)
1000b194:	d8c10215 	stw	r3,1032(sp)
1000b198:	d8c10515 	stw	r3,1044(sp)
1000b19c:	d8010615 	stw	zero,1048(sp)
1000b1a0:	0009c140 	call	10009c14 <___vfiprintf_internal_r>
1000b1a4:	1023883a 	mov	r17,r2
1000b1a8:	10000416 	blt	r2,zero,1000b1bc <__sbprintf+0x80>
1000b1ac:	d9410004 	addi	r5,sp,1024
1000b1b0:	9009883a 	mov	r4,r18
1000b1b4:	00063f00 	call	100063f0 <_fflush_r>
1000b1b8:	10000d1e 	bne	r2,zero,1000b1f0 <__sbprintf+0xb4>
1000b1bc:	d881030b 	ldhu	r2,1036(sp)
1000b1c0:	1080100c 	andi	r2,r2,64
1000b1c4:	10000326 	beq	r2,zero,1000b1d4 <__sbprintf+0x98>
1000b1c8:	8080030b 	ldhu	r2,12(r16)
1000b1cc:	10801014 	ori	r2,r2,64
1000b1d0:	8080030d 	sth	r2,12(r16)
1000b1d4:	8805883a 	mov	r2,r17
1000b1d8:	dfc11d17 	ldw	ra,1140(sp)
1000b1dc:	dc811c17 	ldw	r18,1136(sp)
1000b1e0:	dc411b17 	ldw	r17,1132(sp)
1000b1e4:	dc011a17 	ldw	r16,1128(sp)
1000b1e8:	dec11e04 	addi	sp,sp,1144
1000b1ec:	f800283a 	ret
1000b1f0:	047fffc4 	movi	r17,-1
1000b1f4:	003ff106 	br	1000b1bc <__alt_data_end+0xf800b1bc>

1000b1f8 <_write_r>:
1000b1f8:	defffd04 	addi	sp,sp,-12
1000b1fc:	2805883a 	mov	r2,r5
1000b200:	dc000015 	stw	r16,0(sp)
1000b204:	04040074 	movhi	r16,4097
1000b208:	dc400115 	stw	r17,4(sp)
1000b20c:	300b883a 	mov	r5,r6
1000b210:	84168404 	addi	r16,r16,23056
1000b214:	2023883a 	mov	r17,r4
1000b218:	380d883a 	mov	r6,r7
1000b21c:	1009883a 	mov	r4,r2
1000b220:	dfc00215 	stw	ra,8(sp)
1000b224:	80000015 	stw	zero,0(r16)
1000b228:	000fa480 	call	1000fa48 <write>
1000b22c:	00ffffc4 	movi	r3,-1
1000b230:	10c00526 	beq	r2,r3,1000b248 <_write_r+0x50>
1000b234:	dfc00217 	ldw	ra,8(sp)
1000b238:	dc400117 	ldw	r17,4(sp)
1000b23c:	dc000017 	ldw	r16,0(sp)
1000b240:	dec00304 	addi	sp,sp,12
1000b244:	f800283a 	ret
1000b248:	80c00017 	ldw	r3,0(r16)
1000b24c:	183ff926 	beq	r3,zero,1000b234 <__alt_data_end+0xf800b234>
1000b250:	88c00015 	stw	r3,0(r17)
1000b254:	003ff706 	br	1000b234 <__alt_data_end+0xf800b234>

1000b258 <_close_r>:
1000b258:	defffd04 	addi	sp,sp,-12
1000b25c:	dc000015 	stw	r16,0(sp)
1000b260:	04040074 	movhi	r16,4097
1000b264:	dc400115 	stw	r17,4(sp)
1000b268:	84168404 	addi	r16,r16,23056
1000b26c:	2023883a 	mov	r17,r4
1000b270:	2809883a 	mov	r4,r5
1000b274:	dfc00215 	stw	ra,8(sp)
1000b278:	80000015 	stw	zero,0(r16)
1000b27c:	000f1c00 	call	1000f1c0 <close>
1000b280:	00ffffc4 	movi	r3,-1
1000b284:	10c00526 	beq	r2,r3,1000b29c <_close_r+0x44>
1000b288:	dfc00217 	ldw	ra,8(sp)
1000b28c:	dc400117 	ldw	r17,4(sp)
1000b290:	dc000017 	ldw	r16,0(sp)
1000b294:	dec00304 	addi	sp,sp,12
1000b298:	f800283a 	ret
1000b29c:	80c00017 	ldw	r3,0(r16)
1000b2a0:	183ff926 	beq	r3,zero,1000b288 <__alt_data_end+0xf800b288>
1000b2a4:	88c00015 	stw	r3,0(r17)
1000b2a8:	003ff706 	br	1000b288 <__alt_data_end+0xf800b288>

1000b2ac <_calloc_r>:
1000b2ac:	defffe04 	addi	sp,sp,-8
1000b2b0:	2805883a 	mov	r2,r5
1000b2b4:	dc000015 	stw	r16,0(sp)
1000b2b8:	300b883a 	mov	r5,r6
1000b2bc:	2021883a 	mov	r16,r4
1000b2c0:	1009883a 	mov	r4,r2
1000b2c4:	dfc00115 	stw	ra,4(sp)
1000b2c8:	000c8b80 	call	1000c8b8 <__mulsi3>
1000b2cc:	100b883a 	mov	r5,r2
1000b2d0:	8009883a 	mov	r4,r16
1000b2d4:	00075480 	call	10007548 <_malloc_r>
1000b2d8:	10002926 	beq	r2,zero,1000b380 <_calloc_r+0xd4>
1000b2dc:	11bfff17 	ldw	r6,-4(r2)
1000b2e0:	1021883a 	mov	r16,r2
1000b2e4:	00bfff04 	movi	r2,-4
1000b2e8:	308c703a 	and	r6,r6,r2
1000b2ec:	00c00904 	movi	r3,36
1000b2f0:	308d883a 	add	r6,r6,r2
1000b2f4:	19801636 	bltu	r3,r6,1000b350 <_calloc_r+0xa4>
1000b2f8:	008004c4 	movi	r2,19
1000b2fc:	11800b2e 	bgeu	r2,r6,1000b32c <_calloc_r+0x80>
1000b300:	80000015 	stw	zero,0(r16)
1000b304:	80000115 	stw	zero,4(r16)
1000b308:	008006c4 	movi	r2,27
1000b30c:	11801a2e 	bgeu	r2,r6,1000b378 <_calloc_r+0xcc>
1000b310:	80000215 	stw	zero,8(r16)
1000b314:	80000315 	stw	zero,12(r16)
1000b318:	30c0151e 	bne	r6,r3,1000b370 <_calloc_r+0xc4>
1000b31c:	80000415 	stw	zero,16(r16)
1000b320:	80800604 	addi	r2,r16,24
1000b324:	80000515 	stw	zero,20(r16)
1000b328:	00000106 	br	1000b330 <_calloc_r+0x84>
1000b32c:	8005883a 	mov	r2,r16
1000b330:	10000015 	stw	zero,0(r2)
1000b334:	10000115 	stw	zero,4(r2)
1000b338:	10000215 	stw	zero,8(r2)
1000b33c:	8005883a 	mov	r2,r16
1000b340:	dfc00117 	ldw	ra,4(sp)
1000b344:	dc000017 	ldw	r16,0(sp)
1000b348:	dec00204 	addi	sp,sp,8
1000b34c:	f800283a 	ret
1000b350:	000b883a 	mov	r5,zero
1000b354:	8009883a 	mov	r4,r16
1000b358:	00080dc0 	call	100080dc <memset>
1000b35c:	8005883a 	mov	r2,r16
1000b360:	dfc00117 	ldw	ra,4(sp)
1000b364:	dc000017 	ldw	r16,0(sp)
1000b368:	dec00204 	addi	sp,sp,8
1000b36c:	f800283a 	ret
1000b370:	80800404 	addi	r2,r16,16
1000b374:	003fee06 	br	1000b330 <__alt_data_end+0xf800b330>
1000b378:	80800204 	addi	r2,r16,8
1000b37c:	003fec06 	br	1000b330 <__alt_data_end+0xf800b330>
1000b380:	0005883a 	mov	r2,zero
1000b384:	003fee06 	br	1000b340 <__alt_data_end+0xf800b340>

1000b388 <_fclose_r>:
1000b388:	28003926 	beq	r5,zero,1000b470 <_fclose_r+0xe8>
1000b38c:	defffc04 	addi	sp,sp,-16
1000b390:	dc400115 	stw	r17,4(sp)
1000b394:	dc000015 	stw	r16,0(sp)
1000b398:	dfc00315 	stw	ra,12(sp)
1000b39c:	dc800215 	stw	r18,8(sp)
1000b3a0:	2023883a 	mov	r17,r4
1000b3a4:	2821883a 	mov	r16,r5
1000b3a8:	20000226 	beq	r4,zero,1000b3b4 <_fclose_r+0x2c>
1000b3ac:	20800e17 	ldw	r2,56(r4)
1000b3b0:	10002726 	beq	r2,zero,1000b450 <_fclose_r+0xc8>
1000b3b4:	8080030f 	ldh	r2,12(r16)
1000b3b8:	1000071e 	bne	r2,zero,1000b3d8 <_fclose_r+0x50>
1000b3bc:	0005883a 	mov	r2,zero
1000b3c0:	dfc00317 	ldw	ra,12(sp)
1000b3c4:	dc800217 	ldw	r18,8(sp)
1000b3c8:	dc400117 	ldw	r17,4(sp)
1000b3cc:	dc000017 	ldw	r16,0(sp)
1000b3d0:	dec00404 	addi	sp,sp,16
1000b3d4:	f800283a 	ret
1000b3d8:	800b883a 	mov	r5,r16
1000b3dc:	8809883a 	mov	r4,r17
1000b3e0:	00061d40 	call	100061d4 <__sflush_r>
1000b3e4:	1025883a 	mov	r18,r2
1000b3e8:	80800b17 	ldw	r2,44(r16)
1000b3ec:	10000426 	beq	r2,zero,1000b400 <_fclose_r+0x78>
1000b3f0:	81400717 	ldw	r5,28(r16)
1000b3f4:	8809883a 	mov	r4,r17
1000b3f8:	103ee83a 	callr	r2
1000b3fc:	10001616 	blt	r2,zero,1000b458 <_fclose_r+0xd0>
1000b400:	8080030b 	ldhu	r2,12(r16)
1000b404:	1080200c 	andi	r2,r2,128
1000b408:	1000151e 	bne	r2,zero,1000b460 <_fclose_r+0xd8>
1000b40c:	81400c17 	ldw	r5,48(r16)
1000b410:	28000526 	beq	r5,zero,1000b428 <_fclose_r+0xa0>
1000b414:	80801004 	addi	r2,r16,64
1000b418:	28800226 	beq	r5,r2,1000b424 <_fclose_r+0x9c>
1000b41c:	8809883a 	mov	r4,r17
1000b420:	00069500 	call	10006950 <_free_r>
1000b424:	80000c15 	stw	zero,48(r16)
1000b428:	81401117 	ldw	r5,68(r16)
1000b42c:	28000326 	beq	r5,zero,1000b43c <_fclose_r+0xb4>
1000b430:	8809883a 	mov	r4,r17
1000b434:	00069500 	call	10006950 <_free_r>
1000b438:	80001115 	stw	zero,68(r16)
1000b43c:	00067ec0 	call	100067ec <__sfp_lock_acquire>
1000b440:	8000030d 	sth	zero,12(r16)
1000b444:	00067f00 	call	100067f0 <__sfp_lock_release>
1000b448:	9005883a 	mov	r2,r18
1000b44c:	003fdc06 	br	1000b3c0 <__alt_data_end+0xf800b3c0>
1000b450:	00067dc0 	call	100067dc <__sinit>
1000b454:	003fd706 	br	1000b3b4 <__alt_data_end+0xf800b3b4>
1000b458:	04bfffc4 	movi	r18,-1
1000b45c:	003fe806 	br	1000b400 <__alt_data_end+0xf800b400>
1000b460:	81400417 	ldw	r5,16(r16)
1000b464:	8809883a 	mov	r4,r17
1000b468:	00069500 	call	10006950 <_free_r>
1000b46c:	003fe706 	br	1000b40c <__alt_data_end+0xf800b40c>
1000b470:	0005883a 	mov	r2,zero
1000b474:	f800283a 	ret

1000b478 <fclose>:
1000b478:	00840074 	movhi	r2,4097
1000b47c:	108fb304 	addi	r2,r2,16076
1000b480:	200b883a 	mov	r5,r4
1000b484:	11000017 	ldw	r4,0(r2)
1000b488:	000b3881 	jmpi	1000b388 <_fclose_r>

1000b48c <__fputwc>:
1000b48c:	defff804 	addi	sp,sp,-32
1000b490:	dcc00415 	stw	r19,16(sp)
1000b494:	dc800315 	stw	r18,12(sp)
1000b498:	dc000115 	stw	r16,4(sp)
1000b49c:	dfc00715 	stw	ra,28(sp)
1000b4a0:	dd400615 	stw	r21,24(sp)
1000b4a4:	dd000515 	stw	r20,20(sp)
1000b4a8:	dc400215 	stw	r17,8(sp)
1000b4ac:	2027883a 	mov	r19,r4
1000b4b0:	2825883a 	mov	r18,r5
1000b4b4:	3021883a 	mov	r16,r6
1000b4b8:	00073380 	call	10007338 <__locale_mb_cur_max>
1000b4bc:	00c00044 	movi	r3,1
1000b4c0:	10c03e26 	beq	r2,r3,1000b5bc <__fputwc+0x130>
1000b4c4:	81c01704 	addi	r7,r16,92
1000b4c8:	900d883a 	mov	r6,r18
1000b4cc:	d80b883a 	mov	r5,sp
1000b4d0:	9809883a 	mov	r4,r19
1000b4d4:	000b95c0 	call	1000b95c <_wcrtomb_r>
1000b4d8:	1029883a 	mov	r20,r2
1000b4dc:	00bfffc4 	movi	r2,-1
1000b4e0:	a0802026 	beq	r20,r2,1000b564 <__fputwc+0xd8>
1000b4e4:	d9400003 	ldbu	r5,0(sp)
1000b4e8:	a0001c26 	beq	r20,zero,1000b55c <__fputwc+0xd0>
1000b4ec:	0023883a 	mov	r17,zero
1000b4f0:	05400284 	movi	r21,10
1000b4f4:	00000906 	br	1000b51c <__fputwc+0x90>
1000b4f8:	80800017 	ldw	r2,0(r16)
1000b4fc:	11400005 	stb	r5,0(r2)
1000b500:	80c00017 	ldw	r3,0(r16)
1000b504:	18c00044 	addi	r3,r3,1
1000b508:	80c00015 	stw	r3,0(r16)
1000b50c:	8c400044 	addi	r17,r17,1
1000b510:	dc45883a 	add	r2,sp,r17
1000b514:	8d00112e 	bgeu	r17,r20,1000b55c <__fputwc+0xd0>
1000b518:	11400003 	ldbu	r5,0(r2)
1000b51c:	80c00217 	ldw	r3,8(r16)
1000b520:	18ffffc4 	addi	r3,r3,-1
1000b524:	80c00215 	stw	r3,8(r16)
1000b528:	183ff30e 	bge	r3,zero,1000b4f8 <__alt_data_end+0xf800b4f8>
1000b52c:	80800617 	ldw	r2,24(r16)
1000b530:	18801916 	blt	r3,r2,1000b598 <__fputwc+0x10c>
1000b534:	80800017 	ldw	r2,0(r16)
1000b538:	11400005 	stb	r5,0(r2)
1000b53c:	80800017 	ldw	r2,0(r16)
1000b540:	10c00003 	ldbu	r3,0(r2)
1000b544:	10800044 	addi	r2,r2,1
1000b548:	1d402326 	beq	r3,r21,1000b5d8 <__fputwc+0x14c>
1000b54c:	80800015 	stw	r2,0(r16)
1000b550:	8c400044 	addi	r17,r17,1
1000b554:	dc45883a 	add	r2,sp,r17
1000b558:	8d3fef36 	bltu	r17,r20,1000b518 <__alt_data_end+0xf800b518>
1000b55c:	9005883a 	mov	r2,r18
1000b560:	00000406 	br	1000b574 <__fputwc+0xe8>
1000b564:	80c0030b 	ldhu	r3,12(r16)
1000b568:	a005883a 	mov	r2,r20
1000b56c:	18c01014 	ori	r3,r3,64
1000b570:	80c0030d 	sth	r3,12(r16)
1000b574:	dfc00717 	ldw	ra,28(sp)
1000b578:	dd400617 	ldw	r21,24(sp)
1000b57c:	dd000517 	ldw	r20,20(sp)
1000b580:	dcc00417 	ldw	r19,16(sp)
1000b584:	dc800317 	ldw	r18,12(sp)
1000b588:	dc400217 	ldw	r17,8(sp)
1000b58c:	dc000117 	ldw	r16,4(sp)
1000b590:	dec00804 	addi	sp,sp,32
1000b594:	f800283a 	ret
1000b598:	800d883a 	mov	r6,r16
1000b59c:	29403fcc 	andi	r5,r5,255
1000b5a0:	9809883a 	mov	r4,r19
1000b5a4:	000b8040 	call	1000b804 <__swbuf_r>
1000b5a8:	10bfffe0 	cmpeqi	r2,r2,-1
1000b5ac:	10803fcc 	andi	r2,r2,255
1000b5b0:	103fd626 	beq	r2,zero,1000b50c <__alt_data_end+0xf800b50c>
1000b5b4:	00bfffc4 	movi	r2,-1
1000b5b8:	003fee06 	br	1000b574 <__alt_data_end+0xf800b574>
1000b5bc:	90ffffc4 	addi	r3,r18,-1
1000b5c0:	01003f84 	movi	r4,254
1000b5c4:	20ffbf36 	bltu	r4,r3,1000b4c4 <__alt_data_end+0xf800b4c4>
1000b5c8:	900b883a 	mov	r5,r18
1000b5cc:	dc800005 	stb	r18,0(sp)
1000b5d0:	1029883a 	mov	r20,r2
1000b5d4:	003fc506 	br	1000b4ec <__alt_data_end+0xf800b4ec>
1000b5d8:	800d883a 	mov	r6,r16
1000b5dc:	a80b883a 	mov	r5,r21
1000b5e0:	9809883a 	mov	r4,r19
1000b5e4:	000b8040 	call	1000b804 <__swbuf_r>
1000b5e8:	10bfffe0 	cmpeqi	r2,r2,-1
1000b5ec:	003fef06 	br	1000b5ac <__alt_data_end+0xf800b5ac>

1000b5f0 <_fputwc_r>:
1000b5f0:	3080030b 	ldhu	r2,12(r6)
1000b5f4:	10c8000c 	andi	r3,r2,8192
1000b5f8:	1800051e 	bne	r3,zero,1000b610 <_fputwc_r+0x20>
1000b5fc:	30c01917 	ldw	r3,100(r6)
1000b600:	10880014 	ori	r2,r2,8192
1000b604:	3080030d 	sth	r2,12(r6)
1000b608:	18880014 	ori	r2,r3,8192
1000b60c:	30801915 	stw	r2,100(r6)
1000b610:	000b48c1 	jmpi	1000b48c <__fputwc>

1000b614 <fputwc>:
1000b614:	00840074 	movhi	r2,4097
1000b618:	defffc04 	addi	sp,sp,-16
1000b61c:	108fb304 	addi	r2,r2,16076
1000b620:	dc000115 	stw	r16,4(sp)
1000b624:	14000017 	ldw	r16,0(r2)
1000b628:	dc400215 	stw	r17,8(sp)
1000b62c:	dfc00315 	stw	ra,12(sp)
1000b630:	2023883a 	mov	r17,r4
1000b634:	80000226 	beq	r16,zero,1000b640 <fputwc+0x2c>
1000b638:	80800e17 	ldw	r2,56(r16)
1000b63c:	10001026 	beq	r2,zero,1000b680 <fputwc+0x6c>
1000b640:	2880030b 	ldhu	r2,12(r5)
1000b644:	10c8000c 	andi	r3,r2,8192
1000b648:	1800051e 	bne	r3,zero,1000b660 <fputwc+0x4c>
1000b64c:	28c01917 	ldw	r3,100(r5)
1000b650:	10880014 	ori	r2,r2,8192
1000b654:	2880030d 	sth	r2,12(r5)
1000b658:	18880014 	ori	r2,r3,8192
1000b65c:	28801915 	stw	r2,100(r5)
1000b660:	280d883a 	mov	r6,r5
1000b664:	8009883a 	mov	r4,r16
1000b668:	880b883a 	mov	r5,r17
1000b66c:	dfc00317 	ldw	ra,12(sp)
1000b670:	dc400217 	ldw	r17,8(sp)
1000b674:	dc000117 	ldw	r16,4(sp)
1000b678:	dec00404 	addi	sp,sp,16
1000b67c:	000b48c1 	jmpi	1000b48c <__fputwc>
1000b680:	8009883a 	mov	r4,r16
1000b684:	d9400015 	stw	r5,0(sp)
1000b688:	00067dc0 	call	100067dc <__sinit>
1000b68c:	d9400017 	ldw	r5,0(sp)
1000b690:	003feb06 	br	1000b640 <__alt_data_end+0xf800b640>

1000b694 <_fstat_r>:
1000b694:	defffd04 	addi	sp,sp,-12
1000b698:	2805883a 	mov	r2,r5
1000b69c:	dc000015 	stw	r16,0(sp)
1000b6a0:	04040074 	movhi	r16,4097
1000b6a4:	dc400115 	stw	r17,4(sp)
1000b6a8:	84168404 	addi	r16,r16,23056
1000b6ac:	2023883a 	mov	r17,r4
1000b6b0:	300b883a 	mov	r5,r6
1000b6b4:	1009883a 	mov	r4,r2
1000b6b8:	dfc00215 	stw	ra,8(sp)
1000b6bc:	80000015 	stw	zero,0(r16)
1000b6c0:	000f3000 	call	1000f300 <fstat>
1000b6c4:	00ffffc4 	movi	r3,-1
1000b6c8:	10c00526 	beq	r2,r3,1000b6e0 <_fstat_r+0x4c>
1000b6cc:	dfc00217 	ldw	ra,8(sp)
1000b6d0:	dc400117 	ldw	r17,4(sp)
1000b6d4:	dc000017 	ldw	r16,0(sp)
1000b6d8:	dec00304 	addi	sp,sp,12
1000b6dc:	f800283a 	ret
1000b6e0:	80c00017 	ldw	r3,0(r16)
1000b6e4:	183ff926 	beq	r3,zero,1000b6cc <__alt_data_end+0xf800b6cc>
1000b6e8:	88c00015 	stw	r3,0(r17)
1000b6ec:	003ff706 	br	1000b6cc <__alt_data_end+0xf800b6cc>

1000b6f0 <_isatty_r>:
1000b6f0:	defffd04 	addi	sp,sp,-12
1000b6f4:	dc000015 	stw	r16,0(sp)
1000b6f8:	04040074 	movhi	r16,4097
1000b6fc:	dc400115 	stw	r17,4(sp)
1000b700:	84168404 	addi	r16,r16,23056
1000b704:	2023883a 	mov	r17,r4
1000b708:	2809883a 	mov	r4,r5
1000b70c:	dfc00215 	stw	ra,8(sp)
1000b710:	80000015 	stw	zero,0(r16)
1000b714:	000f3f40 	call	1000f3f4 <isatty>
1000b718:	00ffffc4 	movi	r3,-1
1000b71c:	10c00526 	beq	r2,r3,1000b734 <_isatty_r+0x44>
1000b720:	dfc00217 	ldw	ra,8(sp)
1000b724:	dc400117 	ldw	r17,4(sp)
1000b728:	dc000017 	ldw	r16,0(sp)
1000b72c:	dec00304 	addi	sp,sp,12
1000b730:	f800283a 	ret
1000b734:	80c00017 	ldw	r3,0(r16)
1000b738:	183ff926 	beq	r3,zero,1000b720 <__alt_data_end+0xf800b720>
1000b73c:	88c00015 	stw	r3,0(r17)
1000b740:	003ff706 	br	1000b720 <__alt_data_end+0xf800b720>

1000b744 <_lseek_r>:
1000b744:	defffd04 	addi	sp,sp,-12
1000b748:	2805883a 	mov	r2,r5
1000b74c:	dc000015 	stw	r16,0(sp)
1000b750:	04040074 	movhi	r16,4097
1000b754:	dc400115 	stw	r17,4(sp)
1000b758:	300b883a 	mov	r5,r6
1000b75c:	84168404 	addi	r16,r16,23056
1000b760:	2023883a 	mov	r17,r4
1000b764:	380d883a 	mov	r6,r7
1000b768:	1009883a 	mov	r4,r2
1000b76c:	dfc00215 	stw	ra,8(sp)
1000b770:	80000015 	stw	zero,0(r16)
1000b774:	000f5c80 	call	1000f5c8 <lseek>
1000b778:	00ffffc4 	movi	r3,-1
1000b77c:	10c00526 	beq	r2,r3,1000b794 <_lseek_r+0x50>
1000b780:	dfc00217 	ldw	ra,8(sp)
1000b784:	dc400117 	ldw	r17,4(sp)
1000b788:	dc000017 	ldw	r16,0(sp)
1000b78c:	dec00304 	addi	sp,sp,12
1000b790:	f800283a 	ret
1000b794:	80c00017 	ldw	r3,0(r16)
1000b798:	183ff926 	beq	r3,zero,1000b780 <__alt_data_end+0xf800b780>
1000b79c:	88c00015 	stw	r3,0(r17)
1000b7a0:	003ff706 	br	1000b780 <__alt_data_end+0xf800b780>

1000b7a4 <_read_r>:
1000b7a4:	defffd04 	addi	sp,sp,-12
1000b7a8:	2805883a 	mov	r2,r5
1000b7ac:	dc000015 	stw	r16,0(sp)
1000b7b0:	04040074 	movhi	r16,4097
1000b7b4:	dc400115 	stw	r17,4(sp)
1000b7b8:	300b883a 	mov	r5,r6
1000b7bc:	84168404 	addi	r16,r16,23056
1000b7c0:	2023883a 	mov	r17,r4
1000b7c4:	380d883a 	mov	r6,r7
1000b7c8:	1009883a 	mov	r4,r2
1000b7cc:	dfc00215 	stw	ra,8(sp)
1000b7d0:	80000015 	stw	zero,0(r16)
1000b7d4:	000f7a40 	call	1000f7a4 <read>
1000b7d8:	00ffffc4 	movi	r3,-1
1000b7dc:	10c00526 	beq	r2,r3,1000b7f4 <_read_r+0x50>
1000b7e0:	dfc00217 	ldw	ra,8(sp)
1000b7e4:	dc400117 	ldw	r17,4(sp)
1000b7e8:	dc000017 	ldw	r16,0(sp)
1000b7ec:	dec00304 	addi	sp,sp,12
1000b7f0:	f800283a 	ret
1000b7f4:	80c00017 	ldw	r3,0(r16)
1000b7f8:	183ff926 	beq	r3,zero,1000b7e0 <__alt_data_end+0xf800b7e0>
1000b7fc:	88c00015 	stw	r3,0(r17)
1000b800:	003ff706 	br	1000b7e0 <__alt_data_end+0xf800b7e0>

1000b804 <__swbuf_r>:
1000b804:	defffb04 	addi	sp,sp,-20
1000b808:	dcc00315 	stw	r19,12(sp)
1000b80c:	dc800215 	stw	r18,8(sp)
1000b810:	dc000015 	stw	r16,0(sp)
1000b814:	dfc00415 	stw	ra,16(sp)
1000b818:	dc400115 	stw	r17,4(sp)
1000b81c:	2025883a 	mov	r18,r4
1000b820:	2827883a 	mov	r19,r5
1000b824:	3021883a 	mov	r16,r6
1000b828:	20000226 	beq	r4,zero,1000b834 <__swbuf_r+0x30>
1000b82c:	20800e17 	ldw	r2,56(r4)
1000b830:	10004226 	beq	r2,zero,1000b93c <__swbuf_r+0x138>
1000b834:	80800617 	ldw	r2,24(r16)
1000b838:	8100030b 	ldhu	r4,12(r16)
1000b83c:	80800215 	stw	r2,8(r16)
1000b840:	2080020c 	andi	r2,r4,8
1000b844:	10003626 	beq	r2,zero,1000b920 <__swbuf_r+0x11c>
1000b848:	80c00417 	ldw	r3,16(r16)
1000b84c:	18003426 	beq	r3,zero,1000b920 <__swbuf_r+0x11c>
1000b850:	2088000c 	andi	r2,r4,8192
1000b854:	9c403fcc 	andi	r17,r19,255
1000b858:	10001a26 	beq	r2,zero,1000b8c4 <__swbuf_r+0xc0>
1000b85c:	80800017 	ldw	r2,0(r16)
1000b860:	81000517 	ldw	r4,20(r16)
1000b864:	10c7c83a 	sub	r3,r2,r3
1000b868:	1900200e 	bge	r3,r4,1000b8ec <__swbuf_r+0xe8>
1000b86c:	18c00044 	addi	r3,r3,1
1000b870:	81000217 	ldw	r4,8(r16)
1000b874:	11400044 	addi	r5,r2,1
1000b878:	81400015 	stw	r5,0(r16)
1000b87c:	213fffc4 	addi	r4,r4,-1
1000b880:	81000215 	stw	r4,8(r16)
1000b884:	14c00005 	stb	r19,0(r2)
1000b888:	80800517 	ldw	r2,20(r16)
1000b88c:	10c01e26 	beq	r2,r3,1000b908 <__swbuf_r+0x104>
1000b890:	8080030b 	ldhu	r2,12(r16)
1000b894:	1080004c 	andi	r2,r2,1
1000b898:	10000226 	beq	r2,zero,1000b8a4 <__swbuf_r+0xa0>
1000b89c:	00800284 	movi	r2,10
1000b8a0:	88801926 	beq	r17,r2,1000b908 <__swbuf_r+0x104>
1000b8a4:	8805883a 	mov	r2,r17
1000b8a8:	dfc00417 	ldw	ra,16(sp)
1000b8ac:	dcc00317 	ldw	r19,12(sp)
1000b8b0:	dc800217 	ldw	r18,8(sp)
1000b8b4:	dc400117 	ldw	r17,4(sp)
1000b8b8:	dc000017 	ldw	r16,0(sp)
1000b8bc:	dec00504 	addi	sp,sp,20
1000b8c0:	f800283a 	ret
1000b8c4:	81401917 	ldw	r5,100(r16)
1000b8c8:	00b7ffc4 	movi	r2,-8193
1000b8cc:	21080014 	ori	r4,r4,8192
1000b8d0:	2884703a 	and	r2,r5,r2
1000b8d4:	80801915 	stw	r2,100(r16)
1000b8d8:	80800017 	ldw	r2,0(r16)
1000b8dc:	8100030d 	sth	r4,12(r16)
1000b8e0:	81000517 	ldw	r4,20(r16)
1000b8e4:	10c7c83a 	sub	r3,r2,r3
1000b8e8:	193fe016 	blt	r3,r4,1000b86c <__alt_data_end+0xf800b86c>
1000b8ec:	800b883a 	mov	r5,r16
1000b8f0:	9009883a 	mov	r4,r18
1000b8f4:	00063f00 	call	100063f0 <_fflush_r>
1000b8f8:	1000071e 	bne	r2,zero,1000b918 <__swbuf_r+0x114>
1000b8fc:	80800017 	ldw	r2,0(r16)
1000b900:	00c00044 	movi	r3,1
1000b904:	003fda06 	br	1000b870 <__alt_data_end+0xf800b870>
1000b908:	800b883a 	mov	r5,r16
1000b90c:	9009883a 	mov	r4,r18
1000b910:	00063f00 	call	100063f0 <_fflush_r>
1000b914:	103fe326 	beq	r2,zero,1000b8a4 <__alt_data_end+0xf800b8a4>
1000b918:	00bfffc4 	movi	r2,-1
1000b91c:	003fe206 	br	1000b8a8 <__alt_data_end+0xf800b8a8>
1000b920:	800b883a 	mov	r5,r16
1000b924:	9009883a 	mov	r4,r18
1000b928:	00047d00 	call	100047d0 <__swsetup_r>
1000b92c:	103ffa1e 	bne	r2,zero,1000b918 <__alt_data_end+0xf800b918>
1000b930:	8100030b 	ldhu	r4,12(r16)
1000b934:	80c00417 	ldw	r3,16(r16)
1000b938:	003fc506 	br	1000b850 <__alt_data_end+0xf800b850>
1000b93c:	00067dc0 	call	100067dc <__sinit>
1000b940:	003fbc06 	br	1000b834 <__alt_data_end+0xf800b834>

1000b944 <__swbuf>:
1000b944:	00840074 	movhi	r2,4097
1000b948:	108fb304 	addi	r2,r2,16076
1000b94c:	280d883a 	mov	r6,r5
1000b950:	200b883a 	mov	r5,r4
1000b954:	11000017 	ldw	r4,0(r2)
1000b958:	000b8041 	jmpi	1000b804 <__swbuf_r>

1000b95c <_wcrtomb_r>:
1000b95c:	defff604 	addi	sp,sp,-40
1000b960:	00840074 	movhi	r2,4097
1000b964:	dc800815 	stw	r18,32(sp)
1000b968:	dc400715 	stw	r17,28(sp)
1000b96c:	dc000615 	stw	r16,24(sp)
1000b970:	108fb704 	addi	r2,r2,16092
1000b974:	dfc00915 	stw	ra,36(sp)
1000b978:	2021883a 	mov	r16,r4
1000b97c:	3823883a 	mov	r17,r7
1000b980:	14800017 	ldw	r18,0(r2)
1000b984:	28001426 	beq	r5,zero,1000b9d8 <_wcrtomb_r+0x7c>
1000b988:	d9400415 	stw	r5,16(sp)
1000b98c:	d9800515 	stw	r6,20(sp)
1000b990:	000732c0 	call	1000732c <__locale_charset>
1000b994:	d9800517 	ldw	r6,20(sp)
1000b998:	d9400417 	ldw	r5,16(sp)
1000b99c:	100f883a 	mov	r7,r2
1000b9a0:	dc400015 	stw	r17,0(sp)
1000b9a4:	8009883a 	mov	r4,r16
1000b9a8:	903ee83a 	callr	r18
1000b9ac:	00ffffc4 	movi	r3,-1
1000b9b0:	10c0031e 	bne	r2,r3,1000b9c0 <_wcrtomb_r+0x64>
1000b9b4:	88000015 	stw	zero,0(r17)
1000b9b8:	00c02284 	movi	r3,138
1000b9bc:	80c00015 	stw	r3,0(r16)
1000b9c0:	dfc00917 	ldw	ra,36(sp)
1000b9c4:	dc800817 	ldw	r18,32(sp)
1000b9c8:	dc400717 	ldw	r17,28(sp)
1000b9cc:	dc000617 	ldw	r16,24(sp)
1000b9d0:	dec00a04 	addi	sp,sp,40
1000b9d4:	f800283a 	ret
1000b9d8:	000732c0 	call	1000732c <__locale_charset>
1000b9dc:	100f883a 	mov	r7,r2
1000b9e0:	dc400015 	stw	r17,0(sp)
1000b9e4:	000d883a 	mov	r6,zero
1000b9e8:	d9400104 	addi	r5,sp,4
1000b9ec:	8009883a 	mov	r4,r16
1000b9f0:	903ee83a 	callr	r18
1000b9f4:	003fed06 	br	1000b9ac <__alt_data_end+0xf800b9ac>

1000b9f8 <wcrtomb>:
1000b9f8:	defff604 	addi	sp,sp,-40
1000b9fc:	00840074 	movhi	r2,4097
1000ba00:	dc800615 	stw	r18,24(sp)
1000ba04:	dc400515 	stw	r17,20(sp)
1000ba08:	108fb304 	addi	r2,r2,16076
1000ba0c:	dfc00915 	stw	ra,36(sp)
1000ba10:	dd000815 	stw	r20,32(sp)
1000ba14:	dcc00715 	stw	r19,28(sp)
1000ba18:	dc000415 	stw	r16,16(sp)
1000ba1c:	3025883a 	mov	r18,r6
1000ba20:	14400017 	ldw	r17,0(r2)
1000ba24:	20001926 	beq	r4,zero,1000ba8c <wcrtomb+0x94>
1000ba28:	00840074 	movhi	r2,4097
1000ba2c:	108fb704 	addi	r2,r2,16092
1000ba30:	15000017 	ldw	r20,0(r2)
1000ba34:	2021883a 	mov	r16,r4
1000ba38:	2827883a 	mov	r19,r5
1000ba3c:	000732c0 	call	1000732c <__locale_charset>
1000ba40:	100f883a 	mov	r7,r2
1000ba44:	dc800015 	stw	r18,0(sp)
1000ba48:	980d883a 	mov	r6,r19
1000ba4c:	800b883a 	mov	r5,r16
1000ba50:	8809883a 	mov	r4,r17
1000ba54:	a03ee83a 	callr	r20
1000ba58:	00ffffc4 	movi	r3,-1
1000ba5c:	10c0031e 	bne	r2,r3,1000ba6c <wcrtomb+0x74>
1000ba60:	90000015 	stw	zero,0(r18)
1000ba64:	00c02284 	movi	r3,138
1000ba68:	88c00015 	stw	r3,0(r17)
1000ba6c:	dfc00917 	ldw	ra,36(sp)
1000ba70:	dd000817 	ldw	r20,32(sp)
1000ba74:	dcc00717 	ldw	r19,28(sp)
1000ba78:	dc800617 	ldw	r18,24(sp)
1000ba7c:	dc400517 	ldw	r17,20(sp)
1000ba80:	dc000417 	ldw	r16,16(sp)
1000ba84:	dec00a04 	addi	sp,sp,40
1000ba88:	f800283a 	ret
1000ba8c:	00840074 	movhi	r2,4097
1000ba90:	108fb704 	addi	r2,r2,16092
1000ba94:	14000017 	ldw	r16,0(r2)
1000ba98:	000732c0 	call	1000732c <__locale_charset>
1000ba9c:	100f883a 	mov	r7,r2
1000baa0:	dc800015 	stw	r18,0(sp)
1000baa4:	000d883a 	mov	r6,zero
1000baa8:	d9400104 	addi	r5,sp,4
1000baac:	8809883a 	mov	r4,r17
1000bab0:	803ee83a 	callr	r16
1000bab4:	003fe806 	br	1000ba58 <__alt_data_end+0xf800ba58>

1000bab8 <__ascii_wctomb>:
1000bab8:	28000526 	beq	r5,zero,1000bad0 <__ascii_wctomb+0x18>
1000babc:	00803fc4 	movi	r2,255
1000bac0:	11800536 	bltu	r2,r6,1000bad8 <__ascii_wctomb+0x20>
1000bac4:	29800005 	stb	r6,0(r5)
1000bac8:	00800044 	movi	r2,1
1000bacc:	f800283a 	ret
1000bad0:	0005883a 	mov	r2,zero
1000bad4:	f800283a 	ret
1000bad8:	00802284 	movi	r2,138
1000badc:	20800015 	stw	r2,0(r4)
1000bae0:	00bfffc4 	movi	r2,-1
1000bae4:	f800283a 	ret

1000bae8 <_wctomb_r>:
1000bae8:	00840074 	movhi	r2,4097
1000baec:	defff904 	addi	sp,sp,-28
1000baf0:	108fb704 	addi	r2,r2,16092
1000baf4:	dfc00615 	stw	ra,24(sp)
1000baf8:	dc400515 	stw	r17,20(sp)
1000bafc:	dc000415 	stw	r16,16(sp)
1000bb00:	3823883a 	mov	r17,r7
1000bb04:	14000017 	ldw	r16,0(r2)
1000bb08:	d9000115 	stw	r4,4(sp)
1000bb0c:	d9400215 	stw	r5,8(sp)
1000bb10:	d9800315 	stw	r6,12(sp)
1000bb14:	000732c0 	call	1000732c <__locale_charset>
1000bb18:	d9800317 	ldw	r6,12(sp)
1000bb1c:	d9400217 	ldw	r5,8(sp)
1000bb20:	d9000117 	ldw	r4,4(sp)
1000bb24:	100f883a 	mov	r7,r2
1000bb28:	dc400015 	stw	r17,0(sp)
1000bb2c:	803ee83a 	callr	r16
1000bb30:	dfc00617 	ldw	ra,24(sp)
1000bb34:	dc400517 	ldw	r17,20(sp)
1000bb38:	dc000417 	ldw	r16,16(sp)
1000bb3c:	dec00704 	addi	sp,sp,28
1000bb40:	f800283a 	ret

1000bb44 <__udivdi3>:
1000bb44:	defff404 	addi	sp,sp,-48
1000bb48:	dcc00515 	stw	r19,20(sp)
1000bb4c:	dc000215 	stw	r16,8(sp)
1000bb50:	dfc00b15 	stw	ra,44(sp)
1000bb54:	df000a15 	stw	fp,40(sp)
1000bb58:	ddc00915 	stw	r23,36(sp)
1000bb5c:	dd800815 	stw	r22,32(sp)
1000bb60:	dd400715 	stw	r21,28(sp)
1000bb64:	dd000615 	stw	r20,24(sp)
1000bb68:	dc800415 	stw	r18,16(sp)
1000bb6c:	dc400315 	stw	r17,12(sp)
1000bb70:	2027883a 	mov	r19,r4
1000bb74:	2821883a 	mov	r16,r5
1000bb78:	3800461e 	bne	r7,zero,1000bc94 <__udivdi3+0x150>
1000bb7c:	3023883a 	mov	r17,r6
1000bb80:	2025883a 	mov	r18,r4
1000bb84:	2980572e 	bgeu	r5,r6,1000bce4 <__udivdi3+0x1a0>
1000bb88:	00bfffd4 	movui	r2,65535
1000bb8c:	282d883a 	mov	r22,r5
1000bb90:	1180b236 	bltu	r2,r6,1000be5c <__udivdi3+0x318>
1000bb94:	00803fc4 	movi	r2,255
1000bb98:	1185803a 	cmpltu	r2,r2,r6
1000bb9c:	100490fa 	slli	r2,r2,3
1000bba0:	3086d83a 	srl	r3,r6,r2
1000bba4:	01040074 	movhi	r4,4097
1000bba8:	2108ba04 	addi	r4,r4,8936
1000bbac:	20c7883a 	add	r3,r4,r3
1000bbb0:	18c00003 	ldbu	r3,0(r3)
1000bbb4:	1885883a 	add	r2,r3,r2
1000bbb8:	00c00804 	movi	r3,32
1000bbbc:	1887c83a 	sub	r3,r3,r2
1000bbc0:	18000526 	beq	r3,zero,1000bbd8 <__udivdi3+0x94>
1000bbc4:	80e0983a 	sll	r16,r16,r3
1000bbc8:	9884d83a 	srl	r2,r19,r2
1000bbcc:	30e2983a 	sll	r17,r6,r3
1000bbd0:	98e4983a 	sll	r18,r19,r3
1000bbd4:	142cb03a 	or	r22,r2,r16
1000bbd8:	882ad43a 	srli	r21,r17,16
1000bbdc:	b009883a 	mov	r4,r22
1000bbe0:	8d3fffcc 	andi	r20,r17,65535
1000bbe4:	a80b883a 	mov	r5,r21
1000bbe8:	000c8600 	call	1000c860 <__umodsi3>
1000bbec:	b009883a 	mov	r4,r22
1000bbf0:	a80b883a 	mov	r5,r21
1000bbf4:	1027883a 	mov	r19,r2
1000bbf8:	000c7fc0 	call	1000c7fc <__udivsi3>
1000bbfc:	100b883a 	mov	r5,r2
1000bc00:	a009883a 	mov	r4,r20
1000bc04:	102d883a 	mov	r22,r2
1000bc08:	000c8b80 	call	1000c8b8 <__mulsi3>
1000bc0c:	9826943a 	slli	r19,r19,16
1000bc10:	9006d43a 	srli	r3,r18,16
1000bc14:	1cc6b03a 	or	r3,r3,r19
1000bc18:	1880052e 	bgeu	r3,r2,1000bc30 <__udivdi3+0xec>
1000bc1c:	1c47883a 	add	r3,r3,r17
1000bc20:	b13fffc4 	addi	r4,r22,-1
1000bc24:	1c400136 	bltu	r3,r17,1000bc2c <__udivdi3+0xe8>
1000bc28:	18814236 	bltu	r3,r2,1000c134 <__udivdi3+0x5f0>
1000bc2c:	202d883a 	mov	r22,r4
1000bc30:	18a1c83a 	sub	r16,r3,r2
1000bc34:	8009883a 	mov	r4,r16
1000bc38:	a80b883a 	mov	r5,r21
1000bc3c:	000c8600 	call	1000c860 <__umodsi3>
1000bc40:	1027883a 	mov	r19,r2
1000bc44:	8009883a 	mov	r4,r16
1000bc48:	a80b883a 	mov	r5,r21
1000bc4c:	9826943a 	slli	r19,r19,16
1000bc50:	000c7fc0 	call	1000c7fc <__udivsi3>
1000bc54:	100b883a 	mov	r5,r2
1000bc58:	a009883a 	mov	r4,r20
1000bc5c:	94bfffcc 	andi	r18,r18,65535
1000bc60:	1021883a 	mov	r16,r2
1000bc64:	94e4b03a 	or	r18,r18,r19
1000bc68:	000c8b80 	call	1000c8b8 <__mulsi3>
1000bc6c:	9080052e 	bgeu	r18,r2,1000bc84 <__udivdi3+0x140>
1000bc70:	8ca5883a 	add	r18,r17,r18
1000bc74:	80ffffc4 	addi	r3,r16,-1
1000bc78:	94410c36 	bltu	r18,r17,1000c0ac <__udivdi3+0x568>
1000bc7c:	90810b2e 	bgeu	r18,r2,1000c0ac <__udivdi3+0x568>
1000bc80:	843fff84 	addi	r16,r16,-2
1000bc84:	b004943a 	slli	r2,r22,16
1000bc88:	0007883a 	mov	r3,zero
1000bc8c:	1404b03a 	or	r2,r2,r16
1000bc90:	00005e06 	br	1000be0c <__udivdi3+0x2c8>
1000bc94:	29c05b36 	bltu	r5,r7,1000be04 <__udivdi3+0x2c0>
1000bc98:	00bfffd4 	movui	r2,65535
1000bc9c:	11c0672e 	bgeu	r2,r7,1000be3c <__udivdi3+0x2f8>
1000bca0:	00804034 	movhi	r2,256
1000bca4:	10bfffc4 	addi	r2,r2,-1
1000bca8:	11c10a36 	bltu	r2,r7,1000c0d4 <__udivdi3+0x590>
1000bcac:	00800404 	movi	r2,16
1000bcb0:	3886d83a 	srl	r3,r7,r2
1000bcb4:	01040074 	movhi	r4,4097
1000bcb8:	2108ba04 	addi	r4,r4,8936
1000bcbc:	20c7883a 	add	r3,r4,r3
1000bcc0:	18c00003 	ldbu	r3,0(r3)
1000bcc4:	05c00804 	movi	r23,32
1000bcc8:	1885883a 	add	r2,r3,r2
1000bccc:	b8afc83a 	sub	r23,r23,r2
1000bcd0:	b800671e 	bne	r23,zero,1000be70 <__udivdi3+0x32c>
1000bcd4:	3c010536 	bltu	r7,r16,1000c0ec <__udivdi3+0x5a8>
1000bcd8:	9985403a 	cmpgeu	r2,r19,r6
1000bcdc:	0007883a 	mov	r3,zero
1000bce0:	00004a06 	br	1000be0c <__udivdi3+0x2c8>
1000bce4:	3000041e 	bne	r6,zero,1000bcf8 <__udivdi3+0x1b4>
1000bce8:	000b883a 	mov	r5,zero
1000bcec:	01000044 	movi	r4,1
1000bcf0:	000c7fc0 	call	1000c7fc <__udivsi3>
1000bcf4:	1023883a 	mov	r17,r2
1000bcf8:	00bfffd4 	movui	r2,65535
1000bcfc:	1440532e 	bgeu	r2,r17,1000be4c <__udivdi3+0x308>
1000bd00:	00804034 	movhi	r2,256
1000bd04:	10bfffc4 	addi	r2,r2,-1
1000bd08:	1440f436 	bltu	r2,r17,1000c0dc <__udivdi3+0x598>
1000bd0c:	00800404 	movi	r2,16
1000bd10:	8886d83a 	srl	r3,r17,r2
1000bd14:	01040074 	movhi	r4,4097
1000bd18:	2108ba04 	addi	r4,r4,8936
1000bd1c:	20c7883a 	add	r3,r4,r3
1000bd20:	18c00003 	ldbu	r3,0(r3)
1000bd24:	1885883a 	add	r2,r3,r2
1000bd28:	00c00804 	movi	r3,32
1000bd2c:	1887c83a 	sub	r3,r3,r2
1000bd30:	1800a51e 	bne	r3,zero,1000bfc8 <__udivdi3+0x484>
1000bd34:	882ad43a 	srli	r21,r17,16
1000bd38:	8461c83a 	sub	r16,r16,r17
1000bd3c:	8d3fffcc 	andi	r20,r17,65535
1000bd40:	00c00044 	movi	r3,1
1000bd44:	a80b883a 	mov	r5,r21
1000bd48:	8009883a 	mov	r4,r16
1000bd4c:	d8c00115 	stw	r3,4(sp)
1000bd50:	000c8600 	call	1000c860 <__umodsi3>
1000bd54:	a80b883a 	mov	r5,r21
1000bd58:	8009883a 	mov	r4,r16
1000bd5c:	1027883a 	mov	r19,r2
1000bd60:	000c7fc0 	call	1000c7fc <__udivsi3>
1000bd64:	a00b883a 	mov	r5,r20
1000bd68:	1009883a 	mov	r4,r2
1000bd6c:	102d883a 	mov	r22,r2
1000bd70:	000c8b80 	call	1000c8b8 <__mulsi3>
1000bd74:	9826943a 	slli	r19,r19,16
1000bd78:	900ed43a 	srli	r7,r18,16
1000bd7c:	d8c00117 	ldw	r3,4(sp)
1000bd80:	3cceb03a 	or	r7,r7,r19
1000bd84:	3880052e 	bgeu	r7,r2,1000bd9c <__udivdi3+0x258>
1000bd88:	3c4f883a 	add	r7,r7,r17
1000bd8c:	b13fffc4 	addi	r4,r22,-1
1000bd90:	3c400136 	bltu	r7,r17,1000bd98 <__udivdi3+0x254>
1000bd94:	3880e436 	bltu	r7,r2,1000c128 <__udivdi3+0x5e4>
1000bd98:	202d883a 	mov	r22,r4
1000bd9c:	38a1c83a 	sub	r16,r7,r2
1000bda0:	8009883a 	mov	r4,r16
1000bda4:	a80b883a 	mov	r5,r21
1000bda8:	d8c00115 	stw	r3,4(sp)
1000bdac:	000c8600 	call	1000c860 <__umodsi3>
1000bdb0:	1027883a 	mov	r19,r2
1000bdb4:	8009883a 	mov	r4,r16
1000bdb8:	a80b883a 	mov	r5,r21
1000bdbc:	9826943a 	slli	r19,r19,16
1000bdc0:	000c7fc0 	call	1000c7fc <__udivsi3>
1000bdc4:	a00b883a 	mov	r5,r20
1000bdc8:	1009883a 	mov	r4,r2
1000bdcc:	94bfffcc 	andi	r18,r18,65535
1000bdd0:	1021883a 	mov	r16,r2
1000bdd4:	94e4b03a 	or	r18,r18,r19
1000bdd8:	000c8b80 	call	1000c8b8 <__mulsi3>
1000bddc:	d8c00117 	ldw	r3,4(sp)
1000bde0:	9080052e 	bgeu	r18,r2,1000bdf8 <__udivdi3+0x2b4>
1000bde4:	8ca5883a 	add	r18,r17,r18
1000bde8:	813fffc4 	addi	r4,r16,-1
1000bdec:	9440ad36 	bltu	r18,r17,1000c0a4 <__udivdi3+0x560>
1000bdf0:	9080ac2e 	bgeu	r18,r2,1000c0a4 <__udivdi3+0x560>
1000bdf4:	843fff84 	addi	r16,r16,-2
1000bdf8:	b004943a 	slli	r2,r22,16
1000bdfc:	1404b03a 	or	r2,r2,r16
1000be00:	00000206 	br	1000be0c <__udivdi3+0x2c8>
1000be04:	0007883a 	mov	r3,zero
1000be08:	0005883a 	mov	r2,zero
1000be0c:	dfc00b17 	ldw	ra,44(sp)
1000be10:	df000a17 	ldw	fp,40(sp)
1000be14:	ddc00917 	ldw	r23,36(sp)
1000be18:	dd800817 	ldw	r22,32(sp)
1000be1c:	dd400717 	ldw	r21,28(sp)
1000be20:	dd000617 	ldw	r20,24(sp)
1000be24:	dcc00517 	ldw	r19,20(sp)
1000be28:	dc800417 	ldw	r18,16(sp)
1000be2c:	dc400317 	ldw	r17,12(sp)
1000be30:	dc000217 	ldw	r16,8(sp)
1000be34:	dec00c04 	addi	sp,sp,48
1000be38:	f800283a 	ret
1000be3c:	00803fc4 	movi	r2,255
1000be40:	11c5803a 	cmpltu	r2,r2,r7
1000be44:	100490fa 	slli	r2,r2,3
1000be48:	003f9906 	br	1000bcb0 <__alt_data_end+0xf800bcb0>
1000be4c:	00803fc4 	movi	r2,255
1000be50:	1445803a 	cmpltu	r2,r2,r17
1000be54:	100490fa 	slli	r2,r2,3
1000be58:	003fad06 	br	1000bd10 <__alt_data_end+0xf800bd10>
1000be5c:	00804034 	movhi	r2,256
1000be60:	10bfffc4 	addi	r2,r2,-1
1000be64:	11809f36 	bltu	r2,r6,1000c0e4 <__udivdi3+0x5a0>
1000be68:	00800404 	movi	r2,16
1000be6c:	003f4c06 	br	1000bba0 <__alt_data_end+0xf800bba0>
1000be70:	3dce983a 	sll	r7,r7,r23
1000be74:	30b8d83a 	srl	fp,r6,r2
1000be78:	80a2d83a 	srl	r17,r16,r2
1000be7c:	35cc983a 	sll	r6,r6,r23
1000be80:	3f38b03a 	or	fp,r7,fp
1000be84:	e024d43a 	srli	r18,fp,16
1000be88:	9884d83a 	srl	r2,r19,r2
1000be8c:	85e0983a 	sll	r16,r16,r23
1000be90:	8809883a 	mov	r4,r17
1000be94:	900b883a 	mov	r5,r18
1000be98:	d9800015 	stw	r6,0(sp)
1000be9c:	1420b03a 	or	r16,r2,r16
1000bea0:	000c8600 	call	1000c860 <__umodsi3>
1000bea4:	900b883a 	mov	r5,r18
1000bea8:	8809883a 	mov	r4,r17
1000beac:	1029883a 	mov	r20,r2
1000beb0:	e5bfffcc 	andi	r22,fp,65535
1000beb4:	000c7fc0 	call	1000c7fc <__udivsi3>
1000beb8:	100b883a 	mov	r5,r2
1000bebc:	b009883a 	mov	r4,r22
1000bec0:	102b883a 	mov	r21,r2
1000bec4:	000c8b80 	call	1000c8b8 <__mulsi3>
1000bec8:	a028943a 	slli	r20,r20,16
1000becc:	8006d43a 	srli	r3,r16,16
1000bed0:	1d06b03a 	or	r3,r3,r20
1000bed4:	1880042e 	bgeu	r3,r2,1000bee8 <__udivdi3+0x3a4>
1000bed8:	1f07883a 	add	r3,r3,fp
1000bedc:	a93fffc4 	addi	r4,r21,-1
1000bee0:	1f00892e 	bgeu	r3,fp,1000c108 <__udivdi3+0x5c4>
1000bee4:	202b883a 	mov	r21,r4
1000bee8:	18a3c83a 	sub	r17,r3,r2
1000beec:	8809883a 	mov	r4,r17
1000bef0:	900b883a 	mov	r5,r18
1000bef4:	000c8600 	call	1000c860 <__umodsi3>
1000bef8:	1029883a 	mov	r20,r2
1000befc:	8809883a 	mov	r4,r17
1000bf00:	900b883a 	mov	r5,r18
1000bf04:	a028943a 	slli	r20,r20,16
1000bf08:	000c7fc0 	call	1000c7fc <__udivsi3>
1000bf0c:	100b883a 	mov	r5,r2
1000bf10:	b009883a 	mov	r4,r22
1000bf14:	843fffcc 	andi	r16,r16,65535
1000bf18:	1023883a 	mov	r17,r2
1000bf1c:	8520b03a 	or	r16,r16,r20
1000bf20:	000c8b80 	call	1000c8b8 <__mulsi3>
1000bf24:	8080042e 	bgeu	r16,r2,1000bf38 <__udivdi3+0x3f4>
1000bf28:	8721883a 	add	r16,r16,fp
1000bf2c:	88ffffc4 	addi	r3,r17,-1
1000bf30:	8700712e 	bgeu	r16,fp,1000c0f8 <__udivdi3+0x5b4>
1000bf34:	1823883a 	mov	r17,r3
1000bf38:	a80e943a 	slli	r7,r21,16
1000bf3c:	d8c00017 	ldw	r3,0(sp)
1000bf40:	80a1c83a 	sub	r16,r16,r2
1000bf44:	3c64b03a 	or	r18,r7,r17
1000bf48:	1d3fffcc 	andi	r20,r3,65535
1000bf4c:	9022d43a 	srli	r17,r18,16
1000bf50:	95bfffcc 	andi	r22,r18,65535
1000bf54:	a00b883a 	mov	r5,r20
1000bf58:	b009883a 	mov	r4,r22
1000bf5c:	182ad43a 	srli	r21,r3,16
1000bf60:	000c8b80 	call	1000c8b8 <__mulsi3>
1000bf64:	a00b883a 	mov	r5,r20
1000bf68:	8809883a 	mov	r4,r17
1000bf6c:	1039883a 	mov	fp,r2
1000bf70:	000c8b80 	call	1000c8b8 <__mulsi3>
1000bf74:	8809883a 	mov	r4,r17
1000bf78:	a80b883a 	mov	r5,r21
1000bf7c:	1029883a 	mov	r20,r2
1000bf80:	000c8b80 	call	1000c8b8 <__mulsi3>
1000bf84:	a80b883a 	mov	r5,r21
1000bf88:	b009883a 	mov	r4,r22
1000bf8c:	1023883a 	mov	r17,r2
1000bf90:	000c8b80 	call	1000c8b8 <__mulsi3>
1000bf94:	e006d43a 	srli	r3,fp,16
1000bf98:	1505883a 	add	r2,r2,r20
1000bf9c:	1887883a 	add	r3,r3,r2
1000bfa0:	1d00022e 	bgeu	r3,r20,1000bfac <__udivdi3+0x468>
1000bfa4:	00800074 	movhi	r2,1
1000bfa8:	88a3883a 	add	r17,r17,r2
1000bfac:	1804d43a 	srli	r2,r3,16
1000bfb0:	1463883a 	add	r17,r2,r17
1000bfb4:	84404436 	bltu	r16,r17,1000c0c8 <__udivdi3+0x584>
1000bfb8:	84403e26 	beq	r16,r17,1000c0b4 <__udivdi3+0x570>
1000bfbc:	9005883a 	mov	r2,r18
1000bfc0:	0007883a 	mov	r3,zero
1000bfc4:	003f9106 	br	1000be0c <__alt_data_end+0xf800be0c>
1000bfc8:	88e2983a 	sll	r17,r17,r3
1000bfcc:	80aed83a 	srl	r23,r16,r2
1000bfd0:	80e0983a 	sll	r16,r16,r3
1000bfd4:	882ad43a 	srli	r21,r17,16
1000bfd8:	9884d83a 	srl	r2,r19,r2
1000bfdc:	b809883a 	mov	r4,r23
1000bfe0:	a80b883a 	mov	r5,r21
1000bfe4:	98e4983a 	sll	r18,r19,r3
1000bfe8:	142cb03a 	or	r22,r2,r16
1000bfec:	000c8600 	call	1000c860 <__umodsi3>
1000bff0:	b809883a 	mov	r4,r23
1000bff4:	a80b883a 	mov	r5,r21
1000bff8:	1027883a 	mov	r19,r2
1000bffc:	8d3fffcc 	andi	r20,r17,65535
1000c000:	000c7fc0 	call	1000c7fc <__udivsi3>
1000c004:	a009883a 	mov	r4,r20
1000c008:	100b883a 	mov	r5,r2
1000c00c:	102f883a 	mov	r23,r2
1000c010:	000c8b80 	call	1000c8b8 <__mulsi3>
1000c014:	9826943a 	slli	r19,r19,16
1000c018:	b008d43a 	srli	r4,r22,16
1000c01c:	24c8b03a 	or	r4,r4,r19
1000c020:	2080062e 	bgeu	r4,r2,1000c03c <__udivdi3+0x4f8>
1000c024:	2449883a 	add	r4,r4,r17
1000c028:	b8ffffc4 	addi	r3,r23,-1
1000c02c:	24403c36 	bltu	r4,r17,1000c120 <__udivdi3+0x5dc>
1000c030:	20803b2e 	bgeu	r4,r2,1000c120 <__udivdi3+0x5dc>
1000c034:	bdffff84 	addi	r23,r23,-2
1000c038:	2449883a 	add	r4,r4,r17
1000c03c:	20a1c83a 	sub	r16,r4,r2
1000c040:	a80b883a 	mov	r5,r21
1000c044:	8009883a 	mov	r4,r16
1000c048:	000c8600 	call	1000c860 <__umodsi3>
1000c04c:	a80b883a 	mov	r5,r21
1000c050:	8009883a 	mov	r4,r16
1000c054:	1027883a 	mov	r19,r2
1000c058:	000c7fc0 	call	1000c7fc <__udivsi3>
1000c05c:	a009883a 	mov	r4,r20
1000c060:	100b883a 	mov	r5,r2
1000c064:	9826943a 	slli	r19,r19,16
1000c068:	1039883a 	mov	fp,r2
1000c06c:	000c8b80 	call	1000c8b8 <__mulsi3>
1000c070:	b13fffcc 	andi	r4,r22,65535
1000c074:	24c8b03a 	or	r4,r4,r19
1000c078:	2080062e 	bgeu	r4,r2,1000c094 <__udivdi3+0x550>
1000c07c:	2449883a 	add	r4,r4,r17
1000c080:	e0ffffc4 	addi	r3,fp,-1
1000c084:	24402436 	bltu	r4,r17,1000c118 <__udivdi3+0x5d4>
1000c088:	2080232e 	bgeu	r4,r2,1000c118 <__udivdi3+0x5d4>
1000c08c:	e73fff84 	addi	fp,fp,-2
1000c090:	2449883a 	add	r4,r4,r17
1000c094:	b82e943a 	slli	r23,r23,16
1000c098:	20a1c83a 	sub	r16,r4,r2
1000c09c:	bf06b03a 	or	r3,r23,fp
1000c0a0:	003f2806 	br	1000bd44 <__alt_data_end+0xf800bd44>
1000c0a4:	2021883a 	mov	r16,r4
1000c0a8:	003f5306 	br	1000bdf8 <__alt_data_end+0xf800bdf8>
1000c0ac:	1821883a 	mov	r16,r3
1000c0b0:	003ef406 	br	1000bc84 <__alt_data_end+0xf800bc84>
1000c0b4:	1806943a 	slli	r3,r3,16
1000c0b8:	9de6983a 	sll	r19,r19,r23
1000c0bc:	e73fffcc 	andi	fp,fp,65535
1000c0c0:	1f07883a 	add	r3,r3,fp
1000c0c4:	98ffbd2e 	bgeu	r19,r3,1000bfbc <__alt_data_end+0xf800bfbc>
1000c0c8:	90bfffc4 	addi	r2,r18,-1
1000c0cc:	0007883a 	mov	r3,zero
1000c0d0:	003f4e06 	br	1000be0c <__alt_data_end+0xf800be0c>
1000c0d4:	00800604 	movi	r2,24
1000c0d8:	003ef506 	br	1000bcb0 <__alt_data_end+0xf800bcb0>
1000c0dc:	00800604 	movi	r2,24
1000c0e0:	003f0b06 	br	1000bd10 <__alt_data_end+0xf800bd10>
1000c0e4:	00800604 	movi	r2,24
1000c0e8:	003ead06 	br	1000bba0 <__alt_data_end+0xf800bba0>
1000c0ec:	0007883a 	mov	r3,zero
1000c0f0:	00800044 	movi	r2,1
1000c0f4:	003f4506 	br	1000be0c <__alt_data_end+0xf800be0c>
1000c0f8:	80bf8e2e 	bgeu	r16,r2,1000bf34 <__alt_data_end+0xf800bf34>
1000c0fc:	8c7fff84 	addi	r17,r17,-2
1000c100:	8721883a 	add	r16,r16,fp
1000c104:	003f8c06 	br	1000bf38 <__alt_data_end+0xf800bf38>
1000c108:	18bf762e 	bgeu	r3,r2,1000bee4 <__alt_data_end+0xf800bee4>
1000c10c:	ad7fff84 	addi	r21,r21,-2
1000c110:	1f07883a 	add	r3,r3,fp
1000c114:	003f7406 	br	1000bee8 <__alt_data_end+0xf800bee8>
1000c118:	1839883a 	mov	fp,r3
1000c11c:	003fdd06 	br	1000c094 <__alt_data_end+0xf800c094>
1000c120:	182f883a 	mov	r23,r3
1000c124:	003fc506 	br	1000c03c <__alt_data_end+0xf800c03c>
1000c128:	b5bfff84 	addi	r22,r22,-2
1000c12c:	3c4f883a 	add	r7,r7,r17
1000c130:	003f1a06 	br	1000bd9c <__alt_data_end+0xf800bd9c>
1000c134:	b5bfff84 	addi	r22,r22,-2
1000c138:	1c47883a 	add	r3,r3,r17
1000c13c:	003ebc06 	br	1000bc30 <__alt_data_end+0xf800bc30>

1000c140 <__umoddi3>:
1000c140:	defff304 	addi	sp,sp,-52
1000c144:	df000b15 	stw	fp,44(sp)
1000c148:	dc400415 	stw	r17,16(sp)
1000c14c:	dc000315 	stw	r16,12(sp)
1000c150:	dfc00c15 	stw	ra,48(sp)
1000c154:	ddc00a15 	stw	r23,40(sp)
1000c158:	dd800915 	stw	r22,36(sp)
1000c15c:	dd400815 	stw	r21,32(sp)
1000c160:	dd000715 	stw	r20,28(sp)
1000c164:	dcc00615 	stw	r19,24(sp)
1000c168:	dc800515 	stw	r18,20(sp)
1000c16c:	2021883a 	mov	r16,r4
1000c170:	2823883a 	mov	r17,r5
1000c174:	2839883a 	mov	fp,r5
1000c178:	3800401e 	bne	r7,zero,1000c27c <__umoddi3+0x13c>
1000c17c:	3027883a 	mov	r19,r6
1000c180:	2029883a 	mov	r20,r4
1000c184:	2980552e 	bgeu	r5,r6,1000c2dc <__umoddi3+0x19c>
1000c188:	00bfffd4 	movui	r2,65535
1000c18c:	1180a236 	bltu	r2,r6,1000c418 <__umoddi3+0x2d8>
1000c190:	01003fc4 	movi	r4,255
1000c194:	2189803a 	cmpltu	r4,r4,r6
1000c198:	200890fa 	slli	r4,r4,3
1000c19c:	3104d83a 	srl	r2,r6,r4
1000c1a0:	00c40074 	movhi	r3,4097
1000c1a4:	18c8ba04 	addi	r3,r3,8936
1000c1a8:	1885883a 	add	r2,r3,r2
1000c1ac:	10c00003 	ldbu	r3,0(r2)
1000c1b0:	00800804 	movi	r2,32
1000c1b4:	1909883a 	add	r4,r3,r4
1000c1b8:	1125c83a 	sub	r18,r2,r4
1000c1bc:	90000526 	beq	r18,zero,1000c1d4 <__umoddi3+0x94>
1000c1c0:	8ca2983a 	sll	r17,r17,r18
1000c1c4:	8108d83a 	srl	r4,r16,r4
1000c1c8:	34a6983a 	sll	r19,r6,r18
1000c1cc:	84a8983a 	sll	r20,r16,r18
1000c1d0:	2478b03a 	or	fp,r4,r17
1000c1d4:	982cd43a 	srli	r22,r19,16
1000c1d8:	e009883a 	mov	r4,fp
1000c1dc:	9dffffcc 	andi	r23,r19,65535
1000c1e0:	b00b883a 	mov	r5,r22
1000c1e4:	000c8600 	call	1000c860 <__umodsi3>
1000c1e8:	b00b883a 	mov	r5,r22
1000c1ec:	e009883a 	mov	r4,fp
1000c1f0:	102b883a 	mov	r21,r2
1000c1f4:	000c7fc0 	call	1000c7fc <__udivsi3>
1000c1f8:	100b883a 	mov	r5,r2
1000c1fc:	b809883a 	mov	r4,r23
1000c200:	000c8b80 	call	1000c8b8 <__mulsi3>
1000c204:	a82a943a 	slli	r21,r21,16
1000c208:	a006d43a 	srli	r3,r20,16
1000c20c:	1d46b03a 	or	r3,r3,r21
1000c210:	1880032e 	bgeu	r3,r2,1000c220 <__umoddi3+0xe0>
1000c214:	1cc7883a 	add	r3,r3,r19
1000c218:	1cc00136 	bltu	r3,r19,1000c220 <__umoddi3+0xe0>
1000c21c:	18813136 	bltu	r3,r2,1000c6e4 <__umoddi3+0x5a4>
1000c220:	18a1c83a 	sub	r16,r3,r2
1000c224:	b00b883a 	mov	r5,r22
1000c228:	8009883a 	mov	r4,r16
1000c22c:	000c8600 	call	1000c860 <__umodsi3>
1000c230:	b00b883a 	mov	r5,r22
1000c234:	8009883a 	mov	r4,r16
1000c238:	1023883a 	mov	r17,r2
1000c23c:	000c7fc0 	call	1000c7fc <__udivsi3>
1000c240:	100b883a 	mov	r5,r2
1000c244:	b809883a 	mov	r4,r23
1000c248:	8822943a 	slli	r17,r17,16
1000c24c:	000c8b80 	call	1000c8b8 <__mulsi3>
1000c250:	a0ffffcc 	andi	r3,r20,65535
1000c254:	1c46b03a 	or	r3,r3,r17
1000c258:	1880042e 	bgeu	r3,r2,1000c26c <__umoddi3+0x12c>
1000c25c:	1cc7883a 	add	r3,r3,r19
1000c260:	1cc00236 	bltu	r3,r19,1000c26c <__umoddi3+0x12c>
1000c264:	1880012e 	bgeu	r3,r2,1000c26c <__umoddi3+0x12c>
1000c268:	1cc7883a 	add	r3,r3,r19
1000c26c:	1885c83a 	sub	r2,r3,r2
1000c270:	1484d83a 	srl	r2,r2,r18
1000c274:	0007883a 	mov	r3,zero
1000c278:	00005306 	br	1000c3c8 <__umoddi3+0x288>
1000c27c:	29c05036 	bltu	r5,r7,1000c3c0 <__umoddi3+0x280>
1000c280:	00bfffd4 	movui	r2,65535
1000c284:	11c05c2e 	bgeu	r2,r7,1000c3f8 <__umoddi3+0x2b8>
1000c288:	00804034 	movhi	r2,256
1000c28c:	10bfffc4 	addi	r2,r2,-1
1000c290:	11c10636 	bltu	r2,r7,1000c6ac <__umoddi3+0x56c>
1000c294:	01000404 	movi	r4,16
1000c298:	3904d83a 	srl	r2,r7,r4
1000c29c:	00c40074 	movhi	r3,4097
1000c2a0:	18c8ba04 	addi	r3,r3,8936
1000c2a4:	1885883a 	add	r2,r3,r2
1000c2a8:	14c00003 	ldbu	r19,0(r2)
1000c2ac:	00c00804 	movi	r3,32
1000c2b0:	9927883a 	add	r19,r19,r4
1000c2b4:	1ce9c83a 	sub	r20,r3,r19
1000c2b8:	a0005c1e 	bne	r20,zero,1000c42c <__umoddi3+0x2ec>
1000c2bc:	3c400136 	bltu	r7,r17,1000c2c4 <__umoddi3+0x184>
1000c2c0:	81810a36 	bltu	r16,r6,1000c6ec <__umoddi3+0x5ac>
1000c2c4:	8185c83a 	sub	r2,r16,r6
1000c2c8:	89e3c83a 	sub	r17,r17,r7
1000c2cc:	8089803a 	cmpltu	r4,r16,r2
1000c2d0:	8939c83a 	sub	fp,r17,r4
1000c2d4:	e007883a 	mov	r3,fp
1000c2d8:	00003b06 	br	1000c3c8 <__umoddi3+0x288>
1000c2dc:	3000041e 	bne	r6,zero,1000c2f0 <__umoddi3+0x1b0>
1000c2e0:	000b883a 	mov	r5,zero
1000c2e4:	01000044 	movi	r4,1
1000c2e8:	000c7fc0 	call	1000c7fc <__udivsi3>
1000c2ec:	1027883a 	mov	r19,r2
1000c2f0:	00bfffd4 	movui	r2,65535
1000c2f4:	14c0442e 	bgeu	r2,r19,1000c408 <__umoddi3+0x2c8>
1000c2f8:	00804034 	movhi	r2,256
1000c2fc:	10bfffc4 	addi	r2,r2,-1
1000c300:	14c0ec36 	bltu	r2,r19,1000c6b4 <__umoddi3+0x574>
1000c304:	00800404 	movi	r2,16
1000c308:	9886d83a 	srl	r3,r19,r2
1000c30c:	01040074 	movhi	r4,4097
1000c310:	2108ba04 	addi	r4,r4,8936
1000c314:	20c7883a 	add	r3,r4,r3
1000c318:	18c00003 	ldbu	r3,0(r3)
1000c31c:	1887883a 	add	r3,r3,r2
1000c320:	00800804 	movi	r2,32
1000c324:	10e5c83a 	sub	r18,r2,r3
1000c328:	9000ab1e 	bne	r18,zero,1000c5d8 <__umoddi3+0x498>
1000c32c:	982cd43a 	srli	r22,r19,16
1000c330:	8ce3c83a 	sub	r17,r17,r19
1000c334:	9dffffcc 	andi	r23,r19,65535
1000c338:	b00b883a 	mov	r5,r22
1000c33c:	8809883a 	mov	r4,r17
1000c340:	000c8600 	call	1000c860 <__umodsi3>
1000c344:	b00b883a 	mov	r5,r22
1000c348:	8809883a 	mov	r4,r17
1000c34c:	102b883a 	mov	r21,r2
1000c350:	000c7fc0 	call	1000c7fc <__udivsi3>
1000c354:	b80b883a 	mov	r5,r23
1000c358:	1009883a 	mov	r4,r2
1000c35c:	000c8b80 	call	1000c8b8 <__mulsi3>
1000c360:	a82a943a 	slli	r21,r21,16
1000c364:	a006d43a 	srli	r3,r20,16
1000c368:	1d46b03a 	or	r3,r3,r21
1000c36c:	1880042e 	bgeu	r3,r2,1000c380 <__umoddi3+0x240>
1000c370:	1cc7883a 	add	r3,r3,r19
1000c374:	1cc00236 	bltu	r3,r19,1000c380 <__umoddi3+0x240>
1000c378:	1880012e 	bgeu	r3,r2,1000c380 <__umoddi3+0x240>
1000c37c:	1cc7883a 	add	r3,r3,r19
1000c380:	18a1c83a 	sub	r16,r3,r2
1000c384:	b00b883a 	mov	r5,r22
1000c388:	8009883a 	mov	r4,r16
1000c38c:	000c8600 	call	1000c860 <__umodsi3>
1000c390:	1023883a 	mov	r17,r2
1000c394:	b00b883a 	mov	r5,r22
1000c398:	8009883a 	mov	r4,r16
1000c39c:	000c7fc0 	call	1000c7fc <__udivsi3>
1000c3a0:	8822943a 	slli	r17,r17,16
1000c3a4:	b80b883a 	mov	r5,r23
1000c3a8:	1009883a 	mov	r4,r2
1000c3ac:	000c8b80 	call	1000c8b8 <__mulsi3>
1000c3b0:	a53fffcc 	andi	r20,r20,65535
1000c3b4:	a446b03a 	or	r3,r20,r17
1000c3b8:	18bfac2e 	bgeu	r3,r2,1000c26c <__alt_data_end+0xf800c26c>
1000c3bc:	003fa706 	br	1000c25c <__alt_data_end+0xf800c25c>
1000c3c0:	2005883a 	mov	r2,r4
1000c3c4:	2807883a 	mov	r3,r5
1000c3c8:	dfc00c17 	ldw	ra,48(sp)
1000c3cc:	df000b17 	ldw	fp,44(sp)
1000c3d0:	ddc00a17 	ldw	r23,40(sp)
1000c3d4:	dd800917 	ldw	r22,36(sp)
1000c3d8:	dd400817 	ldw	r21,32(sp)
1000c3dc:	dd000717 	ldw	r20,28(sp)
1000c3e0:	dcc00617 	ldw	r19,24(sp)
1000c3e4:	dc800517 	ldw	r18,20(sp)
1000c3e8:	dc400417 	ldw	r17,16(sp)
1000c3ec:	dc000317 	ldw	r16,12(sp)
1000c3f0:	dec00d04 	addi	sp,sp,52
1000c3f4:	f800283a 	ret
1000c3f8:	04c03fc4 	movi	r19,255
1000c3fc:	99c9803a 	cmpltu	r4,r19,r7
1000c400:	200890fa 	slli	r4,r4,3
1000c404:	003fa406 	br	1000c298 <__alt_data_end+0xf800c298>
1000c408:	00803fc4 	movi	r2,255
1000c40c:	14c5803a 	cmpltu	r2,r2,r19
1000c410:	100490fa 	slli	r2,r2,3
1000c414:	003fbc06 	br	1000c308 <__alt_data_end+0xf800c308>
1000c418:	00804034 	movhi	r2,256
1000c41c:	10bfffc4 	addi	r2,r2,-1
1000c420:	1180a636 	bltu	r2,r6,1000c6bc <__umoddi3+0x57c>
1000c424:	01000404 	movi	r4,16
1000c428:	003f5c06 	br	1000c19c <__alt_data_end+0xf800c19c>
1000c42c:	3d0e983a 	sll	r7,r7,r20
1000c430:	34ead83a 	srl	r21,r6,r19
1000c434:	8cc6d83a 	srl	r3,r17,r19
1000c438:	8d10983a 	sll	r8,r17,r20
1000c43c:	3d6ab03a 	or	r21,r7,r21
1000c440:	a82cd43a 	srli	r22,r21,16
1000c444:	84e2d83a 	srl	r17,r16,r19
1000c448:	1809883a 	mov	r4,r3
1000c44c:	b00b883a 	mov	r5,r22
1000c450:	8a22b03a 	or	r17,r17,r8
1000c454:	3524983a 	sll	r18,r6,r20
1000c458:	dc400015 	stw	r17,0(sp)
1000c45c:	d8c00115 	stw	r3,4(sp)
1000c460:	000c8600 	call	1000c860 <__umodsi3>
1000c464:	d8c00117 	ldw	r3,4(sp)
1000c468:	b00b883a 	mov	r5,r22
1000c46c:	1039883a 	mov	fp,r2
1000c470:	1809883a 	mov	r4,r3
1000c474:	000c7fc0 	call	1000c7fc <__udivsi3>
1000c478:	adffffcc 	andi	r23,r21,65535
1000c47c:	100b883a 	mov	r5,r2
1000c480:	b809883a 	mov	r4,r23
1000c484:	1023883a 	mov	r17,r2
1000c488:	000c8b80 	call	1000c8b8 <__mulsi3>
1000c48c:	d9400017 	ldw	r5,0(sp)
1000c490:	e008943a 	slli	r4,fp,16
1000c494:	8520983a 	sll	r16,r16,r20
1000c498:	2806d43a 	srli	r3,r5,16
1000c49c:	1906b03a 	or	r3,r3,r4
1000c4a0:	1880042e 	bgeu	r3,r2,1000c4b4 <__umoddi3+0x374>
1000c4a4:	1d47883a 	add	r3,r3,r21
1000c4a8:	893fffc4 	addi	r4,r17,-1
1000c4ac:	1d40892e 	bgeu	r3,r21,1000c6d4 <__umoddi3+0x594>
1000c4b0:	2023883a 	mov	r17,r4
1000c4b4:	18b9c83a 	sub	fp,r3,r2
1000c4b8:	b00b883a 	mov	r5,r22
1000c4bc:	e009883a 	mov	r4,fp
1000c4c0:	000c8600 	call	1000c860 <__umodsi3>
1000c4c4:	b00b883a 	mov	r5,r22
1000c4c8:	e009883a 	mov	r4,fp
1000c4cc:	d8800215 	stw	r2,8(sp)
1000c4d0:	000c7fc0 	call	1000c7fc <__udivsi3>
1000c4d4:	100b883a 	mov	r5,r2
1000c4d8:	b809883a 	mov	r4,r23
1000c4dc:	102d883a 	mov	r22,r2
1000c4e0:	000c8b80 	call	1000c8b8 <__mulsi3>
1000c4e4:	d9800217 	ldw	r6,8(sp)
1000c4e8:	d8c00017 	ldw	r3,0(sp)
1000c4ec:	300c943a 	slli	r6,r6,16
1000c4f0:	1a3fffcc 	andi	r8,r3,65535
1000c4f4:	4190b03a 	or	r8,r8,r6
1000c4f8:	4080042e 	bgeu	r8,r2,1000c50c <__umoddi3+0x3cc>
1000c4fc:	4551883a 	add	r8,r8,r21
1000c500:	b0ffffc4 	addi	r3,r22,-1
1000c504:	45406f2e 	bgeu	r8,r21,1000c6c4 <__umoddi3+0x584>
1000c508:	182d883a 	mov	r22,r3
1000c50c:	880e943a 	slli	r7,r17,16
1000c510:	9006d43a 	srli	r3,r18,16
1000c514:	91bfffcc 	andi	r6,r18,65535
1000c518:	3dacb03a 	or	r22,r7,r22
1000c51c:	b02ed43a 	srli	r23,r22,16
1000c520:	b5bfffcc 	andi	r22,r22,65535
1000c524:	300b883a 	mov	r5,r6
1000c528:	b009883a 	mov	r4,r22
1000c52c:	40a3c83a 	sub	r17,r8,r2
1000c530:	d8c00115 	stw	r3,4(sp)
1000c534:	d9800215 	stw	r6,8(sp)
1000c538:	000c8b80 	call	1000c8b8 <__mulsi3>
1000c53c:	d9800217 	ldw	r6,8(sp)
1000c540:	b809883a 	mov	r4,r23
1000c544:	1039883a 	mov	fp,r2
1000c548:	300b883a 	mov	r5,r6
1000c54c:	000c8b80 	call	1000c8b8 <__mulsi3>
1000c550:	d8c00117 	ldw	r3,4(sp)
1000c554:	b809883a 	mov	r4,r23
1000c558:	d8800215 	stw	r2,8(sp)
1000c55c:	180b883a 	mov	r5,r3
1000c560:	000c8b80 	call	1000c8b8 <__mulsi3>
1000c564:	d8c00117 	ldw	r3,4(sp)
1000c568:	b009883a 	mov	r4,r22
1000c56c:	102f883a 	mov	r23,r2
1000c570:	180b883a 	mov	r5,r3
1000c574:	000c8b80 	call	1000c8b8 <__mulsi3>
1000c578:	d9800217 	ldw	r6,8(sp)
1000c57c:	e006d43a 	srli	r3,fp,16
1000c580:	1185883a 	add	r2,r2,r6
1000c584:	1885883a 	add	r2,r3,r2
1000c588:	1180022e 	bgeu	r2,r6,1000c594 <__umoddi3+0x454>
1000c58c:	00c00074 	movhi	r3,1
1000c590:	b8ef883a 	add	r23,r23,r3
1000c594:	1006d43a 	srli	r3,r2,16
1000c598:	1004943a 	slli	r2,r2,16
1000c59c:	e73fffcc 	andi	fp,fp,65535
1000c5a0:	1dc7883a 	add	r3,r3,r23
1000c5a4:	1739883a 	add	fp,r2,fp
1000c5a8:	88c03a36 	bltu	r17,r3,1000c694 <__umoddi3+0x554>
1000c5ac:	88c05126 	beq	r17,r3,1000c6f4 <__umoddi3+0x5b4>
1000c5b0:	88c9c83a 	sub	r4,r17,r3
1000c5b4:	e00f883a 	mov	r7,fp
1000c5b8:	81cfc83a 	sub	r7,r16,r7
1000c5bc:	81c7803a 	cmpltu	r3,r16,r7
1000c5c0:	20c7c83a 	sub	r3,r4,r3
1000c5c4:	1cc4983a 	sll	r2,r3,r19
1000c5c8:	3d0ed83a 	srl	r7,r7,r20
1000c5cc:	1d06d83a 	srl	r3,r3,r20
1000c5d0:	11c4b03a 	or	r2,r2,r7
1000c5d4:	003f7c06 	br	1000c3c8 <__alt_data_end+0xf800c3c8>
1000c5d8:	9ca6983a 	sll	r19,r19,r18
1000c5dc:	88f8d83a 	srl	fp,r17,r3
1000c5e0:	80c4d83a 	srl	r2,r16,r3
1000c5e4:	982cd43a 	srli	r22,r19,16
1000c5e8:	8ca2983a 	sll	r17,r17,r18
1000c5ec:	e009883a 	mov	r4,fp
1000c5f0:	b00b883a 	mov	r5,r22
1000c5f4:	146ab03a 	or	r21,r2,r17
1000c5f8:	000c8600 	call	1000c860 <__umodsi3>
1000c5fc:	b00b883a 	mov	r5,r22
1000c600:	e009883a 	mov	r4,fp
1000c604:	1029883a 	mov	r20,r2
1000c608:	9dffffcc 	andi	r23,r19,65535
1000c60c:	000c7fc0 	call	1000c7fc <__udivsi3>
1000c610:	b809883a 	mov	r4,r23
1000c614:	100b883a 	mov	r5,r2
1000c618:	000c8b80 	call	1000c8b8 <__mulsi3>
1000c61c:	a008943a 	slli	r4,r20,16
1000c620:	a806d43a 	srli	r3,r21,16
1000c624:	84a8983a 	sll	r20,r16,r18
1000c628:	1906b03a 	or	r3,r3,r4
1000c62c:	1880042e 	bgeu	r3,r2,1000c640 <__umoddi3+0x500>
1000c630:	1cc7883a 	add	r3,r3,r19
1000c634:	1cc00236 	bltu	r3,r19,1000c640 <__umoddi3+0x500>
1000c638:	1880012e 	bgeu	r3,r2,1000c640 <__umoddi3+0x500>
1000c63c:	1cc7883a 	add	r3,r3,r19
1000c640:	18a3c83a 	sub	r17,r3,r2
1000c644:	b00b883a 	mov	r5,r22
1000c648:	8809883a 	mov	r4,r17
1000c64c:	000c8600 	call	1000c860 <__umodsi3>
1000c650:	b00b883a 	mov	r5,r22
1000c654:	8809883a 	mov	r4,r17
1000c658:	1021883a 	mov	r16,r2
1000c65c:	000c7fc0 	call	1000c7fc <__udivsi3>
1000c660:	100b883a 	mov	r5,r2
1000c664:	b809883a 	mov	r4,r23
1000c668:	8020943a 	slli	r16,r16,16
1000c66c:	000c8b80 	call	1000c8b8 <__mulsi3>
1000c670:	a8ffffcc 	andi	r3,r21,65535
1000c674:	1c06b03a 	or	r3,r3,r16
1000c678:	1880042e 	bgeu	r3,r2,1000c68c <__umoddi3+0x54c>
1000c67c:	1cc7883a 	add	r3,r3,r19
1000c680:	1cc00236 	bltu	r3,r19,1000c68c <__umoddi3+0x54c>
1000c684:	1880012e 	bgeu	r3,r2,1000c68c <__umoddi3+0x54c>
1000c688:	1cc7883a 	add	r3,r3,r19
1000c68c:	18a3c83a 	sub	r17,r3,r2
1000c690:	003f2906 	br	1000c338 <__alt_data_end+0xf800c338>
1000c694:	e48fc83a 	sub	r7,fp,r18
1000c698:	1d49c83a 	sub	r4,r3,r21
1000c69c:	e1f9803a 	cmpltu	fp,fp,r7
1000c6a0:	2739c83a 	sub	fp,r4,fp
1000c6a4:	8f09c83a 	sub	r4,r17,fp
1000c6a8:	003fc306 	br	1000c5b8 <__alt_data_end+0xf800c5b8>
1000c6ac:	01000604 	movi	r4,24
1000c6b0:	003ef906 	br	1000c298 <__alt_data_end+0xf800c298>
1000c6b4:	00800604 	movi	r2,24
1000c6b8:	003f1306 	br	1000c308 <__alt_data_end+0xf800c308>
1000c6bc:	01000604 	movi	r4,24
1000c6c0:	003eb606 	br	1000c19c <__alt_data_end+0xf800c19c>
1000c6c4:	40bf902e 	bgeu	r8,r2,1000c508 <__alt_data_end+0xf800c508>
1000c6c8:	b5bfff84 	addi	r22,r22,-2
1000c6cc:	4551883a 	add	r8,r8,r21
1000c6d0:	003f8e06 	br	1000c50c <__alt_data_end+0xf800c50c>
1000c6d4:	18bf762e 	bgeu	r3,r2,1000c4b0 <__alt_data_end+0xf800c4b0>
1000c6d8:	8c7fff84 	addi	r17,r17,-2
1000c6dc:	1d47883a 	add	r3,r3,r21
1000c6e0:	003f7406 	br	1000c4b4 <__alt_data_end+0xf800c4b4>
1000c6e4:	1cc7883a 	add	r3,r3,r19
1000c6e8:	003ecd06 	br	1000c220 <__alt_data_end+0xf800c220>
1000c6ec:	8005883a 	mov	r2,r16
1000c6f0:	003ef806 	br	1000c2d4 <__alt_data_end+0xf800c2d4>
1000c6f4:	873fe736 	bltu	r16,fp,1000c694 <__alt_data_end+0xf800c694>
1000c6f8:	e00f883a 	mov	r7,fp
1000c6fc:	0009883a 	mov	r4,zero
1000c700:	003fad06 	br	1000c5b8 <__alt_data_end+0xf800c5b8>

1000c704 <__divsi3>:
1000c704:	20001b16 	blt	r4,zero,1000c774 <__divsi3+0x70>
1000c708:	000f883a 	mov	r7,zero
1000c70c:	28001616 	blt	r5,zero,1000c768 <__divsi3+0x64>
1000c710:	200d883a 	mov	r6,r4
1000c714:	29001a2e 	bgeu	r5,r4,1000c780 <__divsi3+0x7c>
1000c718:	00800804 	movi	r2,32
1000c71c:	00c00044 	movi	r3,1
1000c720:	00000106 	br	1000c728 <__divsi3+0x24>
1000c724:	10000d26 	beq	r2,zero,1000c75c <__divsi3+0x58>
1000c728:	294b883a 	add	r5,r5,r5
1000c72c:	10bfffc4 	addi	r2,r2,-1
1000c730:	18c7883a 	add	r3,r3,r3
1000c734:	293ffb36 	bltu	r5,r4,1000c724 <__alt_data_end+0xf800c724>
1000c738:	0005883a 	mov	r2,zero
1000c73c:	18000726 	beq	r3,zero,1000c75c <__divsi3+0x58>
1000c740:	0005883a 	mov	r2,zero
1000c744:	31400236 	bltu	r6,r5,1000c750 <__divsi3+0x4c>
1000c748:	314dc83a 	sub	r6,r6,r5
1000c74c:	10c4b03a 	or	r2,r2,r3
1000c750:	1806d07a 	srli	r3,r3,1
1000c754:	280ad07a 	srli	r5,r5,1
1000c758:	183ffa1e 	bne	r3,zero,1000c744 <__alt_data_end+0xf800c744>
1000c75c:	38000126 	beq	r7,zero,1000c764 <__divsi3+0x60>
1000c760:	0085c83a 	sub	r2,zero,r2
1000c764:	f800283a 	ret
1000c768:	014bc83a 	sub	r5,zero,r5
1000c76c:	39c0005c 	xori	r7,r7,1
1000c770:	003fe706 	br	1000c710 <__alt_data_end+0xf800c710>
1000c774:	0109c83a 	sub	r4,zero,r4
1000c778:	01c00044 	movi	r7,1
1000c77c:	003fe306 	br	1000c70c <__alt_data_end+0xf800c70c>
1000c780:	00c00044 	movi	r3,1
1000c784:	003fee06 	br	1000c740 <__alt_data_end+0xf800c740>

1000c788 <__modsi3>:
1000c788:	20001716 	blt	r4,zero,1000c7e8 <__modsi3+0x60>
1000c78c:	000f883a 	mov	r7,zero
1000c790:	2005883a 	mov	r2,r4
1000c794:	28001216 	blt	r5,zero,1000c7e0 <__modsi3+0x58>
1000c798:	2900162e 	bgeu	r5,r4,1000c7f4 <__modsi3+0x6c>
1000c79c:	01800804 	movi	r6,32
1000c7a0:	00c00044 	movi	r3,1
1000c7a4:	00000106 	br	1000c7ac <__modsi3+0x24>
1000c7a8:	30000a26 	beq	r6,zero,1000c7d4 <__modsi3+0x4c>
1000c7ac:	294b883a 	add	r5,r5,r5
1000c7b0:	31bfffc4 	addi	r6,r6,-1
1000c7b4:	18c7883a 	add	r3,r3,r3
1000c7b8:	293ffb36 	bltu	r5,r4,1000c7a8 <__alt_data_end+0xf800c7a8>
1000c7bc:	18000526 	beq	r3,zero,1000c7d4 <__modsi3+0x4c>
1000c7c0:	1806d07a 	srli	r3,r3,1
1000c7c4:	11400136 	bltu	r2,r5,1000c7cc <__modsi3+0x44>
1000c7c8:	1145c83a 	sub	r2,r2,r5
1000c7cc:	280ad07a 	srli	r5,r5,1
1000c7d0:	183ffb1e 	bne	r3,zero,1000c7c0 <__alt_data_end+0xf800c7c0>
1000c7d4:	38000126 	beq	r7,zero,1000c7dc <__modsi3+0x54>
1000c7d8:	0085c83a 	sub	r2,zero,r2
1000c7dc:	f800283a 	ret
1000c7e0:	014bc83a 	sub	r5,zero,r5
1000c7e4:	003fec06 	br	1000c798 <__alt_data_end+0xf800c798>
1000c7e8:	0109c83a 	sub	r4,zero,r4
1000c7ec:	01c00044 	movi	r7,1
1000c7f0:	003fe706 	br	1000c790 <__alt_data_end+0xf800c790>
1000c7f4:	00c00044 	movi	r3,1
1000c7f8:	003ff106 	br	1000c7c0 <__alt_data_end+0xf800c7c0>

1000c7fc <__udivsi3>:
1000c7fc:	200d883a 	mov	r6,r4
1000c800:	2900152e 	bgeu	r5,r4,1000c858 <__udivsi3+0x5c>
1000c804:	28001416 	blt	r5,zero,1000c858 <__udivsi3+0x5c>
1000c808:	00800804 	movi	r2,32
1000c80c:	00c00044 	movi	r3,1
1000c810:	00000206 	br	1000c81c <__udivsi3+0x20>
1000c814:	10000e26 	beq	r2,zero,1000c850 <__udivsi3+0x54>
1000c818:	28000516 	blt	r5,zero,1000c830 <__udivsi3+0x34>
1000c81c:	294b883a 	add	r5,r5,r5
1000c820:	10bfffc4 	addi	r2,r2,-1
1000c824:	18c7883a 	add	r3,r3,r3
1000c828:	293ffa36 	bltu	r5,r4,1000c814 <__alt_data_end+0xf800c814>
1000c82c:	18000826 	beq	r3,zero,1000c850 <__udivsi3+0x54>
1000c830:	0005883a 	mov	r2,zero
1000c834:	31400236 	bltu	r6,r5,1000c840 <__udivsi3+0x44>
1000c838:	314dc83a 	sub	r6,r6,r5
1000c83c:	10c4b03a 	or	r2,r2,r3
1000c840:	1806d07a 	srli	r3,r3,1
1000c844:	280ad07a 	srli	r5,r5,1
1000c848:	183ffa1e 	bne	r3,zero,1000c834 <__alt_data_end+0xf800c834>
1000c84c:	f800283a 	ret
1000c850:	0005883a 	mov	r2,zero
1000c854:	f800283a 	ret
1000c858:	00c00044 	movi	r3,1
1000c85c:	003ff406 	br	1000c830 <__alt_data_end+0xf800c830>

1000c860 <__umodsi3>:
1000c860:	2005883a 	mov	r2,r4
1000c864:	2900122e 	bgeu	r5,r4,1000c8b0 <__umodsi3+0x50>
1000c868:	28001116 	blt	r5,zero,1000c8b0 <__umodsi3+0x50>
1000c86c:	01800804 	movi	r6,32
1000c870:	00c00044 	movi	r3,1
1000c874:	00000206 	br	1000c880 <__umodsi3+0x20>
1000c878:	30000c26 	beq	r6,zero,1000c8ac <__umodsi3+0x4c>
1000c87c:	28000516 	blt	r5,zero,1000c894 <__umodsi3+0x34>
1000c880:	294b883a 	add	r5,r5,r5
1000c884:	31bfffc4 	addi	r6,r6,-1
1000c888:	18c7883a 	add	r3,r3,r3
1000c88c:	293ffa36 	bltu	r5,r4,1000c878 <__alt_data_end+0xf800c878>
1000c890:	18000626 	beq	r3,zero,1000c8ac <__umodsi3+0x4c>
1000c894:	1806d07a 	srli	r3,r3,1
1000c898:	11400136 	bltu	r2,r5,1000c8a0 <__umodsi3+0x40>
1000c89c:	1145c83a 	sub	r2,r2,r5
1000c8a0:	280ad07a 	srli	r5,r5,1
1000c8a4:	183ffb1e 	bne	r3,zero,1000c894 <__alt_data_end+0xf800c894>
1000c8a8:	f800283a 	ret
1000c8ac:	f800283a 	ret
1000c8b0:	00c00044 	movi	r3,1
1000c8b4:	003ff706 	br	1000c894 <__alt_data_end+0xf800c894>

1000c8b8 <__mulsi3>:
1000c8b8:	0005883a 	mov	r2,zero
1000c8bc:	20000726 	beq	r4,zero,1000c8dc <__mulsi3+0x24>
1000c8c0:	20c0004c 	andi	r3,r4,1
1000c8c4:	2008d07a 	srli	r4,r4,1
1000c8c8:	18000126 	beq	r3,zero,1000c8d0 <__mulsi3+0x18>
1000c8cc:	1145883a 	add	r2,r2,r5
1000c8d0:	294b883a 	add	r5,r5,r5
1000c8d4:	203ffa1e 	bne	r4,zero,1000c8c0 <__alt_data_end+0xf800c8c0>
1000c8d8:	f800283a 	ret
1000c8dc:	f800283a 	ret

1000c8e0 <__adddf3>:
1000c8e0:	02c00434 	movhi	r11,16
1000c8e4:	5affffc4 	addi	r11,r11,-1
1000c8e8:	2806d7fa 	srli	r3,r5,31
1000c8ec:	2ad4703a 	and	r10,r5,r11
1000c8f0:	3ad2703a 	and	r9,r7,r11
1000c8f4:	3804d53a 	srli	r2,r7,20
1000c8f8:	3018d77a 	srli	r12,r6,29
1000c8fc:	280ad53a 	srli	r5,r5,20
1000c900:	501490fa 	slli	r10,r10,3
1000c904:	2010d77a 	srli	r8,r4,29
1000c908:	481290fa 	slli	r9,r9,3
1000c90c:	380ed7fa 	srli	r7,r7,31
1000c910:	defffb04 	addi	sp,sp,-20
1000c914:	dc800215 	stw	r18,8(sp)
1000c918:	dc400115 	stw	r17,4(sp)
1000c91c:	dc000015 	stw	r16,0(sp)
1000c920:	dfc00415 	stw	ra,16(sp)
1000c924:	dcc00315 	stw	r19,12(sp)
1000c928:	1c803fcc 	andi	r18,r3,255
1000c92c:	2c01ffcc 	andi	r16,r5,2047
1000c930:	5210b03a 	or	r8,r10,r8
1000c934:	202290fa 	slli	r17,r4,3
1000c938:	1081ffcc 	andi	r2,r2,2047
1000c93c:	4b12b03a 	or	r9,r9,r12
1000c940:	300c90fa 	slli	r6,r6,3
1000c944:	91c07526 	beq	r18,r7,1000cb1c <__adddf3+0x23c>
1000c948:	8087c83a 	sub	r3,r16,r2
1000c94c:	00c0ab0e 	bge	zero,r3,1000cbfc <__adddf3+0x31c>
1000c950:	10002a1e 	bne	r2,zero,1000c9fc <__adddf3+0x11c>
1000c954:	4984b03a 	or	r2,r9,r6
1000c958:	1000961e 	bne	r2,zero,1000cbb4 <__adddf3+0x2d4>
1000c95c:	888001cc 	andi	r2,r17,7
1000c960:	10000726 	beq	r2,zero,1000c980 <__adddf3+0xa0>
1000c964:	888003cc 	andi	r2,r17,15
1000c968:	00c00104 	movi	r3,4
1000c96c:	10c00426 	beq	r2,r3,1000c980 <__adddf3+0xa0>
1000c970:	88c7883a 	add	r3,r17,r3
1000c974:	1c63803a 	cmpltu	r17,r3,r17
1000c978:	4451883a 	add	r8,r8,r17
1000c97c:	1823883a 	mov	r17,r3
1000c980:	4080202c 	andhi	r2,r8,128
1000c984:	10005926 	beq	r2,zero,1000caec <__adddf3+0x20c>
1000c988:	84000044 	addi	r16,r16,1
1000c98c:	0081ffc4 	movi	r2,2047
1000c990:	8080ba26 	beq	r16,r2,1000cc7c <__adddf3+0x39c>
1000c994:	00bfe034 	movhi	r2,65408
1000c998:	10bfffc4 	addi	r2,r2,-1
1000c99c:	4090703a 	and	r8,r8,r2
1000c9a0:	4004977a 	slli	r2,r8,29
1000c9a4:	4010927a 	slli	r8,r8,9
1000c9a8:	8822d0fa 	srli	r17,r17,3
1000c9ac:	8401ffcc 	andi	r16,r16,2047
1000c9b0:	4010d33a 	srli	r8,r8,12
1000c9b4:	9007883a 	mov	r3,r18
1000c9b8:	1444b03a 	or	r2,r2,r17
1000c9bc:	8401ffcc 	andi	r16,r16,2047
1000c9c0:	8020953a 	slli	r16,r16,20
1000c9c4:	18c03fcc 	andi	r3,r3,255
1000c9c8:	01000434 	movhi	r4,16
1000c9cc:	213fffc4 	addi	r4,r4,-1
1000c9d0:	180697fa 	slli	r3,r3,31
1000c9d4:	4110703a 	and	r8,r8,r4
1000c9d8:	4410b03a 	or	r8,r8,r16
1000c9dc:	40c6b03a 	or	r3,r8,r3
1000c9e0:	dfc00417 	ldw	ra,16(sp)
1000c9e4:	dcc00317 	ldw	r19,12(sp)
1000c9e8:	dc800217 	ldw	r18,8(sp)
1000c9ec:	dc400117 	ldw	r17,4(sp)
1000c9f0:	dc000017 	ldw	r16,0(sp)
1000c9f4:	dec00504 	addi	sp,sp,20
1000c9f8:	f800283a 	ret
1000c9fc:	0081ffc4 	movi	r2,2047
1000ca00:	80bfd626 	beq	r16,r2,1000c95c <__alt_data_end+0xf800c95c>
1000ca04:	4a402034 	orhi	r9,r9,128
1000ca08:	00800e04 	movi	r2,56
1000ca0c:	10c09f16 	blt	r2,r3,1000cc8c <__adddf3+0x3ac>
1000ca10:	008007c4 	movi	r2,31
1000ca14:	10c0c216 	blt	r2,r3,1000cd20 <__adddf3+0x440>
1000ca18:	00800804 	movi	r2,32
1000ca1c:	10c5c83a 	sub	r2,r2,r3
1000ca20:	488a983a 	sll	r5,r9,r2
1000ca24:	30c8d83a 	srl	r4,r6,r3
1000ca28:	3084983a 	sll	r2,r6,r2
1000ca2c:	48c6d83a 	srl	r3,r9,r3
1000ca30:	290cb03a 	or	r6,r5,r4
1000ca34:	1004c03a 	cmpne	r2,r2,zero
1000ca38:	308cb03a 	or	r6,r6,r2
1000ca3c:	898dc83a 	sub	r6,r17,r6
1000ca40:	89a3803a 	cmpltu	r17,r17,r6
1000ca44:	40d1c83a 	sub	r8,r8,r3
1000ca48:	4451c83a 	sub	r8,r8,r17
1000ca4c:	3023883a 	mov	r17,r6
1000ca50:	4080202c 	andhi	r2,r8,128
1000ca54:	10002326 	beq	r2,zero,1000cae4 <__adddf3+0x204>
1000ca58:	04c02034 	movhi	r19,128
1000ca5c:	9cffffc4 	addi	r19,r19,-1
1000ca60:	44e6703a 	and	r19,r8,r19
1000ca64:	98007626 	beq	r19,zero,1000cc40 <__adddf3+0x360>
1000ca68:	9809883a 	mov	r4,r19
1000ca6c:	000f1200 	call	1000f120 <__clzsi2>
1000ca70:	10fffe04 	addi	r3,r2,-8
1000ca74:	010007c4 	movi	r4,31
1000ca78:	20c07716 	blt	r4,r3,1000cc58 <__adddf3+0x378>
1000ca7c:	00800804 	movi	r2,32
1000ca80:	10c5c83a 	sub	r2,r2,r3
1000ca84:	8884d83a 	srl	r2,r17,r2
1000ca88:	98d0983a 	sll	r8,r19,r3
1000ca8c:	88e2983a 	sll	r17,r17,r3
1000ca90:	1204b03a 	or	r2,r2,r8
1000ca94:	1c007416 	blt	r3,r16,1000cc68 <__adddf3+0x388>
1000ca98:	1c21c83a 	sub	r16,r3,r16
1000ca9c:	82000044 	addi	r8,r16,1
1000caa0:	00c007c4 	movi	r3,31
1000caa4:	1a009116 	blt	r3,r8,1000ccec <__adddf3+0x40c>
1000caa8:	00c00804 	movi	r3,32
1000caac:	1a07c83a 	sub	r3,r3,r8
1000cab0:	8a08d83a 	srl	r4,r17,r8
1000cab4:	88e2983a 	sll	r17,r17,r3
1000cab8:	10c6983a 	sll	r3,r2,r3
1000cabc:	1210d83a 	srl	r8,r2,r8
1000cac0:	8804c03a 	cmpne	r2,r17,zero
1000cac4:	1906b03a 	or	r3,r3,r4
1000cac8:	18a2b03a 	or	r17,r3,r2
1000cacc:	0021883a 	mov	r16,zero
1000cad0:	003fa206 	br	1000c95c <__alt_data_end+0xf800c95c>
1000cad4:	1890b03a 	or	r8,r3,r2
1000cad8:	40017d26 	beq	r8,zero,1000d0d0 <__adddf3+0x7f0>
1000cadc:	1011883a 	mov	r8,r2
1000cae0:	1823883a 	mov	r17,r3
1000cae4:	888001cc 	andi	r2,r17,7
1000cae8:	103f9e1e 	bne	r2,zero,1000c964 <__alt_data_end+0xf800c964>
1000caec:	4004977a 	slli	r2,r8,29
1000caf0:	8822d0fa 	srli	r17,r17,3
1000caf4:	4010d0fa 	srli	r8,r8,3
1000caf8:	9007883a 	mov	r3,r18
1000cafc:	1444b03a 	or	r2,r2,r17
1000cb00:	0101ffc4 	movi	r4,2047
1000cb04:	81002426 	beq	r16,r4,1000cb98 <__adddf3+0x2b8>
1000cb08:	8120703a 	and	r16,r16,r4
1000cb0c:	01000434 	movhi	r4,16
1000cb10:	213fffc4 	addi	r4,r4,-1
1000cb14:	4110703a 	and	r8,r8,r4
1000cb18:	003fa806 	br	1000c9bc <__alt_data_end+0xf800c9bc>
1000cb1c:	8089c83a 	sub	r4,r16,r2
1000cb20:	01005e0e 	bge	zero,r4,1000cc9c <__adddf3+0x3bc>
1000cb24:	10002b26 	beq	r2,zero,1000cbd4 <__adddf3+0x2f4>
1000cb28:	0081ffc4 	movi	r2,2047
1000cb2c:	80bf8b26 	beq	r16,r2,1000c95c <__alt_data_end+0xf800c95c>
1000cb30:	4a402034 	orhi	r9,r9,128
1000cb34:	00800e04 	movi	r2,56
1000cb38:	1100a40e 	bge	r2,r4,1000cdcc <__adddf3+0x4ec>
1000cb3c:	498cb03a 	or	r6,r9,r6
1000cb40:	300ac03a 	cmpne	r5,r6,zero
1000cb44:	0013883a 	mov	r9,zero
1000cb48:	2c4b883a 	add	r5,r5,r17
1000cb4c:	2c63803a 	cmpltu	r17,r5,r17
1000cb50:	4a11883a 	add	r8,r9,r8
1000cb54:	8a11883a 	add	r8,r17,r8
1000cb58:	2823883a 	mov	r17,r5
1000cb5c:	4080202c 	andhi	r2,r8,128
1000cb60:	103fe026 	beq	r2,zero,1000cae4 <__alt_data_end+0xf800cae4>
1000cb64:	84000044 	addi	r16,r16,1
1000cb68:	0081ffc4 	movi	r2,2047
1000cb6c:	8080d226 	beq	r16,r2,1000ceb8 <__adddf3+0x5d8>
1000cb70:	00bfe034 	movhi	r2,65408
1000cb74:	10bfffc4 	addi	r2,r2,-1
1000cb78:	4090703a 	and	r8,r8,r2
1000cb7c:	880ad07a 	srli	r5,r17,1
1000cb80:	400897fa 	slli	r4,r8,31
1000cb84:	88c0004c 	andi	r3,r17,1
1000cb88:	28e2b03a 	or	r17,r5,r3
1000cb8c:	4010d07a 	srli	r8,r8,1
1000cb90:	2462b03a 	or	r17,r4,r17
1000cb94:	003f7106 	br	1000c95c <__alt_data_end+0xf800c95c>
1000cb98:	4088b03a 	or	r4,r8,r2
1000cb9c:	20014526 	beq	r4,zero,1000d0b4 <__adddf3+0x7d4>
1000cba0:	01000434 	movhi	r4,16
1000cba4:	42000234 	orhi	r8,r8,8
1000cba8:	213fffc4 	addi	r4,r4,-1
1000cbac:	4110703a 	and	r8,r8,r4
1000cbb0:	003f8206 	br	1000c9bc <__alt_data_end+0xf800c9bc>
1000cbb4:	18ffffc4 	addi	r3,r3,-1
1000cbb8:	1800491e 	bne	r3,zero,1000cce0 <__adddf3+0x400>
1000cbbc:	898bc83a 	sub	r5,r17,r6
1000cbc0:	8963803a 	cmpltu	r17,r17,r5
1000cbc4:	4251c83a 	sub	r8,r8,r9
1000cbc8:	4451c83a 	sub	r8,r8,r17
1000cbcc:	2823883a 	mov	r17,r5
1000cbd0:	003f9f06 	br	1000ca50 <__alt_data_end+0xf800ca50>
1000cbd4:	4984b03a 	or	r2,r9,r6
1000cbd8:	103f6026 	beq	r2,zero,1000c95c <__alt_data_end+0xf800c95c>
1000cbdc:	213fffc4 	addi	r4,r4,-1
1000cbe0:	2000931e 	bne	r4,zero,1000ce30 <__adddf3+0x550>
1000cbe4:	898d883a 	add	r6,r17,r6
1000cbe8:	3463803a 	cmpltu	r17,r6,r17
1000cbec:	4251883a 	add	r8,r8,r9
1000cbf0:	8a11883a 	add	r8,r17,r8
1000cbf4:	3023883a 	mov	r17,r6
1000cbf8:	003fd806 	br	1000cb5c <__alt_data_end+0xf800cb5c>
1000cbfc:	1800541e 	bne	r3,zero,1000cd50 <__adddf3+0x470>
1000cc00:	80800044 	addi	r2,r16,1
1000cc04:	1081ffcc 	andi	r2,r2,2047
1000cc08:	00c00044 	movi	r3,1
1000cc0c:	1880a00e 	bge	r3,r2,1000ce90 <__adddf3+0x5b0>
1000cc10:	8989c83a 	sub	r4,r17,r6
1000cc14:	8905803a 	cmpltu	r2,r17,r4
1000cc18:	4267c83a 	sub	r19,r8,r9
1000cc1c:	98a7c83a 	sub	r19,r19,r2
1000cc20:	9880202c 	andhi	r2,r19,128
1000cc24:	10006326 	beq	r2,zero,1000cdb4 <__adddf3+0x4d4>
1000cc28:	3463c83a 	sub	r17,r6,r17
1000cc2c:	4a07c83a 	sub	r3,r9,r8
1000cc30:	344d803a 	cmpltu	r6,r6,r17
1000cc34:	19a7c83a 	sub	r19,r3,r6
1000cc38:	3825883a 	mov	r18,r7
1000cc3c:	983f8a1e 	bne	r19,zero,1000ca68 <__alt_data_end+0xf800ca68>
1000cc40:	8809883a 	mov	r4,r17
1000cc44:	000f1200 	call	1000f120 <__clzsi2>
1000cc48:	10800804 	addi	r2,r2,32
1000cc4c:	10fffe04 	addi	r3,r2,-8
1000cc50:	010007c4 	movi	r4,31
1000cc54:	20ff890e 	bge	r4,r3,1000ca7c <__alt_data_end+0xf800ca7c>
1000cc58:	10bff604 	addi	r2,r2,-40
1000cc5c:	8884983a 	sll	r2,r17,r2
1000cc60:	0023883a 	mov	r17,zero
1000cc64:	1c3f8c0e 	bge	r3,r16,1000ca98 <__alt_data_end+0xf800ca98>
1000cc68:	023fe034 	movhi	r8,65408
1000cc6c:	423fffc4 	addi	r8,r8,-1
1000cc70:	80e1c83a 	sub	r16,r16,r3
1000cc74:	1210703a 	and	r8,r2,r8
1000cc78:	003f3806 	br	1000c95c <__alt_data_end+0xf800c95c>
1000cc7c:	9007883a 	mov	r3,r18
1000cc80:	0011883a 	mov	r8,zero
1000cc84:	0005883a 	mov	r2,zero
1000cc88:	003f4c06 	br	1000c9bc <__alt_data_end+0xf800c9bc>
1000cc8c:	498cb03a 	or	r6,r9,r6
1000cc90:	300cc03a 	cmpne	r6,r6,zero
1000cc94:	0007883a 	mov	r3,zero
1000cc98:	003f6806 	br	1000ca3c <__alt_data_end+0xf800ca3c>
1000cc9c:	20009c1e 	bne	r4,zero,1000cf10 <__adddf3+0x630>
1000cca0:	80800044 	addi	r2,r16,1
1000cca4:	1141ffcc 	andi	r5,r2,2047
1000cca8:	01000044 	movi	r4,1
1000ccac:	2140670e 	bge	r4,r5,1000ce4c <__adddf3+0x56c>
1000ccb0:	0101ffc4 	movi	r4,2047
1000ccb4:	11007f26 	beq	r2,r4,1000ceb4 <__adddf3+0x5d4>
1000ccb8:	898d883a 	add	r6,r17,r6
1000ccbc:	4247883a 	add	r3,r8,r9
1000ccc0:	3451803a 	cmpltu	r8,r6,r17
1000ccc4:	40d1883a 	add	r8,r8,r3
1000ccc8:	402297fa 	slli	r17,r8,31
1000cccc:	300cd07a 	srli	r6,r6,1
1000ccd0:	4010d07a 	srli	r8,r8,1
1000ccd4:	1021883a 	mov	r16,r2
1000ccd8:	89a2b03a 	or	r17,r17,r6
1000ccdc:	003f1f06 	br	1000c95c <__alt_data_end+0xf800c95c>
1000cce0:	0081ffc4 	movi	r2,2047
1000cce4:	80bf481e 	bne	r16,r2,1000ca08 <__alt_data_end+0xf800ca08>
1000cce8:	003f1c06 	br	1000c95c <__alt_data_end+0xf800c95c>
1000ccec:	843ff844 	addi	r16,r16,-31
1000ccf0:	01000804 	movi	r4,32
1000ccf4:	1406d83a 	srl	r3,r2,r16
1000ccf8:	41005026 	beq	r8,r4,1000ce3c <__adddf3+0x55c>
1000ccfc:	01001004 	movi	r4,64
1000cd00:	2211c83a 	sub	r8,r4,r8
1000cd04:	1204983a 	sll	r2,r2,r8
1000cd08:	88a2b03a 	or	r17,r17,r2
1000cd0c:	8822c03a 	cmpne	r17,r17,zero
1000cd10:	1c62b03a 	or	r17,r3,r17
1000cd14:	0011883a 	mov	r8,zero
1000cd18:	0021883a 	mov	r16,zero
1000cd1c:	003f7106 	br	1000cae4 <__alt_data_end+0xf800cae4>
1000cd20:	193ff804 	addi	r4,r3,-32
1000cd24:	00800804 	movi	r2,32
1000cd28:	4908d83a 	srl	r4,r9,r4
1000cd2c:	18804526 	beq	r3,r2,1000ce44 <__adddf3+0x564>
1000cd30:	00801004 	movi	r2,64
1000cd34:	10c5c83a 	sub	r2,r2,r3
1000cd38:	4886983a 	sll	r3,r9,r2
1000cd3c:	198cb03a 	or	r6,r3,r6
1000cd40:	300cc03a 	cmpne	r6,r6,zero
1000cd44:	218cb03a 	or	r6,r4,r6
1000cd48:	0007883a 	mov	r3,zero
1000cd4c:	003f3b06 	br	1000ca3c <__alt_data_end+0xf800ca3c>
1000cd50:	80002a26 	beq	r16,zero,1000cdfc <__adddf3+0x51c>
1000cd54:	0101ffc4 	movi	r4,2047
1000cd58:	11006826 	beq	r2,r4,1000cefc <__adddf3+0x61c>
1000cd5c:	00c7c83a 	sub	r3,zero,r3
1000cd60:	42002034 	orhi	r8,r8,128
1000cd64:	01000e04 	movi	r4,56
1000cd68:	20c07c16 	blt	r4,r3,1000cf5c <__adddf3+0x67c>
1000cd6c:	010007c4 	movi	r4,31
1000cd70:	20c0da16 	blt	r4,r3,1000d0dc <__adddf3+0x7fc>
1000cd74:	01000804 	movi	r4,32
1000cd78:	20c9c83a 	sub	r4,r4,r3
1000cd7c:	4114983a 	sll	r10,r8,r4
1000cd80:	88cad83a 	srl	r5,r17,r3
1000cd84:	8908983a 	sll	r4,r17,r4
1000cd88:	40c6d83a 	srl	r3,r8,r3
1000cd8c:	5162b03a 	or	r17,r10,r5
1000cd90:	2008c03a 	cmpne	r4,r4,zero
1000cd94:	8922b03a 	or	r17,r17,r4
1000cd98:	3463c83a 	sub	r17,r6,r17
1000cd9c:	48c7c83a 	sub	r3,r9,r3
1000cda0:	344d803a 	cmpltu	r6,r6,r17
1000cda4:	1991c83a 	sub	r8,r3,r6
1000cda8:	1021883a 	mov	r16,r2
1000cdac:	3825883a 	mov	r18,r7
1000cdb0:	003f2706 	br	1000ca50 <__alt_data_end+0xf800ca50>
1000cdb4:	24d0b03a 	or	r8,r4,r19
1000cdb8:	40001b1e 	bne	r8,zero,1000ce28 <__adddf3+0x548>
1000cdbc:	0005883a 	mov	r2,zero
1000cdc0:	0007883a 	mov	r3,zero
1000cdc4:	0021883a 	mov	r16,zero
1000cdc8:	003f4d06 	br	1000cb00 <__alt_data_end+0xf800cb00>
1000cdcc:	008007c4 	movi	r2,31
1000cdd0:	11003c16 	blt	r2,r4,1000cec4 <__adddf3+0x5e4>
1000cdd4:	00800804 	movi	r2,32
1000cdd8:	1105c83a 	sub	r2,r2,r4
1000cddc:	488e983a 	sll	r7,r9,r2
1000cde0:	310ad83a 	srl	r5,r6,r4
1000cde4:	3084983a 	sll	r2,r6,r2
1000cde8:	4912d83a 	srl	r9,r9,r4
1000cdec:	394ab03a 	or	r5,r7,r5
1000cdf0:	1004c03a 	cmpne	r2,r2,zero
1000cdf4:	288ab03a 	or	r5,r5,r2
1000cdf8:	003f5306 	br	1000cb48 <__alt_data_end+0xf800cb48>
1000cdfc:	4448b03a 	or	r4,r8,r17
1000ce00:	20003e26 	beq	r4,zero,1000cefc <__adddf3+0x61c>
1000ce04:	00c6303a 	nor	r3,zero,r3
1000ce08:	18003a1e 	bne	r3,zero,1000cef4 <__adddf3+0x614>
1000ce0c:	3463c83a 	sub	r17,r6,r17
1000ce10:	4a07c83a 	sub	r3,r9,r8
1000ce14:	344d803a 	cmpltu	r6,r6,r17
1000ce18:	1991c83a 	sub	r8,r3,r6
1000ce1c:	1021883a 	mov	r16,r2
1000ce20:	3825883a 	mov	r18,r7
1000ce24:	003f0a06 	br	1000ca50 <__alt_data_end+0xf800ca50>
1000ce28:	2023883a 	mov	r17,r4
1000ce2c:	003f0d06 	br	1000ca64 <__alt_data_end+0xf800ca64>
1000ce30:	0081ffc4 	movi	r2,2047
1000ce34:	80bf3f1e 	bne	r16,r2,1000cb34 <__alt_data_end+0xf800cb34>
1000ce38:	003ec806 	br	1000c95c <__alt_data_end+0xf800c95c>
1000ce3c:	0005883a 	mov	r2,zero
1000ce40:	003fb106 	br	1000cd08 <__alt_data_end+0xf800cd08>
1000ce44:	0007883a 	mov	r3,zero
1000ce48:	003fbc06 	br	1000cd3c <__alt_data_end+0xf800cd3c>
1000ce4c:	4444b03a 	or	r2,r8,r17
1000ce50:	8000871e 	bne	r16,zero,1000d070 <__adddf3+0x790>
1000ce54:	1000ba26 	beq	r2,zero,1000d140 <__adddf3+0x860>
1000ce58:	4984b03a 	or	r2,r9,r6
1000ce5c:	103ebf26 	beq	r2,zero,1000c95c <__alt_data_end+0xf800c95c>
1000ce60:	8985883a 	add	r2,r17,r6
1000ce64:	4247883a 	add	r3,r8,r9
1000ce68:	1451803a 	cmpltu	r8,r2,r17
1000ce6c:	40d1883a 	add	r8,r8,r3
1000ce70:	40c0202c 	andhi	r3,r8,128
1000ce74:	1023883a 	mov	r17,r2
1000ce78:	183f1a26 	beq	r3,zero,1000cae4 <__alt_data_end+0xf800cae4>
1000ce7c:	00bfe034 	movhi	r2,65408
1000ce80:	10bfffc4 	addi	r2,r2,-1
1000ce84:	2021883a 	mov	r16,r4
1000ce88:	4090703a 	and	r8,r8,r2
1000ce8c:	003eb306 	br	1000c95c <__alt_data_end+0xf800c95c>
1000ce90:	4444b03a 	or	r2,r8,r17
1000ce94:	8000291e 	bne	r16,zero,1000cf3c <__adddf3+0x65c>
1000ce98:	10004b1e 	bne	r2,zero,1000cfc8 <__adddf3+0x6e8>
1000ce9c:	4990b03a 	or	r8,r9,r6
1000cea0:	40008b26 	beq	r8,zero,1000d0d0 <__adddf3+0x7f0>
1000cea4:	4811883a 	mov	r8,r9
1000cea8:	3023883a 	mov	r17,r6
1000ceac:	3825883a 	mov	r18,r7
1000ceb0:	003eaa06 	br	1000c95c <__alt_data_end+0xf800c95c>
1000ceb4:	1021883a 	mov	r16,r2
1000ceb8:	0011883a 	mov	r8,zero
1000cebc:	0005883a 	mov	r2,zero
1000cec0:	003f0f06 	br	1000cb00 <__alt_data_end+0xf800cb00>
1000cec4:	217ff804 	addi	r5,r4,-32
1000cec8:	00800804 	movi	r2,32
1000cecc:	494ad83a 	srl	r5,r9,r5
1000ced0:	20807d26 	beq	r4,r2,1000d0c8 <__adddf3+0x7e8>
1000ced4:	00801004 	movi	r2,64
1000ced8:	1109c83a 	sub	r4,r2,r4
1000cedc:	4912983a 	sll	r9,r9,r4
1000cee0:	498cb03a 	or	r6,r9,r6
1000cee4:	300cc03a 	cmpne	r6,r6,zero
1000cee8:	298ab03a 	or	r5,r5,r6
1000ceec:	0013883a 	mov	r9,zero
1000cef0:	003f1506 	br	1000cb48 <__alt_data_end+0xf800cb48>
1000cef4:	0101ffc4 	movi	r4,2047
1000cef8:	113f9a1e 	bne	r2,r4,1000cd64 <__alt_data_end+0xf800cd64>
1000cefc:	4811883a 	mov	r8,r9
1000cf00:	3023883a 	mov	r17,r6
1000cf04:	1021883a 	mov	r16,r2
1000cf08:	3825883a 	mov	r18,r7
1000cf0c:	003e9306 	br	1000c95c <__alt_data_end+0xf800c95c>
1000cf10:	8000161e 	bne	r16,zero,1000cf6c <__adddf3+0x68c>
1000cf14:	444ab03a 	or	r5,r8,r17
1000cf18:	28005126 	beq	r5,zero,1000d060 <__adddf3+0x780>
1000cf1c:	0108303a 	nor	r4,zero,r4
1000cf20:	20004d1e 	bne	r4,zero,1000d058 <__adddf3+0x778>
1000cf24:	89a3883a 	add	r17,r17,r6
1000cf28:	4253883a 	add	r9,r8,r9
1000cf2c:	898d803a 	cmpltu	r6,r17,r6
1000cf30:	3251883a 	add	r8,r6,r9
1000cf34:	1021883a 	mov	r16,r2
1000cf38:	003f0806 	br	1000cb5c <__alt_data_end+0xf800cb5c>
1000cf3c:	1000301e 	bne	r2,zero,1000d000 <__adddf3+0x720>
1000cf40:	4984b03a 	or	r2,r9,r6
1000cf44:	10007126 	beq	r2,zero,1000d10c <__adddf3+0x82c>
1000cf48:	4811883a 	mov	r8,r9
1000cf4c:	3023883a 	mov	r17,r6
1000cf50:	3825883a 	mov	r18,r7
1000cf54:	0401ffc4 	movi	r16,2047
1000cf58:	003e8006 	br	1000c95c <__alt_data_end+0xf800c95c>
1000cf5c:	4462b03a 	or	r17,r8,r17
1000cf60:	8822c03a 	cmpne	r17,r17,zero
1000cf64:	0007883a 	mov	r3,zero
1000cf68:	003f8b06 	br	1000cd98 <__alt_data_end+0xf800cd98>
1000cf6c:	0141ffc4 	movi	r5,2047
1000cf70:	11403b26 	beq	r2,r5,1000d060 <__adddf3+0x780>
1000cf74:	0109c83a 	sub	r4,zero,r4
1000cf78:	42002034 	orhi	r8,r8,128
1000cf7c:	01400e04 	movi	r5,56
1000cf80:	29006716 	blt	r5,r4,1000d120 <__adddf3+0x840>
1000cf84:	014007c4 	movi	r5,31
1000cf88:	29007016 	blt	r5,r4,1000d14c <__adddf3+0x86c>
1000cf8c:	01400804 	movi	r5,32
1000cf90:	290bc83a 	sub	r5,r5,r4
1000cf94:	4154983a 	sll	r10,r8,r5
1000cf98:	890ed83a 	srl	r7,r17,r4
1000cf9c:	894a983a 	sll	r5,r17,r5
1000cfa0:	4108d83a 	srl	r4,r8,r4
1000cfa4:	51e2b03a 	or	r17,r10,r7
1000cfa8:	280ac03a 	cmpne	r5,r5,zero
1000cfac:	8962b03a 	or	r17,r17,r5
1000cfb0:	89a3883a 	add	r17,r17,r6
1000cfb4:	2253883a 	add	r9,r4,r9
1000cfb8:	898d803a 	cmpltu	r6,r17,r6
1000cfbc:	3251883a 	add	r8,r6,r9
1000cfc0:	1021883a 	mov	r16,r2
1000cfc4:	003ee506 	br	1000cb5c <__alt_data_end+0xf800cb5c>
1000cfc8:	4984b03a 	or	r2,r9,r6
1000cfcc:	103e6326 	beq	r2,zero,1000c95c <__alt_data_end+0xf800c95c>
1000cfd0:	8987c83a 	sub	r3,r17,r6
1000cfd4:	88c9803a 	cmpltu	r4,r17,r3
1000cfd8:	4245c83a 	sub	r2,r8,r9
1000cfdc:	1105c83a 	sub	r2,r2,r4
1000cfe0:	1100202c 	andhi	r4,r2,128
1000cfe4:	203ebb26 	beq	r4,zero,1000cad4 <__alt_data_end+0xf800cad4>
1000cfe8:	3463c83a 	sub	r17,r6,r17
1000cfec:	4a07c83a 	sub	r3,r9,r8
1000cff0:	344d803a 	cmpltu	r6,r6,r17
1000cff4:	1991c83a 	sub	r8,r3,r6
1000cff8:	3825883a 	mov	r18,r7
1000cffc:	003e5706 	br	1000c95c <__alt_data_end+0xf800c95c>
1000d000:	4984b03a 	or	r2,r9,r6
1000d004:	10002e26 	beq	r2,zero,1000d0c0 <__adddf3+0x7e0>
1000d008:	4004d0fa 	srli	r2,r8,3
1000d00c:	8822d0fa 	srli	r17,r17,3
1000d010:	4010977a 	slli	r8,r8,29
1000d014:	10c0022c 	andhi	r3,r2,8
1000d018:	4462b03a 	or	r17,r8,r17
1000d01c:	18000826 	beq	r3,zero,1000d040 <__adddf3+0x760>
1000d020:	4808d0fa 	srli	r4,r9,3
1000d024:	20c0022c 	andhi	r3,r4,8
1000d028:	1800051e 	bne	r3,zero,1000d040 <__adddf3+0x760>
1000d02c:	300cd0fa 	srli	r6,r6,3
1000d030:	4806977a 	slli	r3,r9,29
1000d034:	2005883a 	mov	r2,r4
1000d038:	3825883a 	mov	r18,r7
1000d03c:	19a2b03a 	or	r17,r3,r6
1000d040:	8810d77a 	srli	r8,r17,29
1000d044:	100490fa 	slli	r2,r2,3
1000d048:	882290fa 	slli	r17,r17,3
1000d04c:	0401ffc4 	movi	r16,2047
1000d050:	4090b03a 	or	r8,r8,r2
1000d054:	003e4106 	br	1000c95c <__alt_data_end+0xf800c95c>
1000d058:	0141ffc4 	movi	r5,2047
1000d05c:	117fc71e 	bne	r2,r5,1000cf7c <__alt_data_end+0xf800cf7c>
1000d060:	4811883a 	mov	r8,r9
1000d064:	3023883a 	mov	r17,r6
1000d068:	1021883a 	mov	r16,r2
1000d06c:	003e3b06 	br	1000c95c <__alt_data_end+0xf800c95c>
1000d070:	10002f26 	beq	r2,zero,1000d130 <__adddf3+0x850>
1000d074:	4984b03a 	or	r2,r9,r6
1000d078:	10001126 	beq	r2,zero,1000d0c0 <__adddf3+0x7e0>
1000d07c:	4004d0fa 	srli	r2,r8,3
1000d080:	8822d0fa 	srli	r17,r17,3
1000d084:	4010977a 	slli	r8,r8,29
1000d088:	10c0022c 	andhi	r3,r2,8
1000d08c:	4462b03a 	or	r17,r8,r17
1000d090:	183feb26 	beq	r3,zero,1000d040 <__alt_data_end+0xf800d040>
1000d094:	4808d0fa 	srli	r4,r9,3
1000d098:	20c0022c 	andhi	r3,r4,8
1000d09c:	183fe81e 	bne	r3,zero,1000d040 <__alt_data_end+0xf800d040>
1000d0a0:	300cd0fa 	srli	r6,r6,3
1000d0a4:	4806977a 	slli	r3,r9,29
1000d0a8:	2005883a 	mov	r2,r4
1000d0ac:	19a2b03a 	or	r17,r3,r6
1000d0b0:	003fe306 	br	1000d040 <__alt_data_end+0xf800d040>
1000d0b4:	0011883a 	mov	r8,zero
1000d0b8:	0005883a 	mov	r2,zero
1000d0bc:	003e3f06 	br	1000c9bc <__alt_data_end+0xf800c9bc>
1000d0c0:	0401ffc4 	movi	r16,2047
1000d0c4:	003e2506 	br	1000c95c <__alt_data_end+0xf800c95c>
1000d0c8:	0013883a 	mov	r9,zero
1000d0cc:	003f8406 	br	1000cee0 <__alt_data_end+0xf800cee0>
1000d0d0:	0005883a 	mov	r2,zero
1000d0d4:	0007883a 	mov	r3,zero
1000d0d8:	003e8906 	br	1000cb00 <__alt_data_end+0xf800cb00>
1000d0dc:	197ff804 	addi	r5,r3,-32
1000d0e0:	01000804 	movi	r4,32
1000d0e4:	414ad83a 	srl	r5,r8,r5
1000d0e8:	19002426 	beq	r3,r4,1000d17c <__adddf3+0x89c>
1000d0ec:	01001004 	movi	r4,64
1000d0f0:	20c7c83a 	sub	r3,r4,r3
1000d0f4:	40c6983a 	sll	r3,r8,r3
1000d0f8:	1c46b03a 	or	r3,r3,r17
1000d0fc:	1806c03a 	cmpne	r3,r3,zero
1000d100:	28e2b03a 	or	r17,r5,r3
1000d104:	0007883a 	mov	r3,zero
1000d108:	003f2306 	br	1000cd98 <__alt_data_end+0xf800cd98>
1000d10c:	0007883a 	mov	r3,zero
1000d110:	5811883a 	mov	r8,r11
1000d114:	00bfffc4 	movi	r2,-1
1000d118:	0401ffc4 	movi	r16,2047
1000d11c:	003e7806 	br	1000cb00 <__alt_data_end+0xf800cb00>
1000d120:	4462b03a 	or	r17,r8,r17
1000d124:	8822c03a 	cmpne	r17,r17,zero
1000d128:	0009883a 	mov	r4,zero
1000d12c:	003fa006 	br	1000cfb0 <__alt_data_end+0xf800cfb0>
1000d130:	4811883a 	mov	r8,r9
1000d134:	3023883a 	mov	r17,r6
1000d138:	0401ffc4 	movi	r16,2047
1000d13c:	003e0706 	br	1000c95c <__alt_data_end+0xf800c95c>
1000d140:	4811883a 	mov	r8,r9
1000d144:	3023883a 	mov	r17,r6
1000d148:	003e0406 	br	1000c95c <__alt_data_end+0xf800c95c>
1000d14c:	21fff804 	addi	r7,r4,-32
1000d150:	01400804 	movi	r5,32
1000d154:	41ced83a 	srl	r7,r8,r7
1000d158:	21400a26 	beq	r4,r5,1000d184 <__adddf3+0x8a4>
1000d15c:	01401004 	movi	r5,64
1000d160:	2909c83a 	sub	r4,r5,r4
1000d164:	4108983a 	sll	r4,r8,r4
1000d168:	2448b03a 	or	r4,r4,r17
1000d16c:	2008c03a 	cmpne	r4,r4,zero
1000d170:	3922b03a 	or	r17,r7,r4
1000d174:	0009883a 	mov	r4,zero
1000d178:	003f8d06 	br	1000cfb0 <__alt_data_end+0xf800cfb0>
1000d17c:	0007883a 	mov	r3,zero
1000d180:	003fdd06 	br	1000d0f8 <__alt_data_end+0xf800d0f8>
1000d184:	0009883a 	mov	r4,zero
1000d188:	003ff706 	br	1000d168 <__alt_data_end+0xf800d168>

1000d18c <__divdf3>:
1000d18c:	defff004 	addi	sp,sp,-64
1000d190:	dc800815 	stw	r18,32(sp)
1000d194:	2824d53a 	srli	r18,r5,20
1000d198:	dd800c15 	stw	r22,48(sp)
1000d19c:	282cd7fa 	srli	r22,r5,31
1000d1a0:	dc000615 	stw	r16,24(sp)
1000d1a4:	04000434 	movhi	r16,16
1000d1a8:	843fffc4 	addi	r16,r16,-1
1000d1ac:	dfc00f15 	stw	ra,60(sp)
1000d1b0:	df000e15 	stw	fp,56(sp)
1000d1b4:	ddc00d15 	stw	r23,52(sp)
1000d1b8:	dd400b15 	stw	r21,44(sp)
1000d1bc:	dd000a15 	stw	r20,40(sp)
1000d1c0:	dcc00915 	stw	r19,36(sp)
1000d1c4:	dc400715 	stw	r17,28(sp)
1000d1c8:	9481ffcc 	andi	r18,r18,2047
1000d1cc:	2c20703a 	and	r16,r5,r16
1000d1d0:	b2003fcc 	andi	r8,r22,255
1000d1d4:	90006126 	beq	r18,zero,1000d35c <__divdf3+0x1d0>
1000d1d8:	0081ffc4 	movi	r2,2047
1000d1dc:	202b883a 	mov	r21,r4
1000d1e0:	90803726 	beq	r18,r2,1000d2c0 <__divdf3+0x134>
1000d1e4:	80800434 	orhi	r2,r16,16
1000d1e8:	100490fa 	slli	r2,r2,3
1000d1ec:	2020d77a 	srli	r16,r4,29
1000d1f0:	202a90fa 	slli	r21,r4,3
1000d1f4:	94bf0044 	addi	r18,r18,-1023
1000d1f8:	80a0b03a 	or	r16,r16,r2
1000d1fc:	0013883a 	mov	r9,zero
1000d200:	000b883a 	mov	r5,zero
1000d204:	3806d53a 	srli	r3,r7,20
1000d208:	382ed7fa 	srli	r23,r7,31
1000d20c:	04400434 	movhi	r17,16
1000d210:	8c7fffc4 	addi	r17,r17,-1
1000d214:	18c1ffcc 	andi	r3,r3,2047
1000d218:	3029883a 	mov	r20,r6
1000d21c:	3c62703a 	and	r17,r7,r17
1000d220:	bf003fcc 	andi	fp,r23,255
1000d224:	18006e26 	beq	r3,zero,1000d3e0 <__divdf3+0x254>
1000d228:	0081ffc4 	movi	r2,2047
1000d22c:	18806626 	beq	r3,r2,1000d3c8 <__divdf3+0x23c>
1000d230:	88800434 	orhi	r2,r17,16
1000d234:	100490fa 	slli	r2,r2,3
1000d238:	3022d77a 	srli	r17,r6,29
1000d23c:	302890fa 	slli	r20,r6,3
1000d240:	18ff0044 	addi	r3,r3,-1023
1000d244:	88a2b03a 	or	r17,r17,r2
1000d248:	000f883a 	mov	r7,zero
1000d24c:	b5e6f03a 	xor	r19,r22,r23
1000d250:	3a4cb03a 	or	r6,r7,r9
1000d254:	008003c4 	movi	r2,15
1000d258:	9809883a 	mov	r4,r19
1000d25c:	90c7c83a 	sub	r3,r18,r3
1000d260:	9cc03fcc 	andi	r19,r19,255
1000d264:	11809636 	bltu	r2,r6,1000d4c0 <__divdf3+0x334>
1000d268:	300c90ba 	slli	r6,r6,2
1000d26c:	00840074 	movhi	r2,4097
1000d270:	10b4a004 	addi	r2,r2,-11648
1000d274:	308d883a 	add	r6,r6,r2
1000d278:	30800017 	ldw	r2,0(r6)
1000d27c:	1000683a 	jmp	r2
1000d280:	1000d4c0 	call	11000d4c <_gp+0xfe4e84>
1000d284:	1000d2f8 	rdprs	zero,r2,843
1000d288:	1000d4b0 	cmpltui	zero,r2,850
1000d28c:	1000d2ec 	andhi	zero,r2,843
1000d290:	1000d4b0 	cmpltui	zero,r2,850
1000d294:	1000d484 	addi	zero,r2,850
1000d298:	1000d4b0 	cmpltui	zero,r2,850
1000d29c:	1000d2ec 	andhi	zero,r2,843
1000d2a0:	1000d2f8 	rdprs	zero,r2,843
1000d2a4:	1000d2f8 	rdprs	zero,r2,843
1000d2a8:	1000d484 	addi	zero,r2,850
1000d2ac:	1000d2ec 	andhi	zero,r2,843
1000d2b0:	1000d2dc 	xori	zero,r2,843
1000d2b4:	1000d2dc 	xori	zero,r2,843
1000d2b8:	1000d2dc 	xori	zero,r2,843
1000d2bc:	1000d848 	cmpgei	zero,r2,865
1000d2c0:	2404b03a 	or	r2,r4,r16
1000d2c4:	10006c1e 	bne	r2,zero,1000d478 <__divdf3+0x2ec>
1000d2c8:	02400204 	movi	r9,8
1000d2cc:	0021883a 	mov	r16,zero
1000d2d0:	002b883a 	mov	r21,zero
1000d2d4:	01400084 	movi	r5,2
1000d2d8:	003fca06 	br	1000d204 <__alt_data_end+0xf800d204>
1000d2dc:	8023883a 	mov	r17,r16
1000d2e0:	a829883a 	mov	r20,r21
1000d2e4:	4039883a 	mov	fp,r8
1000d2e8:	280f883a 	mov	r7,r5
1000d2ec:	00800084 	movi	r2,2
1000d2f0:	3881601e 	bne	r7,r2,1000d874 <__divdf3+0x6e8>
1000d2f4:	e027883a 	mov	r19,fp
1000d2f8:	9900004c 	andi	r4,r19,1
1000d2fc:	0081ffc4 	movi	r2,2047
1000d300:	0021883a 	mov	r16,zero
1000d304:	002b883a 	mov	r21,zero
1000d308:	1004953a 	slli	r2,r2,20
1000d30c:	20c03fcc 	andi	r3,r4,255
1000d310:	01400434 	movhi	r5,16
1000d314:	297fffc4 	addi	r5,r5,-1
1000d318:	180697fa 	slli	r3,r3,31
1000d31c:	8160703a 	and	r16,r16,r5
1000d320:	80a0b03a 	or	r16,r16,r2
1000d324:	80c6b03a 	or	r3,r16,r3
1000d328:	a805883a 	mov	r2,r21
1000d32c:	dfc00f17 	ldw	ra,60(sp)
1000d330:	df000e17 	ldw	fp,56(sp)
1000d334:	ddc00d17 	ldw	r23,52(sp)
1000d338:	dd800c17 	ldw	r22,48(sp)
1000d33c:	dd400b17 	ldw	r21,44(sp)
1000d340:	dd000a17 	ldw	r20,40(sp)
1000d344:	dcc00917 	ldw	r19,36(sp)
1000d348:	dc800817 	ldw	r18,32(sp)
1000d34c:	dc400717 	ldw	r17,28(sp)
1000d350:	dc000617 	ldw	r16,24(sp)
1000d354:	dec01004 	addi	sp,sp,64
1000d358:	f800283a 	ret
1000d35c:	2404b03a 	or	r2,r4,r16
1000d360:	2023883a 	mov	r17,r4
1000d364:	10003f26 	beq	r2,zero,1000d464 <__divdf3+0x2d8>
1000d368:	80015e26 	beq	r16,zero,1000d8e4 <__divdf3+0x758>
1000d36c:	8009883a 	mov	r4,r16
1000d370:	d9800215 	stw	r6,8(sp)
1000d374:	d9c00515 	stw	r7,20(sp)
1000d378:	da000415 	stw	r8,16(sp)
1000d37c:	000f1200 	call	1000f120 <__clzsi2>
1000d380:	d9800217 	ldw	r6,8(sp)
1000d384:	d9c00517 	ldw	r7,20(sp)
1000d388:	da000417 	ldw	r8,16(sp)
1000d38c:	113ffd44 	addi	r4,r2,-11
1000d390:	00c00704 	movi	r3,28
1000d394:	19014f16 	blt	r3,r4,1000d8d4 <__divdf3+0x748>
1000d398:	00c00744 	movi	r3,29
1000d39c:	157ffe04 	addi	r21,r2,-8
1000d3a0:	1907c83a 	sub	r3,r3,r4
1000d3a4:	8560983a 	sll	r16,r16,r21
1000d3a8:	88c6d83a 	srl	r3,r17,r3
1000d3ac:	8d6a983a 	sll	r21,r17,r21
1000d3b0:	1c20b03a 	or	r16,r3,r16
1000d3b4:	1080fcc4 	addi	r2,r2,1011
1000d3b8:	00a5c83a 	sub	r18,zero,r2
1000d3bc:	0013883a 	mov	r9,zero
1000d3c0:	000b883a 	mov	r5,zero
1000d3c4:	003f8f06 	br	1000d204 <__alt_data_end+0xf800d204>
1000d3c8:	3444b03a 	or	r2,r6,r17
1000d3cc:	1000231e 	bne	r2,zero,1000d45c <__divdf3+0x2d0>
1000d3d0:	0023883a 	mov	r17,zero
1000d3d4:	0029883a 	mov	r20,zero
1000d3d8:	01c00084 	movi	r7,2
1000d3dc:	003f9b06 	br	1000d24c <__alt_data_end+0xf800d24c>
1000d3e0:	3444b03a 	or	r2,r6,r17
1000d3e4:	10001926 	beq	r2,zero,1000d44c <__divdf3+0x2c0>
1000d3e8:	88014b26 	beq	r17,zero,1000d918 <__divdf3+0x78c>
1000d3ec:	8809883a 	mov	r4,r17
1000d3f0:	d9400115 	stw	r5,4(sp)
1000d3f4:	d9800215 	stw	r6,8(sp)
1000d3f8:	da000415 	stw	r8,16(sp)
1000d3fc:	da400315 	stw	r9,12(sp)
1000d400:	000f1200 	call	1000f120 <__clzsi2>
1000d404:	d9400117 	ldw	r5,4(sp)
1000d408:	d9800217 	ldw	r6,8(sp)
1000d40c:	da000417 	ldw	r8,16(sp)
1000d410:	da400317 	ldw	r9,12(sp)
1000d414:	113ffd44 	addi	r4,r2,-11
1000d418:	00c00704 	movi	r3,28
1000d41c:	19013a16 	blt	r3,r4,1000d908 <__divdf3+0x77c>
1000d420:	00c00744 	movi	r3,29
1000d424:	153ffe04 	addi	r20,r2,-8
1000d428:	1907c83a 	sub	r3,r3,r4
1000d42c:	8d22983a 	sll	r17,r17,r20
1000d430:	30c6d83a 	srl	r3,r6,r3
1000d434:	3528983a 	sll	r20,r6,r20
1000d438:	1c62b03a 	or	r17,r3,r17
1000d43c:	1080fcc4 	addi	r2,r2,1011
1000d440:	0087c83a 	sub	r3,zero,r2
1000d444:	000f883a 	mov	r7,zero
1000d448:	003f8006 	br	1000d24c <__alt_data_end+0xf800d24c>
1000d44c:	0023883a 	mov	r17,zero
1000d450:	0029883a 	mov	r20,zero
1000d454:	01c00044 	movi	r7,1
1000d458:	003f7c06 	br	1000d24c <__alt_data_end+0xf800d24c>
1000d45c:	01c000c4 	movi	r7,3
1000d460:	003f7a06 	br	1000d24c <__alt_data_end+0xf800d24c>
1000d464:	02400104 	movi	r9,4
1000d468:	0021883a 	mov	r16,zero
1000d46c:	002b883a 	mov	r21,zero
1000d470:	01400044 	movi	r5,1
1000d474:	003f6306 	br	1000d204 <__alt_data_end+0xf800d204>
1000d478:	02400304 	movi	r9,12
1000d47c:	014000c4 	movi	r5,3
1000d480:	003f6006 	br	1000d204 <__alt_data_end+0xf800d204>
1000d484:	04000434 	movhi	r16,16
1000d488:	0009883a 	mov	r4,zero
1000d48c:	843fffc4 	addi	r16,r16,-1
1000d490:	057fffc4 	movi	r21,-1
1000d494:	0081ffc4 	movi	r2,2047
1000d498:	003f9b06 	br	1000d308 <__alt_data_end+0xf800d308>
1000d49c:	00c00044 	movi	r3,1
1000d4a0:	1887c83a 	sub	r3,r3,r2
1000d4a4:	01000e04 	movi	r4,56
1000d4a8:	20c1530e 	bge	r4,r3,1000d9f8 <__divdf3+0x86c>
1000d4ac:	9900004c 	andi	r4,r19,1
1000d4b0:	0005883a 	mov	r2,zero
1000d4b4:	0021883a 	mov	r16,zero
1000d4b8:	002b883a 	mov	r21,zero
1000d4bc:	003f9206 	br	1000d308 <__alt_data_end+0xf800d308>
1000d4c0:	8c012e36 	bltu	r17,r16,1000d97c <__divdf3+0x7f0>
1000d4c4:	84412c26 	beq	r16,r17,1000d978 <__divdf3+0x7ec>
1000d4c8:	a82f883a 	mov	r23,r21
1000d4cc:	18ffffc4 	addi	r3,r3,-1
1000d4d0:	002b883a 	mov	r21,zero
1000d4d4:	a004d63a 	srli	r2,r20,24
1000d4d8:	8822923a 	slli	r17,r17,8
1000d4dc:	a028923a 	slli	r20,r20,8
1000d4e0:	8009883a 	mov	r4,r16
1000d4e4:	88acb03a 	or	r22,r17,r2
1000d4e8:	dd000015 	stw	r20,0(sp)
1000d4ec:	b028d43a 	srli	r20,r22,16
1000d4f0:	d8c00215 	stw	r3,8(sp)
1000d4f4:	b4bfffcc 	andi	r18,r22,65535
1000d4f8:	a00b883a 	mov	r5,r20
1000d4fc:	000c7fc0 	call	1000c7fc <__udivsi3>
1000d500:	100b883a 	mov	r5,r2
1000d504:	9009883a 	mov	r4,r18
1000d508:	1023883a 	mov	r17,r2
1000d50c:	000c8b80 	call	1000c8b8 <__mulsi3>
1000d510:	8009883a 	mov	r4,r16
1000d514:	a00b883a 	mov	r5,r20
1000d518:	1039883a 	mov	fp,r2
1000d51c:	000c8600 	call	1000c860 <__umodsi3>
1000d520:	1004943a 	slli	r2,r2,16
1000d524:	b808d43a 	srli	r4,r23,16
1000d528:	d8c00217 	ldw	r3,8(sp)
1000d52c:	2084b03a 	or	r2,r4,r2
1000d530:	1700062e 	bgeu	r2,fp,1000d54c <__divdf3+0x3c0>
1000d534:	1585883a 	add	r2,r2,r22
1000d538:	893fffc4 	addi	r4,r17,-1
1000d53c:	15811d36 	bltu	r2,r22,1000d9b4 <__divdf3+0x828>
1000d540:	17011c2e 	bgeu	r2,fp,1000d9b4 <__divdf3+0x828>
1000d544:	8c7fff84 	addi	r17,r17,-2
1000d548:	1585883a 	add	r2,r2,r22
1000d54c:	1739c83a 	sub	fp,r2,fp
1000d550:	a00b883a 	mov	r5,r20
1000d554:	e009883a 	mov	r4,fp
1000d558:	d8c00215 	stw	r3,8(sp)
1000d55c:	000c7fc0 	call	1000c7fc <__udivsi3>
1000d560:	100b883a 	mov	r5,r2
1000d564:	9009883a 	mov	r4,r18
1000d568:	1021883a 	mov	r16,r2
1000d56c:	000c8b80 	call	1000c8b8 <__mulsi3>
1000d570:	a00b883a 	mov	r5,r20
1000d574:	e009883a 	mov	r4,fp
1000d578:	d8800415 	stw	r2,16(sp)
1000d57c:	000c8600 	call	1000c860 <__umodsi3>
1000d580:	1004943a 	slli	r2,r2,16
1000d584:	da000417 	ldw	r8,16(sp)
1000d588:	bdffffcc 	andi	r23,r23,65535
1000d58c:	b884b03a 	or	r2,r23,r2
1000d590:	d8c00217 	ldw	r3,8(sp)
1000d594:	1200062e 	bgeu	r2,r8,1000d5b0 <__divdf3+0x424>
1000d598:	1585883a 	add	r2,r2,r22
1000d59c:	813fffc4 	addi	r4,r16,-1
1000d5a0:	15810236 	bltu	r2,r22,1000d9ac <__divdf3+0x820>
1000d5a4:	1201012e 	bgeu	r2,r8,1000d9ac <__divdf3+0x820>
1000d5a8:	843fff84 	addi	r16,r16,-2
1000d5ac:	1585883a 	add	r2,r2,r22
1000d5b0:	8822943a 	slli	r17,r17,16
1000d5b4:	d9800017 	ldw	r6,0(sp)
1000d5b8:	1211c83a 	sub	r8,r2,r8
1000d5bc:	8c22b03a 	or	r17,r17,r16
1000d5c0:	373fffcc 	andi	fp,r6,65535
1000d5c4:	8abfffcc 	andi	r10,r17,65535
1000d5c8:	8820d43a 	srli	r16,r17,16
1000d5cc:	5009883a 	mov	r4,r10
1000d5d0:	e00b883a 	mov	r5,fp
1000d5d4:	302ed43a 	srli	r23,r6,16
1000d5d8:	d8c00215 	stw	r3,8(sp)
1000d5dc:	da000415 	stw	r8,16(sp)
1000d5e0:	da800115 	stw	r10,4(sp)
1000d5e4:	000c8b80 	call	1000c8b8 <__mulsi3>
1000d5e8:	800b883a 	mov	r5,r16
1000d5ec:	e009883a 	mov	r4,fp
1000d5f0:	d8800515 	stw	r2,20(sp)
1000d5f4:	000c8b80 	call	1000c8b8 <__mulsi3>
1000d5f8:	8009883a 	mov	r4,r16
1000d5fc:	b80b883a 	mov	r5,r23
1000d600:	d8800315 	stw	r2,12(sp)
1000d604:	000c8b80 	call	1000c8b8 <__mulsi3>
1000d608:	da800117 	ldw	r10,4(sp)
1000d60c:	b80b883a 	mov	r5,r23
1000d610:	1021883a 	mov	r16,r2
1000d614:	5009883a 	mov	r4,r10
1000d618:	000c8b80 	call	1000c8b8 <__mulsi3>
1000d61c:	d9c00517 	ldw	r7,20(sp)
1000d620:	da400317 	ldw	r9,12(sp)
1000d624:	d8c00217 	ldw	r3,8(sp)
1000d628:	3808d43a 	srli	r4,r7,16
1000d62c:	1245883a 	add	r2,r2,r9
1000d630:	da000417 	ldw	r8,16(sp)
1000d634:	2085883a 	add	r2,r4,r2
1000d638:	1240022e 	bgeu	r2,r9,1000d644 <__divdf3+0x4b8>
1000d63c:	01000074 	movhi	r4,1
1000d640:	8121883a 	add	r16,r16,r4
1000d644:	1008d43a 	srli	r4,r2,16
1000d648:	1004943a 	slli	r2,r2,16
1000d64c:	39ffffcc 	andi	r7,r7,65535
1000d650:	2409883a 	add	r4,r4,r16
1000d654:	11c5883a 	add	r2,r2,r7
1000d658:	4100bb36 	bltu	r8,r4,1000d948 <__divdf3+0x7bc>
1000d65c:	4100d726 	beq	r8,r4,1000d9bc <__divdf3+0x830>
1000d660:	4109c83a 	sub	r4,r8,r4
1000d664:	a8a1c83a 	sub	r16,r21,r2
1000d668:	ac2b803a 	cmpltu	r21,r21,r16
1000d66c:	256bc83a 	sub	r21,r4,r21
1000d670:	b540d926 	beq	r22,r21,1000d9d8 <__divdf3+0x84c>
1000d674:	a00b883a 	mov	r5,r20
1000d678:	a809883a 	mov	r4,r21
1000d67c:	d8c00215 	stw	r3,8(sp)
1000d680:	000c7fc0 	call	1000c7fc <__udivsi3>
1000d684:	100b883a 	mov	r5,r2
1000d688:	9009883a 	mov	r4,r18
1000d68c:	d8800515 	stw	r2,20(sp)
1000d690:	000c8b80 	call	1000c8b8 <__mulsi3>
1000d694:	a809883a 	mov	r4,r21
1000d698:	a00b883a 	mov	r5,r20
1000d69c:	d8800415 	stw	r2,16(sp)
1000d6a0:	000c8600 	call	1000c860 <__umodsi3>
1000d6a4:	1004943a 	slli	r2,r2,16
1000d6a8:	8008d43a 	srli	r4,r16,16
1000d6ac:	da000417 	ldw	r8,16(sp)
1000d6b0:	d8c00217 	ldw	r3,8(sp)
1000d6b4:	2084b03a 	or	r2,r4,r2
1000d6b8:	d9c00517 	ldw	r7,20(sp)
1000d6bc:	1200062e 	bgeu	r2,r8,1000d6d8 <__divdf3+0x54c>
1000d6c0:	1585883a 	add	r2,r2,r22
1000d6c4:	393fffc4 	addi	r4,r7,-1
1000d6c8:	1580c536 	bltu	r2,r22,1000d9e0 <__divdf3+0x854>
1000d6cc:	1200c42e 	bgeu	r2,r8,1000d9e0 <__divdf3+0x854>
1000d6d0:	39ffff84 	addi	r7,r7,-2
1000d6d4:	1585883a 	add	r2,r2,r22
1000d6d8:	122bc83a 	sub	r21,r2,r8
1000d6dc:	a00b883a 	mov	r5,r20
1000d6e0:	a809883a 	mov	r4,r21
1000d6e4:	d8c00215 	stw	r3,8(sp)
1000d6e8:	d9c00515 	stw	r7,20(sp)
1000d6ec:	000c7fc0 	call	1000c7fc <__udivsi3>
1000d6f0:	9009883a 	mov	r4,r18
1000d6f4:	100b883a 	mov	r5,r2
1000d6f8:	d8800415 	stw	r2,16(sp)
1000d6fc:	000c8b80 	call	1000c8b8 <__mulsi3>
1000d700:	a809883a 	mov	r4,r21
1000d704:	a00b883a 	mov	r5,r20
1000d708:	1025883a 	mov	r18,r2
1000d70c:	000c8600 	call	1000c860 <__umodsi3>
1000d710:	1004943a 	slli	r2,r2,16
1000d714:	813fffcc 	andi	r4,r16,65535
1000d718:	d8c00217 	ldw	r3,8(sp)
1000d71c:	20a0b03a 	or	r16,r4,r2
1000d720:	d9c00517 	ldw	r7,20(sp)
1000d724:	da000417 	ldw	r8,16(sp)
1000d728:	8480062e 	bgeu	r16,r18,1000d744 <__divdf3+0x5b8>
1000d72c:	85a1883a 	add	r16,r16,r22
1000d730:	40bfffc4 	addi	r2,r8,-1
1000d734:	8580ac36 	bltu	r16,r22,1000d9e8 <__divdf3+0x85c>
1000d738:	8480ab2e 	bgeu	r16,r18,1000d9e8 <__divdf3+0x85c>
1000d73c:	423fff84 	addi	r8,r8,-2
1000d740:	85a1883a 	add	r16,r16,r22
1000d744:	3804943a 	slli	r2,r7,16
1000d748:	84a1c83a 	sub	r16,r16,r18
1000d74c:	e009883a 	mov	r4,fp
1000d750:	1228b03a 	or	r20,r2,r8
1000d754:	a1ffffcc 	andi	r7,r20,65535
1000d758:	a024d43a 	srli	r18,r20,16
1000d75c:	380b883a 	mov	r5,r7
1000d760:	d8c00215 	stw	r3,8(sp)
1000d764:	d9c00515 	stw	r7,20(sp)
1000d768:	000c8b80 	call	1000c8b8 <__mulsi3>
1000d76c:	900b883a 	mov	r5,r18
1000d770:	e009883a 	mov	r4,fp
1000d774:	102b883a 	mov	r21,r2
1000d778:	000c8b80 	call	1000c8b8 <__mulsi3>
1000d77c:	900b883a 	mov	r5,r18
1000d780:	b809883a 	mov	r4,r23
1000d784:	1039883a 	mov	fp,r2
1000d788:	000c8b80 	call	1000c8b8 <__mulsi3>
1000d78c:	d9c00517 	ldw	r7,20(sp)
1000d790:	b80b883a 	mov	r5,r23
1000d794:	1025883a 	mov	r18,r2
1000d798:	3809883a 	mov	r4,r7
1000d79c:	000c8b80 	call	1000c8b8 <__mulsi3>
1000d7a0:	a808d43a 	srli	r4,r21,16
1000d7a4:	1705883a 	add	r2,r2,fp
1000d7a8:	d8c00217 	ldw	r3,8(sp)
1000d7ac:	2085883a 	add	r2,r4,r2
1000d7b0:	1700022e 	bgeu	r2,fp,1000d7bc <__divdf3+0x630>
1000d7b4:	01000074 	movhi	r4,1
1000d7b8:	9125883a 	add	r18,r18,r4
1000d7bc:	1008d43a 	srli	r4,r2,16
1000d7c0:	1004943a 	slli	r2,r2,16
1000d7c4:	ad7fffcc 	andi	r21,r21,65535
1000d7c8:	2489883a 	add	r4,r4,r18
1000d7cc:	1545883a 	add	r2,r2,r21
1000d7d0:	81003836 	bltu	r16,r4,1000d8b4 <__divdf3+0x728>
1000d7d4:	81003626 	beq	r16,r4,1000d8b0 <__divdf3+0x724>
1000d7d8:	a5000054 	ori	r20,r20,1
1000d7dc:	1880ffc4 	addi	r2,r3,1023
1000d7e0:	00bf2e0e 	bge	zero,r2,1000d49c <__alt_data_end+0xf800d49c>
1000d7e4:	a10001cc 	andi	r4,r20,7
1000d7e8:	20000726 	beq	r4,zero,1000d808 <__divdf3+0x67c>
1000d7ec:	a10003cc 	andi	r4,r20,15
1000d7f0:	01400104 	movi	r5,4
1000d7f4:	21400426 	beq	r4,r5,1000d808 <__divdf3+0x67c>
1000d7f8:	a149883a 	add	r4,r20,r5
1000d7fc:	2529803a 	cmpltu	r20,r4,r20
1000d800:	8d23883a 	add	r17,r17,r20
1000d804:	2029883a 	mov	r20,r4
1000d808:	8900402c 	andhi	r4,r17,256
1000d80c:	20000426 	beq	r4,zero,1000d820 <__divdf3+0x694>
1000d810:	18810004 	addi	r2,r3,1024
1000d814:	00ffc034 	movhi	r3,65280
1000d818:	18ffffc4 	addi	r3,r3,-1
1000d81c:	88e2703a 	and	r17,r17,r3
1000d820:	00c1ff84 	movi	r3,2046
1000d824:	18beb416 	blt	r3,r2,1000d2f8 <__alt_data_end+0xf800d2f8>
1000d828:	a028d0fa 	srli	r20,r20,3
1000d82c:	882a977a 	slli	r21,r17,29
1000d830:	8820927a 	slli	r16,r17,9
1000d834:	1081ffcc 	andi	r2,r2,2047
1000d838:	ad2ab03a 	or	r21,r21,r20
1000d83c:	8020d33a 	srli	r16,r16,12
1000d840:	9900004c 	andi	r4,r19,1
1000d844:	003eb006 	br	1000d308 <__alt_data_end+0xf800d308>
1000d848:	8080022c 	andhi	r2,r16,8
1000d84c:	10001226 	beq	r2,zero,1000d898 <__divdf3+0x70c>
1000d850:	8880022c 	andhi	r2,r17,8
1000d854:	1000101e 	bne	r2,zero,1000d898 <__divdf3+0x70c>
1000d858:	00800434 	movhi	r2,16
1000d85c:	8c000234 	orhi	r16,r17,8
1000d860:	10bfffc4 	addi	r2,r2,-1
1000d864:	b809883a 	mov	r4,r23
1000d868:	80a0703a 	and	r16,r16,r2
1000d86c:	a02b883a 	mov	r21,r20
1000d870:	003f0806 	br	1000d494 <__alt_data_end+0xf800d494>
1000d874:	008000c4 	movi	r2,3
1000d878:	3880b126 	beq	r7,r2,1000db40 <__divdf3+0x9b4>
1000d87c:	00800044 	movi	r2,1
1000d880:	38805b1e 	bne	r7,r2,1000d9f0 <__divdf3+0x864>
1000d884:	e009883a 	mov	r4,fp
1000d888:	0005883a 	mov	r2,zero
1000d88c:	0021883a 	mov	r16,zero
1000d890:	002b883a 	mov	r21,zero
1000d894:	003e9c06 	br	1000d308 <__alt_data_end+0xf800d308>
1000d898:	00800434 	movhi	r2,16
1000d89c:	84000234 	orhi	r16,r16,8
1000d8a0:	10bfffc4 	addi	r2,r2,-1
1000d8a4:	b009883a 	mov	r4,r22
1000d8a8:	80a0703a 	and	r16,r16,r2
1000d8ac:	003ef906 	br	1000d494 <__alt_data_end+0xf800d494>
1000d8b0:	103fca26 	beq	r2,zero,1000d7dc <__alt_data_end+0xf800d7dc>
1000d8b4:	b421883a 	add	r16,r22,r16
1000d8b8:	a17fffc4 	addi	r5,r20,-1
1000d8bc:	8580422e 	bgeu	r16,r22,1000d9c8 <__divdf3+0x83c>
1000d8c0:	2829883a 	mov	r20,r5
1000d8c4:	813fc41e 	bne	r16,r4,1000d7d8 <__alt_data_end+0xf800d7d8>
1000d8c8:	d9800017 	ldw	r6,0(sp)
1000d8cc:	30bfc21e 	bne	r6,r2,1000d7d8 <__alt_data_end+0xf800d7d8>
1000d8d0:	003fc206 	br	1000d7dc <__alt_data_end+0xf800d7dc>
1000d8d4:	143ff604 	addi	r16,r2,-40
1000d8d8:	8c20983a 	sll	r16,r17,r16
1000d8dc:	002b883a 	mov	r21,zero
1000d8e0:	003eb406 	br	1000d3b4 <__alt_data_end+0xf800d3b4>
1000d8e4:	d9800215 	stw	r6,8(sp)
1000d8e8:	d9c00515 	stw	r7,20(sp)
1000d8ec:	da000415 	stw	r8,16(sp)
1000d8f0:	000f1200 	call	1000f120 <__clzsi2>
1000d8f4:	10800804 	addi	r2,r2,32
1000d8f8:	da000417 	ldw	r8,16(sp)
1000d8fc:	d9c00517 	ldw	r7,20(sp)
1000d900:	d9800217 	ldw	r6,8(sp)
1000d904:	003ea106 	br	1000d38c <__alt_data_end+0xf800d38c>
1000d908:	147ff604 	addi	r17,r2,-40
1000d90c:	3462983a 	sll	r17,r6,r17
1000d910:	0029883a 	mov	r20,zero
1000d914:	003ec906 	br	1000d43c <__alt_data_end+0xf800d43c>
1000d918:	3009883a 	mov	r4,r6
1000d91c:	d9400115 	stw	r5,4(sp)
1000d920:	d9800215 	stw	r6,8(sp)
1000d924:	da000415 	stw	r8,16(sp)
1000d928:	da400315 	stw	r9,12(sp)
1000d92c:	000f1200 	call	1000f120 <__clzsi2>
1000d930:	10800804 	addi	r2,r2,32
1000d934:	da400317 	ldw	r9,12(sp)
1000d938:	da000417 	ldw	r8,16(sp)
1000d93c:	d9800217 	ldw	r6,8(sp)
1000d940:	d9400117 	ldw	r5,4(sp)
1000d944:	003eb306 	br	1000d414 <__alt_data_end+0xf800d414>
1000d948:	d9800017 	ldw	r6,0(sp)
1000d94c:	a9ab883a 	add	r21,r21,r6
1000d950:	a98b803a 	cmpltu	r5,r21,r6
1000d954:	2d8b883a 	add	r5,r5,r22
1000d958:	2a11883a 	add	r8,r5,r8
1000d95c:	897fffc4 	addi	r5,r17,-1
1000d960:	b2000c2e 	bgeu	r22,r8,1000d994 <__divdf3+0x808>
1000d964:	41003f36 	bltu	r8,r4,1000da64 <__divdf3+0x8d8>
1000d968:	22006c26 	beq	r4,r8,1000db1c <__divdf3+0x990>
1000d96c:	4109c83a 	sub	r4,r8,r4
1000d970:	2823883a 	mov	r17,r5
1000d974:	003f3b06 	br	1000d664 <__alt_data_end+0xf800d664>
1000d978:	ad3ed336 	bltu	r21,r20,1000d4c8 <__alt_data_end+0xf800d4c8>
1000d97c:	a804d07a 	srli	r2,r21,1
1000d980:	802e97fa 	slli	r23,r16,31
1000d984:	a82a97fa 	slli	r21,r21,31
1000d988:	8020d07a 	srli	r16,r16,1
1000d98c:	b8aeb03a 	or	r23,r23,r2
1000d990:	003ed006 	br	1000d4d4 <__alt_data_end+0xf800d4d4>
1000d994:	b23ff51e 	bne	r22,r8,1000d96c <__alt_data_end+0xf800d96c>
1000d998:	d9800017 	ldw	r6,0(sp)
1000d99c:	a9bff12e 	bgeu	r21,r6,1000d964 <__alt_data_end+0xf800d964>
1000d9a0:	b109c83a 	sub	r4,r22,r4
1000d9a4:	2823883a 	mov	r17,r5
1000d9a8:	003f2e06 	br	1000d664 <__alt_data_end+0xf800d664>
1000d9ac:	2021883a 	mov	r16,r4
1000d9b0:	003eff06 	br	1000d5b0 <__alt_data_end+0xf800d5b0>
1000d9b4:	2023883a 	mov	r17,r4
1000d9b8:	003ee406 	br	1000d54c <__alt_data_end+0xf800d54c>
1000d9bc:	a8bfe236 	bltu	r21,r2,1000d948 <__alt_data_end+0xf800d948>
1000d9c0:	0009883a 	mov	r4,zero
1000d9c4:	003f2706 	br	1000d664 <__alt_data_end+0xf800d664>
1000d9c8:	81002d36 	bltu	r16,r4,1000da80 <__divdf3+0x8f4>
1000d9cc:	24005626 	beq	r4,r16,1000db28 <__divdf3+0x99c>
1000d9d0:	2829883a 	mov	r20,r5
1000d9d4:	003f8006 	br	1000d7d8 <__alt_data_end+0xf800d7d8>
1000d9d8:	053fffc4 	movi	r20,-1
1000d9dc:	003f7f06 	br	1000d7dc <__alt_data_end+0xf800d7dc>
1000d9e0:	200f883a 	mov	r7,r4
1000d9e4:	003f3c06 	br	1000d6d8 <__alt_data_end+0xf800d6d8>
1000d9e8:	1011883a 	mov	r8,r2
1000d9ec:	003f5506 	br	1000d744 <__alt_data_end+0xf800d744>
1000d9f0:	e027883a 	mov	r19,fp
1000d9f4:	003f7906 	br	1000d7dc <__alt_data_end+0xf800d7dc>
1000d9f8:	010007c4 	movi	r4,31
1000d9fc:	20c02816 	blt	r4,r3,1000daa0 <__divdf3+0x914>
1000da00:	00800804 	movi	r2,32
1000da04:	10c5c83a 	sub	r2,r2,r3
1000da08:	888a983a 	sll	r5,r17,r2
1000da0c:	a0c8d83a 	srl	r4,r20,r3
1000da10:	a084983a 	sll	r2,r20,r2
1000da14:	88e2d83a 	srl	r17,r17,r3
1000da18:	2906b03a 	or	r3,r5,r4
1000da1c:	1004c03a 	cmpne	r2,r2,zero
1000da20:	1886b03a 	or	r3,r3,r2
1000da24:	188001cc 	andi	r2,r3,7
1000da28:	10000726 	beq	r2,zero,1000da48 <__divdf3+0x8bc>
1000da2c:	188003cc 	andi	r2,r3,15
1000da30:	01000104 	movi	r4,4
1000da34:	11000426 	beq	r2,r4,1000da48 <__divdf3+0x8bc>
1000da38:	1805883a 	mov	r2,r3
1000da3c:	10c00104 	addi	r3,r2,4
1000da40:	1885803a 	cmpltu	r2,r3,r2
1000da44:	88a3883a 	add	r17,r17,r2
1000da48:	8880202c 	andhi	r2,r17,128
1000da4c:	10002926 	beq	r2,zero,1000daf4 <__divdf3+0x968>
1000da50:	9900004c 	andi	r4,r19,1
1000da54:	00800044 	movi	r2,1
1000da58:	0021883a 	mov	r16,zero
1000da5c:	002b883a 	mov	r21,zero
1000da60:	003e2906 	br	1000d308 <__alt_data_end+0xf800d308>
1000da64:	d9800017 	ldw	r6,0(sp)
1000da68:	8c7fff84 	addi	r17,r17,-2
1000da6c:	a9ab883a 	add	r21,r21,r6
1000da70:	a98b803a 	cmpltu	r5,r21,r6
1000da74:	2d8b883a 	add	r5,r5,r22
1000da78:	2a11883a 	add	r8,r5,r8
1000da7c:	003ef806 	br	1000d660 <__alt_data_end+0xf800d660>
1000da80:	d9800017 	ldw	r6,0(sp)
1000da84:	318f883a 	add	r7,r6,r6
1000da88:	398b803a 	cmpltu	r5,r7,r6
1000da8c:	2d8d883a 	add	r6,r5,r22
1000da90:	81a1883a 	add	r16,r16,r6
1000da94:	a17fff84 	addi	r5,r20,-2
1000da98:	d9c00015 	stw	r7,0(sp)
1000da9c:	003f8806 	br	1000d8c0 <__alt_data_end+0xf800d8c0>
1000daa0:	013ff844 	movi	r4,-31
1000daa4:	2085c83a 	sub	r2,r4,r2
1000daa8:	8888d83a 	srl	r4,r17,r2
1000daac:	00800804 	movi	r2,32
1000dab0:	18802126 	beq	r3,r2,1000db38 <__divdf3+0x9ac>
1000dab4:	04001004 	movi	r16,64
1000dab8:	80c7c83a 	sub	r3,r16,r3
1000dabc:	88e0983a 	sll	r16,r17,r3
1000dac0:	8504b03a 	or	r2,r16,r20
1000dac4:	1004c03a 	cmpne	r2,r2,zero
1000dac8:	2084b03a 	or	r2,r4,r2
1000dacc:	144001cc 	andi	r17,r2,7
1000dad0:	88000d1e 	bne	r17,zero,1000db08 <__divdf3+0x97c>
1000dad4:	0021883a 	mov	r16,zero
1000dad8:	102ad0fa 	srli	r21,r2,3
1000dadc:	9900004c 	andi	r4,r19,1
1000dae0:	0005883a 	mov	r2,zero
1000dae4:	ac6ab03a 	or	r21,r21,r17
1000dae8:	003e0706 	br	1000d308 <__alt_data_end+0xf800d308>
1000daec:	1007883a 	mov	r3,r2
1000daf0:	0023883a 	mov	r17,zero
1000daf4:	8820927a 	slli	r16,r17,9
1000daf8:	1805883a 	mov	r2,r3
1000dafc:	8822977a 	slli	r17,r17,29
1000db00:	8020d33a 	srli	r16,r16,12
1000db04:	003ff406 	br	1000dad8 <__alt_data_end+0xf800dad8>
1000db08:	10c003cc 	andi	r3,r2,15
1000db0c:	01000104 	movi	r4,4
1000db10:	193ff626 	beq	r3,r4,1000daec <__alt_data_end+0xf800daec>
1000db14:	0023883a 	mov	r17,zero
1000db18:	003fc806 	br	1000da3c <__alt_data_end+0xf800da3c>
1000db1c:	a8bfd136 	bltu	r21,r2,1000da64 <__alt_data_end+0xf800da64>
1000db20:	2823883a 	mov	r17,r5
1000db24:	003fa606 	br	1000d9c0 <__alt_data_end+0xf800d9c0>
1000db28:	d9800017 	ldw	r6,0(sp)
1000db2c:	30bfd436 	bltu	r6,r2,1000da80 <__alt_data_end+0xf800da80>
1000db30:	2829883a 	mov	r20,r5
1000db34:	003f6406 	br	1000d8c8 <__alt_data_end+0xf800d8c8>
1000db38:	0021883a 	mov	r16,zero
1000db3c:	003fe006 	br	1000dac0 <__alt_data_end+0xf800dac0>
1000db40:	00800434 	movhi	r2,16
1000db44:	8c000234 	orhi	r16,r17,8
1000db48:	10bfffc4 	addi	r2,r2,-1
1000db4c:	e009883a 	mov	r4,fp
1000db50:	80a0703a 	and	r16,r16,r2
1000db54:	a02b883a 	mov	r21,r20
1000db58:	003e4e06 	br	1000d494 <__alt_data_end+0xf800d494>

1000db5c <__eqdf2>:
1000db5c:	2804d53a 	srli	r2,r5,20
1000db60:	3806d53a 	srli	r3,r7,20
1000db64:	02000434 	movhi	r8,16
1000db68:	423fffc4 	addi	r8,r8,-1
1000db6c:	1081ffcc 	andi	r2,r2,2047
1000db70:	0281ffc4 	movi	r10,2047
1000db74:	2a12703a 	and	r9,r5,r8
1000db78:	18c1ffcc 	andi	r3,r3,2047
1000db7c:	3a10703a 	and	r8,r7,r8
1000db80:	280ad7fa 	srli	r5,r5,31
1000db84:	380ed7fa 	srli	r7,r7,31
1000db88:	12801026 	beq	r2,r10,1000dbcc <__eqdf2+0x70>
1000db8c:	0281ffc4 	movi	r10,2047
1000db90:	1a800a26 	beq	r3,r10,1000dbbc <__eqdf2+0x60>
1000db94:	10c00226 	beq	r2,r3,1000dba0 <__eqdf2+0x44>
1000db98:	00800044 	movi	r2,1
1000db9c:	f800283a 	ret
1000dba0:	4a3ffd1e 	bne	r9,r8,1000db98 <__alt_data_end+0xf800db98>
1000dba4:	21bffc1e 	bne	r4,r6,1000db98 <__alt_data_end+0xf800db98>
1000dba8:	29c00c26 	beq	r5,r7,1000dbdc <__eqdf2+0x80>
1000dbac:	103ffa1e 	bne	r2,zero,1000db98 <__alt_data_end+0xf800db98>
1000dbb0:	2244b03a 	or	r2,r4,r9
1000dbb4:	1004c03a 	cmpne	r2,r2,zero
1000dbb8:	f800283a 	ret
1000dbbc:	3214b03a 	or	r10,r6,r8
1000dbc0:	503ff426 	beq	r10,zero,1000db94 <__alt_data_end+0xf800db94>
1000dbc4:	00800044 	movi	r2,1
1000dbc8:	f800283a 	ret
1000dbcc:	2254b03a 	or	r10,r4,r9
1000dbd0:	503fee26 	beq	r10,zero,1000db8c <__alt_data_end+0xf800db8c>
1000dbd4:	00800044 	movi	r2,1
1000dbd8:	f800283a 	ret
1000dbdc:	0005883a 	mov	r2,zero
1000dbe0:	f800283a 	ret

1000dbe4 <__gedf2>:
1000dbe4:	2804d53a 	srli	r2,r5,20
1000dbe8:	3806d53a 	srli	r3,r7,20
1000dbec:	02000434 	movhi	r8,16
1000dbf0:	423fffc4 	addi	r8,r8,-1
1000dbf4:	1081ffcc 	andi	r2,r2,2047
1000dbf8:	0241ffc4 	movi	r9,2047
1000dbfc:	2a14703a 	and	r10,r5,r8
1000dc00:	18c1ffcc 	andi	r3,r3,2047
1000dc04:	3a10703a 	and	r8,r7,r8
1000dc08:	280ad7fa 	srli	r5,r5,31
1000dc0c:	380ed7fa 	srli	r7,r7,31
1000dc10:	12401d26 	beq	r2,r9,1000dc88 <__gedf2+0xa4>
1000dc14:	0241ffc4 	movi	r9,2047
1000dc18:	1a401226 	beq	r3,r9,1000dc64 <__gedf2+0x80>
1000dc1c:	1000081e 	bne	r2,zero,1000dc40 <__gedf2+0x5c>
1000dc20:	2296b03a 	or	r11,r4,r10
1000dc24:	5813003a 	cmpeq	r9,r11,zero
1000dc28:	1800091e 	bne	r3,zero,1000dc50 <__gedf2+0x6c>
1000dc2c:	3218b03a 	or	r12,r6,r8
1000dc30:	6000071e 	bne	r12,zero,1000dc50 <__gedf2+0x6c>
1000dc34:	0005883a 	mov	r2,zero
1000dc38:	5800101e 	bne	r11,zero,1000dc7c <__gedf2+0x98>
1000dc3c:	f800283a 	ret
1000dc40:	18000c1e 	bne	r3,zero,1000dc74 <__gedf2+0x90>
1000dc44:	3212b03a 	or	r9,r6,r8
1000dc48:	48000c26 	beq	r9,zero,1000dc7c <__gedf2+0x98>
1000dc4c:	0013883a 	mov	r9,zero
1000dc50:	39c03fcc 	andi	r7,r7,255
1000dc54:	48000826 	beq	r9,zero,1000dc78 <__gedf2+0x94>
1000dc58:	38000926 	beq	r7,zero,1000dc80 <__gedf2+0x9c>
1000dc5c:	00800044 	movi	r2,1
1000dc60:	f800283a 	ret
1000dc64:	3212b03a 	or	r9,r6,r8
1000dc68:	483fec26 	beq	r9,zero,1000dc1c <__alt_data_end+0xf800dc1c>
1000dc6c:	00bfff84 	movi	r2,-2
1000dc70:	f800283a 	ret
1000dc74:	39c03fcc 	andi	r7,r7,255
1000dc78:	29c00626 	beq	r5,r7,1000dc94 <__gedf2+0xb0>
1000dc7c:	283ff726 	beq	r5,zero,1000dc5c <__alt_data_end+0xf800dc5c>
1000dc80:	00bfffc4 	movi	r2,-1
1000dc84:	f800283a 	ret
1000dc88:	2292b03a 	or	r9,r4,r10
1000dc8c:	483fe126 	beq	r9,zero,1000dc14 <__alt_data_end+0xf800dc14>
1000dc90:	003ff606 	br	1000dc6c <__alt_data_end+0xf800dc6c>
1000dc94:	18bff916 	blt	r3,r2,1000dc7c <__alt_data_end+0xf800dc7c>
1000dc98:	10c00316 	blt	r2,r3,1000dca8 <__gedf2+0xc4>
1000dc9c:	42bff736 	bltu	r8,r10,1000dc7c <__alt_data_end+0xf800dc7c>
1000dca0:	52000326 	beq	r10,r8,1000dcb0 <__gedf2+0xcc>
1000dca4:	5200042e 	bgeu	r10,r8,1000dcb8 <__gedf2+0xd4>
1000dca8:	283fec1e 	bne	r5,zero,1000dc5c <__alt_data_end+0xf800dc5c>
1000dcac:	003ff406 	br	1000dc80 <__alt_data_end+0xf800dc80>
1000dcb0:	313ff236 	bltu	r6,r4,1000dc7c <__alt_data_end+0xf800dc7c>
1000dcb4:	21bffc36 	bltu	r4,r6,1000dca8 <__alt_data_end+0xf800dca8>
1000dcb8:	0005883a 	mov	r2,zero
1000dcbc:	f800283a 	ret

1000dcc0 <__ledf2>:
1000dcc0:	2804d53a 	srli	r2,r5,20
1000dcc4:	3810d53a 	srli	r8,r7,20
1000dcc8:	00c00434 	movhi	r3,16
1000dccc:	18ffffc4 	addi	r3,r3,-1
1000dcd0:	1081ffcc 	andi	r2,r2,2047
1000dcd4:	0241ffc4 	movi	r9,2047
1000dcd8:	28d4703a 	and	r10,r5,r3
1000dcdc:	4201ffcc 	andi	r8,r8,2047
1000dce0:	38c6703a 	and	r3,r7,r3
1000dce4:	280ad7fa 	srli	r5,r5,31
1000dce8:	380ed7fa 	srli	r7,r7,31
1000dcec:	12401f26 	beq	r2,r9,1000dd6c <__ledf2+0xac>
1000dcf0:	0241ffc4 	movi	r9,2047
1000dcf4:	42401426 	beq	r8,r9,1000dd48 <__ledf2+0x88>
1000dcf8:	1000091e 	bne	r2,zero,1000dd20 <__ledf2+0x60>
1000dcfc:	2296b03a 	or	r11,r4,r10
1000dd00:	5813003a 	cmpeq	r9,r11,zero
1000dd04:	29403fcc 	andi	r5,r5,255
1000dd08:	40000a1e 	bne	r8,zero,1000dd34 <__ledf2+0x74>
1000dd0c:	30d8b03a 	or	r12,r6,r3
1000dd10:	6000081e 	bne	r12,zero,1000dd34 <__ledf2+0x74>
1000dd14:	0005883a 	mov	r2,zero
1000dd18:	5800111e 	bne	r11,zero,1000dd60 <__ledf2+0xa0>
1000dd1c:	f800283a 	ret
1000dd20:	29403fcc 	andi	r5,r5,255
1000dd24:	40000c1e 	bne	r8,zero,1000dd58 <__ledf2+0x98>
1000dd28:	30d2b03a 	or	r9,r6,r3
1000dd2c:	48000c26 	beq	r9,zero,1000dd60 <__ledf2+0xa0>
1000dd30:	0013883a 	mov	r9,zero
1000dd34:	39c03fcc 	andi	r7,r7,255
1000dd38:	48000826 	beq	r9,zero,1000dd5c <__ledf2+0x9c>
1000dd3c:	38001126 	beq	r7,zero,1000dd84 <__ledf2+0xc4>
1000dd40:	00800044 	movi	r2,1
1000dd44:	f800283a 	ret
1000dd48:	30d2b03a 	or	r9,r6,r3
1000dd4c:	483fea26 	beq	r9,zero,1000dcf8 <__alt_data_end+0xf800dcf8>
1000dd50:	00800084 	movi	r2,2
1000dd54:	f800283a 	ret
1000dd58:	39c03fcc 	andi	r7,r7,255
1000dd5c:	39400726 	beq	r7,r5,1000dd7c <__ledf2+0xbc>
1000dd60:	2800081e 	bne	r5,zero,1000dd84 <__ledf2+0xc4>
1000dd64:	00800044 	movi	r2,1
1000dd68:	f800283a 	ret
1000dd6c:	2292b03a 	or	r9,r4,r10
1000dd70:	483fdf26 	beq	r9,zero,1000dcf0 <__alt_data_end+0xf800dcf0>
1000dd74:	00800084 	movi	r2,2
1000dd78:	f800283a 	ret
1000dd7c:	4080030e 	bge	r8,r2,1000dd8c <__ledf2+0xcc>
1000dd80:	383fef26 	beq	r7,zero,1000dd40 <__alt_data_end+0xf800dd40>
1000dd84:	00bfffc4 	movi	r2,-1
1000dd88:	f800283a 	ret
1000dd8c:	123feb16 	blt	r2,r8,1000dd3c <__alt_data_end+0xf800dd3c>
1000dd90:	1abff336 	bltu	r3,r10,1000dd60 <__alt_data_end+0xf800dd60>
1000dd94:	50c00326 	beq	r10,r3,1000dda4 <__ledf2+0xe4>
1000dd98:	50c0042e 	bgeu	r10,r3,1000ddac <__ledf2+0xec>
1000dd9c:	283fe81e 	bne	r5,zero,1000dd40 <__alt_data_end+0xf800dd40>
1000dda0:	003ff806 	br	1000dd84 <__alt_data_end+0xf800dd84>
1000dda4:	313fee36 	bltu	r6,r4,1000dd60 <__alt_data_end+0xf800dd60>
1000dda8:	21bffc36 	bltu	r4,r6,1000dd9c <__alt_data_end+0xf800dd9c>
1000ddac:	0005883a 	mov	r2,zero
1000ddb0:	f800283a 	ret

1000ddb4 <__muldf3>:
1000ddb4:	deffee04 	addi	sp,sp,-72
1000ddb8:	dd000c15 	stw	r20,48(sp)
1000ddbc:	2828d53a 	srli	r20,r5,20
1000ddc0:	ddc00f15 	stw	r23,60(sp)
1000ddc4:	282ed7fa 	srli	r23,r5,31
1000ddc8:	dc000815 	stw	r16,32(sp)
1000ddcc:	04000434 	movhi	r16,16
1000ddd0:	dcc00b15 	stw	r19,44(sp)
1000ddd4:	843fffc4 	addi	r16,r16,-1
1000ddd8:	dfc01115 	stw	ra,68(sp)
1000dddc:	df001015 	stw	fp,64(sp)
1000dde0:	dd800e15 	stw	r22,56(sp)
1000dde4:	dd400d15 	stw	r21,52(sp)
1000dde8:	dc800a15 	stw	r18,40(sp)
1000ddec:	dc400915 	stw	r17,36(sp)
1000ddf0:	a501ffcc 	andi	r20,r20,2047
1000ddf4:	2c20703a 	and	r16,r5,r16
1000ddf8:	b827883a 	mov	r19,r23
1000ddfc:	ba403fcc 	andi	r9,r23,255
1000de00:	a0006026 	beq	r20,zero,1000df84 <__muldf3+0x1d0>
1000de04:	0081ffc4 	movi	r2,2047
1000de08:	202d883a 	mov	r22,r4
1000de0c:	a0803626 	beq	r20,r2,1000dee8 <__muldf3+0x134>
1000de10:	84000434 	orhi	r16,r16,16
1000de14:	200ad77a 	srli	r5,r4,29
1000de18:	800490fa 	slli	r2,r16,3
1000de1c:	202c90fa 	slli	r22,r4,3
1000de20:	a53f0044 	addi	r20,r20,-1023
1000de24:	28a0b03a 	or	r16,r5,r2
1000de28:	002b883a 	mov	r21,zero
1000de2c:	000b883a 	mov	r5,zero
1000de30:	3804d53a 	srli	r2,r7,20
1000de34:	3838d7fa 	srli	fp,r7,31
1000de38:	04400434 	movhi	r17,16
1000de3c:	8c7fffc4 	addi	r17,r17,-1
1000de40:	1081ffcc 	andi	r2,r2,2047
1000de44:	3025883a 	mov	r18,r6
1000de48:	3c62703a 	and	r17,r7,r17
1000de4c:	e2803fcc 	andi	r10,fp,255
1000de50:	10006d26 	beq	r2,zero,1000e008 <__muldf3+0x254>
1000de54:	00c1ffc4 	movi	r3,2047
1000de58:	10c06526 	beq	r2,r3,1000dff0 <__muldf3+0x23c>
1000de5c:	8c400434 	orhi	r17,r17,16
1000de60:	300ed77a 	srli	r7,r6,29
1000de64:	880690fa 	slli	r3,r17,3
1000de68:	302490fa 	slli	r18,r6,3
1000de6c:	10bf0044 	addi	r2,r2,-1023
1000de70:	38e2b03a 	or	r17,r7,r3
1000de74:	000f883a 	mov	r7,zero
1000de78:	a087883a 	add	r3,r20,r2
1000de7c:	010003c4 	movi	r4,15
1000de80:	3d44b03a 	or	r2,r7,r21
1000de84:	e5ccf03a 	xor	r6,fp,r23
1000de88:	1a000044 	addi	r8,r3,1
1000de8c:	20809b36 	bltu	r4,r2,1000e0fc <__muldf3+0x348>
1000de90:	100490ba 	slli	r2,r2,2
1000de94:	01040074 	movhi	r4,4097
1000de98:	2137aa04 	addi	r4,r4,-8536
1000de9c:	1105883a 	add	r2,r2,r4
1000dea0:	10800017 	ldw	r2,0(r2)
1000dea4:	1000683a 	jmp	r2
1000dea8:	1000e0fc 	xorhi	zero,r2,899
1000deac:	1000df08 	cmpgei	zero,r2,892
1000deb0:	1000df08 	cmpgei	zero,r2,892
1000deb4:	1000df04 	addi	zero,r2,892
1000deb8:	1000e0d8 	cmpnei	zero,r2,899
1000debc:	1000e0d8 	cmpnei	zero,r2,899
1000dec0:	1000e0c0 	call	11000e0c <_gp+0xfe4f44>
1000dec4:	1000df04 	addi	zero,r2,892
1000dec8:	1000e0d8 	cmpnei	zero,r2,899
1000decc:	1000e0c0 	call	11000e0c <_gp+0xfe4f44>
1000ded0:	1000e0d8 	cmpnei	zero,r2,899
1000ded4:	1000df04 	addi	zero,r2,892
1000ded8:	1000e0e8 	cmpgeui	zero,r2,899
1000dedc:	1000e0e8 	cmpgeui	zero,r2,899
1000dee0:	1000e0e8 	cmpgeui	zero,r2,899
1000dee4:	1000e448 	cmpgei	zero,r2,913
1000dee8:	2404b03a 	or	r2,r4,r16
1000deec:	1000711e 	bne	r2,zero,1000e0b4 <__muldf3+0x300>
1000def0:	05400204 	movi	r21,8
1000def4:	0021883a 	mov	r16,zero
1000def8:	002d883a 	mov	r22,zero
1000defc:	01400084 	movi	r5,2
1000df00:	003fcb06 	br	1000de30 <__alt_data_end+0xf800de30>
1000df04:	500d883a 	mov	r6,r10
1000df08:	00800084 	movi	r2,2
1000df0c:	38805926 	beq	r7,r2,1000e074 <__muldf3+0x2c0>
1000df10:	008000c4 	movi	r2,3
1000df14:	3881bb26 	beq	r7,r2,1000e604 <__muldf3+0x850>
1000df18:	00800044 	movi	r2,1
1000df1c:	3881961e 	bne	r7,r2,1000e578 <__muldf3+0x7c4>
1000df20:	3027883a 	mov	r19,r6
1000df24:	0005883a 	mov	r2,zero
1000df28:	0021883a 	mov	r16,zero
1000df2c:	002d883a 	mov	r22,zero
1000df30:	1004953a 	slli	r2,r2,20
1000df34:	98c03fcc 	andi	r3,r19,255
1000df38:	04400434 	movhi	r17,16
1000df3c:	8c7fffc4 	addi	r17,r17,-1
1000df40:	180697fa 	slli	r3,r3,31
1000df44:	8460703a 	and	r16,r16,r17
1000df48:	80a0b03a 	or	r16,r16,r2
1000df4c:	80c6b03a 	or	r3,r16,r3
1000df50:	b005883a 	mov	r2,r22
1000df54:	dfc01117 	ldw	ra,68(sp)
1000df58:	df001017 	ldw	fp,64(sp)
1000df5c:	ddc00f17 	ldw	r23,60(sp)
1000df60:	dd800e17 	ldw	r22,56(sp)
1000df64:	dd400d17 	ldw	r21,52(sp)
1000df68:	dd000c17 	ldw	r20,48(sp)
1000df6c:	dcc00b17 	ldw	r19,44(sp)
1000df70:	dc800a17 	ldw	r18,40(sp)
1000df74:	dc400917 	ldw	r17,36(sp)
1000df78:	dc000817 	ldw	r16,32(sp)
1000df7c:	dec01204 	addi	sp,sp,72
1000df80:	f800283a 	ret
1000df84:	2404b03a 	or	r2,r4,r16
1000df88:	202b883a 	mov	r21,r4
1000df8c:	10004426 	beq	r2,zero,1000e0a0 <__muldf3+0x2ec>
1000df90:	80015126 	beq	r16,zero,1000e4d8 <__muldf3+0x724>
1000df94:	8009883a 	mov	r4,r16
1000df98:	d9800715 	stw	r6,28(sp)
1000df9c:	d9c00215 	stw	r7,8(sp)
1000dfa0:	da400415 	stw	r9,16(sp)
1000dfa4:	000f1200 	call	1000f120 <__clzsi2>
1000dfa8:	d9800717 	ldw	r6,28(sp)
1000dfac:	d9c00217 	ldw	r7,8(sp)
1000dfb0:	da400417 	ldw	r9,16(sp)
1000dfb4:	113ffd44 	addi	r4,r2,-11
1000dfb8:	00c00704 	movi	r3,28
1000dfbc:	19014216 	blt	r3,r4,1000e4c8 <__muldf3+0x714>
1000dfc0:	00c00744 	movi	r3,29
1000dfc4:	15bffe04 	addi	r22,r2,-8
1000dfc8:	1907c83a 	sub	r3,r3,r4
1000dfcc:	85a0983a 	sll	r16,r16,r22
1000dfd0:	a8c6d83a 	srl	r3,r21,r3
1000dfd4:	adac983a 	sll	r22,r21,r22
1000dfd8:	1c20b03a 	or	r16,r3,r16
1000dfdc:	1080fcc4 	addi	r2,r2,1011
1000dfe0:	00a9c83a 	sub	r20,zero,r2
1000dfe4:	002b883a 	mov	r21,zero
1000dfe8:	000b883a 	mov	r5,zero
1000dfec:	003f9006 	br	1000de30 <__alt_data_end+0xf800de30>
1000dff0:	3446b03a 	or	r3,r6,r17
1000dff4:	1800281e 	bne	r3,zero,1000e098 <__muldf3+0x2e4>
1000dff8:	0023883a 	mov	r17,zero
1000dffc:	0025883a 	mov	r18,zero
1000e000:	01c00084 	movi	r7,2
1000e004:	003f9c06 	br	1000de78 <__alt_data_end+0xf800de78>
1000e008:	3446b03a 	or	r3,r6,r17
1000e00c:	18001e26 	beq	r3,zero,1000e088 <__muldf3+0x2d4>
1000e010:	88012126 	beq	r17,zero,1000e498 <__muldf3+0x6e4>
1000e014:	8809883a 	mov	r4,r17
1000e018:	d9400215 	stw	r5,8(sp)
1000e01c:	d9800715 	stw	r6,28(sp)
1000e020:	da400415 	stw	r9,16(sp)
1000e024:	da800315 	stw	r10,12(sp)
1000e028:	000f1200 	call	1000f120 <__clzsi2>
1000e02c:	d9400217 	ldw	r5,8(sp)
1000e030:	d9800717 	ldw	r6,28(sp)
1000e034:	da400417 	ldw	r9,16(sp)
1000e038:	da800317 	ldw	r10,12(sp)
1000e03c:	113ffd44 	addi	r4,r2,-11
1000e040:	00c00704 	movi	r3,28
1000e044:	19011016 	blt	r3,r4,1000e488 <__muldf3+0x6d4>
1000e048:	00c00744 	movi	r3,29
1000e04c:	14bffe04 	addi	r18,r2,-8
1000e050:	1907c83a 	sub	r3,r3,r4
1000e054:	8ca2983a 	sll	r17,r17,r18
1000e058:	30c6d83a 	srl	r3,r6,r3
1000e05c:	34a4983a 	sll	r18,r6,r18
1000e060:	1c62b03a 	or	r17,r3,r17
1000e064:	1080fcc4 	addi	r2,r2,1011
1000e068:	0085c83a 	sub	r2,zero,r2
1000e06c:	000f883a 	mov	r7,zero
1000e070:	003f8106 	br	1000de78 <__alt_data_end+0xf800de78>
1000e074:	3027883a 	mov	r19,r6
1000e078:	0081ffc4 	movi	r2,2047
1000e07c:	0021883a 	mov	r16,zero
1000e080:	002d883a 	mov	r22,zero
1000e084:	003faa06 	br	1000df30 <__alt_data_end+0xf800df30>
1000e088:	0023883a 	mov	r17,zero
1000e08c:	0025883a 	mov	r18,zero
1000e090:	01c00044 	movi	r7,1
1000e094:	003f7806 	br	1000de78 <__alt_data_end+0xf800de78>
1000e098:	01c000c4 	movi	r7,3
1000e09c:	003f7606 	br	1000de78 <__alt_data_end+0xf800de78>
1000e0a0:	05400104 	movi	r21,4
1000e0a4:	0021883a 	mov	r16,zero
1000e0a8:	002d883a 	mov	r22,zero
1000e0ac:	01400044 	movi	r5,1
1000e0b0:	003f5f06 	br	1000de30 <__alt_data_end+0xf800de30>
1000e0b4:	05400304 	movi	r21,12
1000e0b8:	014000c4 	movi	r5,3
1000e0bc:	003f5c06 	br	1000de30 <__alt_data_end+0xf800de30>
1000e0c0:	04000434 	movhi	r16,16
1000e0c4:	0027883a 	mov	r19,zero
1000e0c8:	843fffc4 	addi	r16,r16,-1
1000e0cc:	05bfffc4 	movi	r22,-1
1000e0d0:	0081ffc4 	movi	r2,2047
1000e0d4:	003f9606 	br	1000df30 <__alt_data_end+0xf800df30>
1000e0d8:	8023883a 	mov	r17,r16
1000e0dc:	b025883a 	mov	r18,r22
1000e0e0:	280f883a 	mov	r7,r5
1000e0e4:	003f8806 	br	1000df08 <__alt_data_end+0xf800df08>
1000e0e8:	8023883a 	mov	r17,r16
1000e0ec:	b025883a 	mov	r18,r22
1000e0f0:	480d883a 	mov	r6,r9
1000e0f4:	280f883a 	mov	r7,r5
1000e0f8:	003f8306 	br	1000df08 <__alt_data_end+0xf800df08>
1000e0fc:	b026d43a 	srli	r19,r22,16
1000e100:	902ed43a 	srli	r23,r18,16
1000e104:	b5bfffcc 	andi	r22,r22,65535
1000e108:	94bfffcc 	andi	r18,r18,65535
1000e10c:	b00b883a 	mov	r5,r22
1000e110:	9009883a 	mov	r4,r18
1000e114:	d8c00515 	stw	r3,20(sp)
1000e118:	d9800715 	stw	r6,28(sp)
1000e11c:	da000615 	stw	r8,24(sp)
1000e120:	000c8b80 	call	1000c8b8 <__mulsi3>
1000e124:	980b883a 	mov	r5,r19
1000e128:	9009883a 	mov	r4,r18
1000e12c:	1029883a 	mov	r20,r2
1000e130:	000c8b80 	call	1000c8b8 <__mulsi3>
1000e134:	b80b883a 	mov	r5,r23
1000e138:	9809883a 	mov	r4,r19
1000e13c:	102b883a 	mov	r21,r2
1000e140:	000c8b80 	call	1000c8b8 <__mulsi3>
1000e144:	b809883a 	mov	r4,r23
1000e148:	b00b883a 	mov	r5,r22
1000e14c:	1039883a 	mov	fp,r2
1000e150:	000c8b80 	call	1000c8b8 <__mulsi3>
1000e154:	a008d43a 	srli	r4,r20,16
1000e158:	1545883a 	add	r2,r2,r21
1000e15c:	d8c00517 	ldw	r3,20(sp)
1000e160:	2085883a 	add	r2,r4,r2
1000e164:	d9800717 	ldw	r6,28(sp)
1000e168:	da000617 	ldw	r8,24(sp)
1000e16c:	1540022e 	bgeu	r2,r21,1000e178 <__muldf3+0x3c4>
1000e170:	01000074 	movhi	r4,1
1000e174:	e139883a 	add	fp,fp,r4
1000e178:	100e943a 	slli	r7,r2,16
1000e17c:	1004d43a 	srli	r2,r2,16
1000e180:	882ad43a 	srli	r21,r17,16
1000e184:	a53fffcc 	andi	r20,r20,65535
1000e188:	8c7fffcc 	andi	r17,r17,65535
1000e18c:	3d29883a 	add	r20,r7,r20
1000e190:	b00b883a 	mov	r5,r22
1000e194:	8809883a 	mov	r4,r17
1000e198:	d8c00515 	stw	r3,20(sp)
1000e19c:	d9800715 	stw	r6,28(sp)
1000e1a0:	da000615 	stw	r8,24(sp)
1000e1a4:	dd000115 	stw	r20,4(sp)
1000e1a8:	d8800015 	stw	r2,0(sp)
1000e1ac:	000c8b80 	call	1000c8b8 <__mulsi3>
1000e1b0:	980b883a 	mov	r5,r19
1000e1b4:	8809883a 	mov	r4,r17
1000e1b8:	d8800215 	stw	r2,8(sp)
1000e1bc:	000c8b80 	call	1000c8b8 <__mulsi3>
1000e1c0:	9809883a 	mov	r4,r19
1000e1c4:	a80b883a 	mov	r5,r21
1000e1c8:	1029883a 	mov	r20,r2
1000e1cc:	000c8b80 	call	1000c8b8 <__mulsi3>
1000e1d0:	b00b883a 	mov	r5,r22
1000e1d4:	a809883a 	mov	r4,r21
1000e1d8:	d8800415 	stw	r2,16(sp)
1000e1dc:	000c8b80 	call	1000c8b8 <__mulsi3>
1000e1e0:	d9c00217 	ldw	r7,8(sp)
1000e1e4:	1505883a 	add	r2,r2,r20
1000e1e8:	d8c00517 	ldw	r3,20(sp)
1000e1ec:	3826d43a 	srli	r19,r7,16
1000e1f0:	d9800717 	ldw	r6,28(sp)
1000e1f4:	da000617 	ldw	r8,24(sp)
1000e1f8:	9885883a 	add	r2,r19,r2
1000e1fc:	da400417 	ldw	r9,16(sp)
1000e200:	1500022e 	bgeu	r2,r20,1000e20c <__muldf3+0x458>
1000e204:	01000074 	movhi	r4,1
1000e208:	4913883a 	add	r9,r9,r4
1000e20c:	1028d43a 	srli	r20,r2,16
1000e210:	1004943a 	slli	r2,r2,16
1000e214:	802cd43a 	srli	r22,r16,16
1000e218:	843fffcc 	andi	r16,r16,65535
1000e21c:	3cffffcc 	andi	r19,r7,65535
1000e220:	9009883a 	mov	r4,r18
1000e224:	800b883a 	mov	r5,r16
1000e228:	a269883a 	add	r20,r20,r9
1000e22c:	d8c00515 	stw	r3,20(sp)
1000e230:	d9800715 	stw	r6,28(sp)
1000e234:	da000615 	stw	r8,24(sp)
1000e238:	14e7883a 	add	r19,r2,r19
1000e23c:	000c8b80 	call	1000c8b8 <__mulsi3>
1000e240:	9009883a 	mov	r4,r18
1000e244:	b00b883a 	mov	r5,r22
1000e248:	d8800315 	stw	r2,12(sp)
1000e24c:	000c8b80 	call	1000c8b8 <__mulsi3>
1000e250:	b809883a 	mov	r4,r23
1000e254:	b00b883a 	mov	r5,r22
1000e258:	d8800215 	stw	r2,8(sp)
1000e25c:	000c8b80 	call	1000c8b8 <__mulsi3>
1000e260:	b80b883a 	mov	r5,r23
1000e264:	8009883a 	mov	r4,r16
1000e268:	d8800415 	stw	r2,16(sp)
1000e26c:	000c8b80 	call	1000c8b8 <__mulsi3>
1000e270:	da800317 	ldw	r10,12(sp)
1000e274:	d9c00217 	ldw	r7,8(sp)
1000e278:	d9000017 	ldw	r4,0(sp)
1000e27c:	502ed43a 	srli	r23,r10,16
1000e280:	11c5883a 	add	r2,r2,r7
1000e284:	24e5883a 	add	r18,r4,r19
1000e288:	b885883a 	add	r2,r23,r2
1000e28c:	d8c00517 	ldw	r3,20(sp)
1000e290:	d9800717 	ldw	r6,28(sp)
1000e294:	da000617 	ldw	r8,24(sp)
1000e298:	da400417 	ldw	r9,16(sp)
1000e29c:	11c0022e 	bgeu	r2,r7,1000e2a8 <__muldf3+0x4f4>
1000e2a0:	01000074 	movhi	r4,1
1000e2a4:	4913883a 	add	r9,r9,r4
1000e2a8:	100ed43a 	srli	r7,r2,16
1000e2ac:	1004943a 	slli	r2,r2,16
1000e2b0:	55ffffcc 	andi	r23,r10,65535
1000e2b4:	3a53883a 	add	r9,r7,r9
1000e2b8:	8809883a 	mov	r4,r17
1000e2bc:	800b883a 	mov	r5,r16
1000e2c0:	d8c00515 	stw	r3,20(sp)
1000e2c4:	d9800715 	stw	r6,28(sp)
1000e2c8:	da000615 	stw	r8,24(sp)
1000e2cc:	da400415 	stw	r9,16(sp)
1000e2d0:	15ef883a 	add	r23,r2,r23
1000e2d4:	000c8b80 	call	1000c8b8 <__mulsi3>
1000e2d8:	8809883a 	mov	r4,r17
1000e2dc:	b00b883a 	mov	r5,r22
1000e2e0:	d8800215 	stw	r2,8(sp)
1000e2e4:	000c8b80 	call	1000c8b8 <__mulsi3>
1000e2e8:	b00b883a 	mov	r5,r22
1000e2ec:	a809883a 	mov	r4,r21
1000e2f0:	d8800315 	stw	r2,12(sp)
1000e2f4:	000c8b80 	call	1000c8b8 <__mulsi3>
1000e2f8:	8009883a 	mov	r4,r16
1000e2fc:	a80b883a 	mov	r5,r21
1000e300:	1023883a 	mov	r17,r2
1000e304:	000c8b80 	call	1000c8b8 <__mulsi3>
1000e308:	d9c00217 	ldw	r7,8(sp)
1000e30c:	da800317 	ldw	r10,12(sp)
1000e310:	d8c00517 	ldw	r3,20(sp)
1000e314:	3808d43a 	srli	r4,r7,16
1000e318:	1285883a 	add	r2,r2,r10
1000e31c:	d9800717 	ldw	r6,28(sp)
1000e320:	2085883a 	add	r2,r4,r2
1000e324:	da000617 	ldw	r8,24(sp)
1000e328:	da400417 	ldw	r9,16(sp)
1000e32c:	1280022e 	bgeu	r2,r10,1000e338 <__muldf3+0x584>
1000e330:	01000074 	movhi	r4,1
1000e334:	8923883a 	add	r17,r17,r4
1000e338:	1008943a 	slli	r4,r2,16
1000e33c:	39ffffcc 	andi	r7,r7,65535
1000e340:	e4b9883a 	add	fp,fp,r18
1000e344:	21cf883a 	add	r7,r4,r7
1000e348:	e4e7803a 	cmpltu	r19,fp,r19
1000e34c:	3d0f883a 	add	r7,r7,r20
1000e350:	bf39883a 	add	fp,r23,fp
1000e354:	99c9883a 	add	r4,r19,r7
1000e358:	e5ef803a 	cmpltu	r23,fp,r23
1000e35c:	490b883a 	add	r5,r9,r4
1000e360:	1004d43a 	srli	r2,r2,16
1000e364:	b965883a 	add	r18,r23,r5
1000e368:	24c9803a 	cmpltu	r4,r4,r19
1000e36c:	3d29803a 	cmpltu	r20,r7,r20
1000e370:	a128b03a 	or	r20,r20,r4
1000e374:	95ef803a 	cmpltu	r23,r18,r23
1000e378:	2a53803a 	cmpltu	r9,r5,r9
1000e37c:	a0a9883a 	add	r20,r20,r2
1000e380:	4deeb03a 	or	r23,r9,r23
1000e384:	a5ef883a 	add	r23,r20,r23
1000e388:	bc63883a 	add	r17,r23,r17
1000e38c:	e004927a 	slli	r2,fp,9
1000e390:	d9000117 	ldw	r4,4(sp)
1000e394:	882e927a 	slli	r23,r17,9
1000e398:	9022d5fa 	srli	r17,r18,23
1000e39c:	e038d5fa 	srli	fp,fp,23
1000e3a0:	1104b03a 	or	r2,r2,r4
1000e3a4:	9024927a 	slli	r18,r18,9
1000e3a8:	1004c03a 	cmpne	r2,r2,zero
1000e3ac:	bc62b03a 	or	r17,r23,r17
1000e3b0:	1738b03a 	or	fp,r2,fp
1000e3b4:	8880402c 	andhi	r2,r17,256
1000e3b8:	e4a4b03a 	or	r18,fp,r18
1000e3bc:	10000726 	beq	r2,zero,1000e3dc <__muldf3+0x628>
1000e3c0:	9006d07a 	srli	r3,r18,1
1000e3c4:	880497fa 	slli	r2,r17,31
1000e3c8:	9480004c 	andi	r18,r18,1
1000e3cc:	8822d07a 	srli	r17,r17,1
1000e3d0:	1ca4b03a 	or	r18,r3,r18
1000e3d4:	14a4b03a 	or	r18,r2,r18
1000e3d8:	4007883a 	mov	r3,r8
1000e3dc:	1880ffc4 	addi	r2,r3,1023
1000e3e0:	0080460e 	bge	zero,r2,1000e4fc <__muldf3+0x748>
1000e3e4:	910001cc 	andi	r4,r18,7
1000e3e8:	20000726 	beq	r4,zero,1000e408 <__muldf3+0x654>
1000e3ec:	910003cc 	andi	r4,r18,15
1000e3f0:	01400104 	movi	r5,4
1000e3f4:	21400426 	beq	r4,r5,1000e408 <__muldf3+0x654>
1000e3f8:	9149883a 	add	r4,r18,r5
1000e3fc:	24a5803a 	cmpltu	r18,r4,r18
1000e400:	8ca3883a 	add	r17,r17,r18
1000e404:	2025883a 	mov	r18,r4
1000e408:	8900402c 	andhi	r4,r17,256
1000e40c:	20000426 	beq	r4,zero,1000e420 <__muldf3+0x66c>
1000e410:	18810004 	addi	r2,r3,1024
1000e414:	00ffc034 	movhi	r3,65280
1000e418:	18ffffc4 	addi	r3,r3,-1
1000e41c:	88e2703a 	and	r17,r17,r3
1000e420:	00c1ff84 	movi	r3,2046
1000e424:	18bf1316 	blt	r3,r2,1000e074 <__alt_data_end+0xf800e074>
1000e428:	882c977a 	slli	r22,r17,29
1000e42c:	9024d0fa 	srli	r18,r18,3
1000e430:	8822927a 	slli	r17,r17,9
1000e434:	1081ffcc 	andi	r2,r2,2047
1000e438:	b4acb03a 	or	r22,r22,r18
1000e43c:	8820d33a 	srli	r16,r17,12
1000e440:	3027883a 	mov	r19,r6
1000e444:	003eba06 	br	1000df30 <__alt_data_end+0xf800df30>
1000e448:	8080022c 	andhi	r2,r16,8
1000e44c:	10000926 	beq	r2,zero,1000e474 <__muldf3+0x6c0>
1000e450:	8880022c 	andhi	r2,r17,8
1000e454:	1000071e 	bne	r2,zero,1000e474 <__muldf3+0x6c0>
1000e458:	00800434 	movhi	r2,16
1000e45c:	8c000234 	orhi	r16,r17,8
1000e460:	10bfffc4 	addi	r2,r2,-1
1000e464:	e027883a 	mov	r19,fp
1000e468:	80a0703a 	and	r16,r16,r2
1000e46c:	902d883a 	mov	r22,r18
1000e470:	003f1706 	br	1000e0d0 <__alt_data_end+0xf800e0d0>
1000e474:	00800434 	movhi	r2,16
1000e478:	84000234 	orhi	r16,r16,8
1000e47c:	10bfffc4 	addi	r2,r2,-1
1000e480:	80a0703a 	and	r16,r16,r2
1000e484:	003f1206 	br	1000e0d0 <__alt_data_end+0xf800e0d0>
1000e488:	147ff604 	addi	r17,r2,-40
1000e48c:	3462983a 	sll	r17,r6,r17
1000e490:	0025883a 	mov	r18,zero
1000e494:	003ef306 	br	1000e064 <__alt_data_end+0xf800e064>
1000e498:	3009883a 	mov	r4,r6
1000e49c:	d9400215 	stw	r5,8(sp)
1000e4a0:	d9800715 	stw	r6,28(sp)
1000e4a4:	da400415 	stw	r9,16(sp)
1000e4a8:	da800315 	stw	r10,12(sp)
1000e4ac:	000f1200 	call	1000f120 <__clzsi2>
1000e4b0:	10800804 	addi	r2,r2,32
1000e4b4:	da800317 	ldw	r10,12(sp)
1000e4b8:	da400417 	ldw	r9,16(sp)
1000e4bc:	d9800717 	ldw	r6,28(sp)
1000e4c0:	d9400217 	ldw	r5,8(sp)
1000e4c4:	003edd06 	br	1000e03c <__alt_data_end+0xf800e03c>
1000e4c8:	143ff604 	addi	r16,r2,-40
1000e4cc:	ac20983a 	sll	r16,r21,r16
1000e4d0:	002d883a 	mov	r22,zero
1000e4d4:	003ec106 	br	1000dfdc <__alt_data_end+0xf800dfdc>
1000e4d8:	d9800715 	stw	r6,28(sp)
1000e4dc:	d9c00215 	stw	r7,8(sp)
1000e4e0:	da400415 	stw	r9,16(sp)
1000e4e4:	000f1200 	call	1000f120 <__clzsi2>
1000e4e8:	10800804 	addi	r2,r2,32
1000e4ec:	da400417 	ldw	r9,16(sp)
1000e4f0:	d9c00217 	ldw	r7,8(sp)
1000e4f4:	d9800717 	ldw	r6,28(sp)
1000e4f8:	003eae06 	br	1000dfb4 <__alt_data_end+0xf800dfb4>
1000e4fc:	00c00044 	movi	r3,1
1000e500:	1887c83a 	sub	r3,r3,r2
1000e504:	01000e04 	movi	r4,56
1000e508:	20fe8516 	blt	r4,r3,1000df20 <__alt_data_end+0xf800df20>
1000e50c:	010007c4 	movi	r4,31
1000e510:	20c01b16 	blt	r4,r3,1000e580 <__muldf3+0x7cc>
1000e514:	00800804 	movi	r2,32
1000e518:	10c5c83a 	sub	r2,r2,r3
1000e51c:	888a983a 	sll	r5,r17,r2
1000e520:	90c8d83a 	srl	r4,r18,r3
1000e524:	9084983a 	sll	r2,r18,r2
1000e528:	88e2d83a 	srl	r17,r17,r3
1000e52c:	2906b03a 	or	r3,r5,r4
1000e530:	1004c03a 	cmpne	r2,r2,zero
1000e534:	1886b03a 	or	r3,r3,r2
1000e538:	188001cc 	andi	r2,r3,7
1000e53c:	10000726 	beq	r2,zero,1000e55c <__muldf3+0x7a8>
1000e540:	188003cc 	andi	r2,r3,15
1000e544:	01000104 	movi	r4,4
1000e548:	11000426 	beq	r2,r4,1000e55c <__muldf3+0x7a8>
1000e54c:	1805883a 	mov	r2,r3
1000e550:	10c00104 	addi	r3,r2,4
1000e554:	1885803a 	cmpltu	r2,r3,r2
1000e558:	88a3883a 	add	r17,r17,r2
1000e55c:	8880202c 	andhi	r2,r17,128
1000e560:	10001c26 	beq	r2,zero,1000e5d4 <__muldf3+0x820>
1000e564:	3027883a 	mov	r19,r6
1000e568:	00800044 	movi	r2,1
1000e56c:	0021883a 	mov	r16,zero
1000e570:	002d883a 	mov	r22,zero
1000e574:	003e6e06 	br	1000df30 <__alt_data_end+0xf800df30>
1000e578:	4007883a 	mov	r3,r8
1000e57c:	003f9706 	br	1000e3dc <__alt_data_end+0xf800e3dc>
1000e580:	017ff844 	movi	r5,-31
1000e584:	2885c83a 	sub	r2,r5,r2
1000e588:	888ad83a 	srl	r5,r17,r2
1000e58c:	00800804 	movi	r2,32
1000e590:	18801a26 	beq	r3,r2,1000e5fc <__muldf3+0x848>
1000e594:	01001004 	movi	r4,64
1000e598:	20c7c83a 	sub	r3,r4,r3
1000e59c:	88e2983a 	sll	r17,r17,r3
1000e5a0:	8ca4b03a 	or	r18,r17,r18
1000e5a4:	9004c03a 	cmpne	r2,r18,zero
1000e5a8:	2884b03a 	or	r2,r5,r2
1000e5ac:	144001cc 	andi	r17,r2,7
1000e5b0:	88000d1e 	bne	r17,zero,1000e5e8 <__muldf3+0x834>
1000e5b4:	0021883a 	mov	r16,zero
1000e5b8:	102cd0fa 	srli	r22,r2,3
1000e5bc:	3027883a 	mov	r19,r6
1000e5c0:	0005883a 	mov	r2,zero
1000e5c4:	b46cb03a 	or	r22,r22,r17
1000e5c8:	003e5906 	br	1000df30 <__alt_data_end+0xf800df30>
1000e5cc:	1007883a 	mov	r3,r2
1000e5d0:	0023883a 	mov	r17,zero
1000e5d4:	8820927a 	slli	r16,r17,9
1000e5d8:	1805883a 	mov	r2,r3
1000e5dc:	8822977a 	slli	r17,r17,29
1000e5e0:	8020d33a 	srli	r16,r16,12
1000e5e4:	003ff406 	br	1000e5b8 <__alt_data_end+0xf800e5b8>
1000e5e8:	10c003cc 	andi	r3,r2,15
1000e5ec:	01000104 	movi	r4,4
1000e5f0:	193ff626 	beq	r3,r4,1000e5cc <__alt_data_end+0xf800e5cc>
1000e5f4:	0023883a 	mov	r17,zero
1000e5f8:	003fd506 	br	1000e550 <__alt_data_end+0xf800e550>
1000e5fc:	0023883a 	mov	r17,zero
1000e600:	003fe706 	br	1000e5a0 <__alt_data_end+0xf800e5a0>
1000e604:	00800434 	movhi	r2,16
1000e608:	8c000234 	orhi	r16,r17,8
1000e60c:	10bfffc4 	addi	r2,r2,-1
1000e610:	3027883a 	mov	r19,r6
1000e614:	80a0703a 	and	r16,r16,r2
1000e618:	902d883a 	mov	r22,r18
1000e61c:	003eac06 	br	1000e0d0 <__alt_data_end+0xf800e0d0>

1000e620 <__subdf3>:
1000e620:	02000434 	movhi	r8,16
1000e624:	423fffc4 	addi	r8,r8,-1
1000e628:	defffb04 	addi	sp,sp,-20
1000e62c:	2a14703a 	and	r10,r5,r8
1000e630:	3812d53a 	srli	r9,r7,20
1000e634:	3a10703a 	and	r8,r7,r8
1000e638:	2006d77a 	srli	r3,r4,29
1000e63c:	3004d77a 	srli	r2,r6,29
1000e640:	dc000015 	stw	r16,0(sp)
1000e644:	501490fa 	slli	r10,r10,3
1000e648:	2820d53a 	srli	r16,r5,20
1000e64c:	401090fa 	slli	r8,r8,3
1000e650:	dc800215 	stw	r18,8(sp)
1000e654:	dc400115 	stw	r17,4(sp)
1000e658:	dfc00415 	stw	ra,16(sp)
1000e65c:	202290fa 	slli	r17,r4,3
1000e660:	dcc00315 	stw	r19,12(sp)
1000e664:	4a41ffcc 	andi	r9,r9,2047
1000e668:	0101ffc4 	movi	r4,2047
1000e66c:	2824d7fa 	srli	r18,r5,31
1000e670:	8401ffcc 	andi	r16,r16,2047
1000e674:	50c6b03a 	or	r3,r10,r3
1000e678:	380ed7fa 	srli	r7,r7,31
1000e67c:	408ab03a 	or	r5,r8,r2
1000e680:	300c90fa 	slli	r6,r6,3
1000e684:	49009626 	beq	r9,r4,1000e8e0 <__subdf3+0x2c0>
1000e688:	39c0005c 	xori	r7,r7,1
1000e68c:	8245c83a 	sub	r2,r16,r9
1000e690:	3c807426 	beq	r7,r18,1000e864 <__subdf3+0x244>
1000e694:	0080af0e 	bge	zero,r2,1000e954 <__subdf3+0x334>
1000e698:	48002a1e 	bne	r9,zero,1000e744 <__subdf3+0x124>
1000e69c:	2988b03a 	or	r4,r5,r6
1000e6a0:	20009a1e 	bne	r4,zero,1000e90c <__subdf3+0x2ec>
1000e6a4:	888001cc 	andi	r2,r17,7
1000e6a8:	10000726 	beq	r2,zero,1000e6c8 <__subdf3+0xa8>
1000e6ac:	888003cc 	andi	r2,r17,15
1000e6b0:	01000104 	movi	r4,4
1000e6b4:	11000426 	beq	r2,r4,1000e6c8 <__subdf3+0xa8>
1000e6b8:	890b883a 	add	r5,r17,r4
1000e6bc:	2c63803a 	cmpltu	r17,r5,r17
1000e6c0:	1c47883a 	add	r3,r3,r17
1000e6c4:	2823883a 	mov	r17,r5
1000e6c8:	1880202c 	andhi	r2,r3,128
1000e6cc:	10005926 	beq	r2,zero,1000e834 <__subdf3+0x214>
1000e6d0:	84000044 	addi	r16,r16,1
1000e6d4:	0081ffc4 	movi	r2,2047
1000e6d8:	8080be26 	beq	r16,r2,1000e9d4 <__subdf3+0x3b4>
1000e6dc:	017fe034 	movhi	r5,65408
1000e6e0:	297fffc4 	addi	r5,r5,-1
1000e6e4:	1946703a 	and	r3,r3,r5
1000e6e8:	1804977a 	slli	r2,r3,29
1000e6ec:	1806927a 	slli	r3,r3,9
1000e6f0:	8822d0fa 	srli	r17,r17,3
1000e6f4:	8401ffcc 	andi	r16,r16,2047
1000e6f8:	180ad33a 	srli	r5,r3,12
1000e6fc:	9100004c 	andi	r4,r18,1
1000e700:	1444b03a 	or	r2,r2,r17
1000e704:	80c1ffcc 	andi	r3,r16,2047
1000e708:	1820953a 	slli	r16,r3,20
1000e70c:	20c03fcc 	andi	r3,r4,255
1000e710:	180897fa 	slli	r4,r3,31
1000e714:	00c00434 	movhi	r3,16
1000e718:	18ffffc4 	addi	r3,r3,-1
1000e71c:	28c6703a 	and	r3,r5,r3
1000e720:	1c06b03a 	or	r3,r3,r16
1000e724:	1906b03a 	or	r3,r3,r4
1000e728:	dfc00417 	ldw	ra,16(sp)
1000e72c:	dcc00317 	ldw	r19,12(sp)
1000e730:	dc800217 	ldw	r18,8(sp)
1000e734:	dc400117 	ldw	r17,4(sp)
1000e738:	dc000017 	ldw	r16,0(sp)
1000e73c:	dec00504 	addi	sp,sp,20
1000e740:	f800283a 	ret
1000e744:	0101ffc4 	movi	r4,2047
1000e748:	813fd626 	beq	r16,r4,1000e6a4 <__alt_data_end+0xf800e6a4>
1000e74c:	29402034 	orhi	r5,r5,128
1000e750:	01000e04 	movi	r4,56
1000e754:	2080a316 	blt	r4,r2,1000e9e4 <__subdf3+0x3c4>
1000e758:	010007c4 	movi	r4,31
1000e75c:	2080c616 	blt	r4,r2,1000ea78 <__subdf3+0x458>
1000e760:	01000804 	movi	r4,32
1000e764:	2089c83a 	sub	r4,r4,r2
1000e768:	2910983a 	sll	r8,r5,r4
1000e76c:	308ed83a 	srl	r7,r6,r2
1000e770:	3108983a 	sll	r4,r6,r4
1000e774:	2884d83a 	srl	r2,r5,r2
1000e778:	41ccb03a 	or	r6,r8,r7
1000e77c:	2008c03a 	cmpne	r4,r4,zero
1000e780:	310cb03a 	or	r6,r6,r4
1000e784:	898dc83a 	sub	r6,r17,r6
1000e788:	89a3803a 	cmpltu	r17,r17,r6
1000e78c:	1887c83a 	sub	r3,r3,r2
1000e790:	1c47c83a 	sub	r3,r3,r17
1000e794:	3023883a 	mov	r17,r6
1000e798:	1880202c 	andhi	r2,r3,128
1000e79c:	10002326 	beq	r2,zero,1000e82c <__subdf3+0x20c>
1000e7a0:	04c02034 	movhi	r19,128
1000e7a4:	9cffffc4 	addi	r19,r19,-1
1000e7a8:	1ce6703a 	and	r19,r3,r19
1000e7ac:	98007a26 	beq	r19,zero,1000e998 <__subdf3+0x378>
1000e7b0:	9809883a 	mov	r4,r19
1000e7b4:	000f1200 	call	1000f120 <__clzsi2>
1000e7b8:	113ffe04 	addi	r4,r2,-8
1000e7bc:	00c007c4 	movi	r3,31
1000e7c0:	19007b16 	blt	r3,r4,1000e9b0 <__subdf3+0x390>
1000e7c4:	00800804 	movi	r2,32
1000e7c8:	1105c83a 	sub	r2,r2,r4
1000e7cc:	8884d83a 	srl	r2,r17,r2
1000e7d0:	9906983a 	sll	r3,r19,r4
1000e7d4:	8922983a 	sll	r17,r17,r4
1000e7d8:	10c4b03a 	or	r2,r2,r3
1000e7dc:	24007816 	blt	r4,r16,1000e9c0 <__subdf3+0x3a0>
1000e7e0:	2421c83a 	sub	r16,r4,r16
1000e7e4:	80c00044 	addi	r3,r16,1
1000e7e8:	010007c4 	movi	r4,31
1000e7ec:	20c09516 	blt	r4,r3,1000ea44 <__subdf3+0x424>
1000e7f0:	01400804 	movi	r5,32
1000e7f4:	28cbc83a 	sub	r5,r5,r3
1000e7f8:	88c8d83a 	srl	r4,r17,r3
1000e7fc:	8962983a 	sll	r17,r17,r5
1000e800:	114a983a 	sll	r5,r2,r5
1000e804:	10c6d83a 	srl	r3,r2,r3
1000e808:	8804c03a 	cmpne	r2,r17,zero
1000e80c:	290ab03a 	or	r5,r5,r4
1000e810:	28a2b03a 	or	r17,r5,r2
1000e814:	0021883a 	mov	r16,zero
1000e818:	003fa206 	br	1000e6a4 <__alt_data_end+0xf800e6a4>
1000e81c:	2090b03a 	or	r8,r4,r2
1000e820:	40018e26 	beq	r8,zero,1000ee5c <__subdf3+0x83c>
1000e824:	1007883a 	mov	r3,r2
1000e828:	2023883a 	mov	r17,r4
1000e82c:	888001cc 	andi	r2,r17,7
1000e830:	103f9e1e 	bne	r2,zero,1000e6ac <__alt_data_end+0xf800e6ac>
1000e834:	1804977a 	slli	r2,r3,29
1000e838:	8822d0fa 	srli	r17,r17,3
1000e83c:	1810d0fa 	srli	r8,r3,3
1000e840:	9100004c 	andi	r4,r18,1
1000e844:	1444b03a 	or	r2,r2,r17
1000e848:	00c1ffc4 	movi	r3,2047
1000e84c:	80c02826 	beq	r16,r3,1000e8f0 <__subdf3+0x2d0>
1000e850:	01400434 	movhi	r5,16
1000e854:	297fffc4 	addi	r5,r5,-1
1000e858:	80e0703a 	and	r16,r16,r3
1000e85c:	414a703a 	and	r5,r8,r5
1000e860:	003fa806 	br	1000e704 <__alt_data_end+0xf800e704>
1000e864:	0080630e 	bge	zero,r2,1000e9f4 <__subdf3+0x3d4>
1000e868:	48003026 	beq	r9,zero,1000e92c <__subdf3+0x30c>
1000e86c:	0101ffc4 	movi	r4,2047
1000e870:	813f8c26 	beq	r16,r4,1000e6a4 <__alt_data_end+0xf800e6a4>
1000e874:	29402034 	orhi	r5,r5,128
1000e878:	01000e04 	movi	r4,56
1000e87c:	2080a90e 	bge	r4,r2,1000eb24 <__subdf3+0x504>
1000e880:	298cb03a 	or	r6,r5,r6
1000e884:	3012c03a 	cmpne	r9,r6,zero
1000e888:	0005883a 	mov	r2,zero
1000e88c:	4c53883a 	add	r9,r9,r17
1000e890:	4c63803a 	cmpltu	r17,r9,r17
1000e894:	10c7883a 	add	r3,r2,r3
1000e898:	88c7883a 	add	r3,r17,r3
1000e89c:	4823883a 	mov	r17,r9
1000e8a0:	1880202c 	andhi	r2,r3,128
1000e8a4:	1000d026 	beq	r2,zero,1000ebe8 <__subdf3+0x5c8>
1000e8a8:	84000044 	addi	r16,r16,1
1000e8ac:	0081ffc4 	movi	r2,2047
1000e8b0:	8080fe26 	beq	r16,r2,1000ecac <__subdf3+0x68c>
1000e8b4:	00bfe034 	movhi	r2,65408
1000e8b8:	10bfffc4 	addi	r2,r2,-1
1000e8bc:	1886703a 	and	r3,r3,r2
1000e8c0:	880ad07a 	srli	r5,r17,1
1000e8c4:	180497fa 	slli	r2,r3,31
1000e8c8:	8900004c 	andi	r4,r17,1
1000e8cc:	2922b03a 	or	r17,r5,r4
1000e8d0:	1806d07a 	srli	r3,r3,1
1000e8d4:	1462b03a 	or	r17,r2,r17
1000e8d8:	3825883a 	mov	r18,r7
1000e8dc:	003f7106 	br	1000e6a4 <__alt_data_end+0xf800e6a4>
1000e8e0:	2984b03a 	or	r2,r5,r6
1000e8e4:	103f6826 	beq	r2,zero,1000e688 <__alt_data_end+0xf800e688>
1000e8e8:	39c03fcc 	andi	r7,r7,255
1000e8ec:	003f6706 	br	1000e68c <__alt_data_end+0xf800e68c>
1000e8f0:	4086b03a 	or	r3,r8,r2
1000e8f4:	18015226 	beq	r3,zero,1000ee40 <__subdf3+0x820>
1000e8f8:	00c00434 	movhi	r3,16
1000e8fc:	41400234 	orhi	r5,r8,8
1000e900:	18ffffc4 	addi	r3,r3,-1
1000e904:	28ca703a 	and	r5,r5,r3
1000e908:	003f7e06 	br	1000e704 <__alt_data_end+0xf800e704>
1000e90c:	10bfffc4 	addi	r2,r2,-1
1000e910:	1000491e 	bne	r2,zero,1000ea38 <__subdf3+0x418>
1000e914:	898fc83a 	sub	r7,r17,r6
1000e918:	89e3803a 	cmpltu	r17,r17,r7
1000e91c:	1947c83a 	sub	r3,r3,r5
1000e920:	1c47c83a 	sub	r3,r3,r17
1000e924:	3823883a 	mov	r17,r7
1000e928:	003f9b06 	br	1000e798 <__alt_data_end+0xf800e798>
1000e92c:	2988b03a 	or	r4,r5,r6
1000e930:	203f5c26 	beq	r4,zero,1000e6a4 <__alt_data_end+0xf800e6a4>
1000e934:	10bfffc4 	addi	r2,r2,-1
1000e938:	1000931e 	bne	r2,zero,1000eb88 <__subdf3+0x568>
1000e93c:	898d883a 	add	r6,r17,r6
1000e940:	3463803a 	cmpltu	r17,r6,r17
1000e944:	1947883a 	add	r3,r3,r5
1000e948:	88c7883a 	add	r3,r17,r3
1000e94c:	3023883a 	mov	r17,r6
1000e950:	003fd306 	br	1000e8a0 <__alt_data_end+0xf800e8a0>
1000e954:	1000541e 	bne	r2,zero,1000eaa8 <__subdf3+0x488>
1000e958:	80800044 	addi	r2,r16,1
1000e95c:	1081ffcc 	andi	r2,r2,2047
1000e960:	01000044 	movi	r4,1
1000e964:	2080a20e 	bge	r4,r2,1000ebf0 <__subdf3+0x5d0>
1000e968:	8989c83a 	sub	r4,r17,r6
1000e96c:	8905803a 	cmpltu	r2,r17,r4
1000e970:	1967c83a 	sub	r19,r3,r5
1000e974:	98a7c83a 	sub	r19,r19,r2
1000e978:	9880202c 	andhi	r2,r19,128
1000e97c:	10006326 	beq	r2,zero,1000eb0c <__subdf3+0x4ec>
1000e980:	3463c83a 	sub	r17,r6,r17
1000e984:	28c7c83a 	sub	r3,r5,r3
1000e988:	344d803a 	cmpltu	r6,r6,r17
1000e98c:	19a7c83a 	sub	r19,r3,r6
1000e990:	3825883a 	mov	r18,r7
1000e994:	983f861e 	bne	r19,zero,1000e7b0 <__alt_data_end+0xf800e7b0>
1000e998:	8809883a 	mov	r4,r17
1000e99c:	000f1200 	call	1000f120 <__clzsi2>
1000e9a0:	10800804 	addi	r2,r2,32
1000e9a4:	113ffe04 	addi	r4,r2,-8
1000e9a8:	00c007c4 	movi	r3,31
1000e9ac:	193f850e 	bge	r3,r4,1000e7c4 <__alt_data_end+0xf800e7c4>
1000e9b0:	10bff604 	addi	r2,r2,-40
1000e9b4:	8884983a 	sll	r2,r17,r2
1000e9b8:	0023883a 	mov	r17,zero
1000e9bc:	243f880e 	bge	r4,r16,1000e7e0 <__alt_data_end+0xf800e7e0>
1000e9c0:	00ffe034 	movhi	r3,65408
1000e9c4:	18ffffc4 	addi	r3,r3,-1
1000e9c8:	8121c83a 	sub	r16,r16,r4
1000e9cc:	10c6703a 	and	r3,r2,r3
1000e9d0:	003f3406 	br	1000e6a4 <__alt_data_end+0xf800e6a4>
1000e9d4:	9100004c 	andi	r4,r18,1
1000e9d8:	000b883a 	mov	r5,zero
1000e9dc:	0005883a 	mov	r2,zero
1000e9e0:	003f4806 	br	1000e704 <__alt_data_end+0xf800e704>
1000e9e4:	298cb03a 	or	r6,r5,r6
1000e9e8:	300cc03a 	cmpne	r6,r6,zero
1000e9ec:	0005883a 	mov	r2,zero
1000e9f0:	003f6406 	br	1000e784 <__alt_data_end+0xf800e784>
1000e9f4:	10009a1e 	bne	r2,zero,1000ec60 <__subdf3+0x640>
1000e9f8:	82400044 	addi	r9,r16,1
1000e9fc:	4881ffcc 	andi	r2,r9,2047
1000ea00:	02800044 	movi	r10,1
1000ea04:	5080670e 	bge	r10,r2,1000eba4 <__subdf3+0x584>
1000ea08:	0081ffc4 	movi	r2,2047
1000ea0c:	4880af26 	beq	r9,r2,1000eccc <__subdf3+0x6ac>
1000ea10:	898d883a 	add	r6,r17,r6
1000ea14:	1945883a 	add	r2,r3,r5
1000ea18:	3447803a 	cmpltu	r3,r6,r17
1000ea1c:	1887883a 	add	r3,r3,r2
1000ea20:	182297fa 	slli	r17,r3,31
1000ea24:	300cd07a 	srli	r6,r6,1
1000ea28:	1806d07a 	srli	r3,r3,1
1000ea2c:	4821883a 	mov	r16,r9
1000ea30:	89a2b03a 	or	r17,r17,r6
1000ea34:	003f1b06 	br	1000e6a4 <__alt_data_end+0xf800e6a4>
1000ea38:	0101ffc4 	movi	r4,2047
1000ea3c:	813f441e 	bne	r16,r4,1000e750 <__alt_data_end+0xf800e750>
1000ea40:	003f1806 	br	1000e6a4 <__alt_data_end+0xf800e6a4>
1000ea44:	843ff844 	addi	r16,r16,-31
1000ea48:	01400804 	movi	r5,32
1000ea4c:	1408d83a 	srl	r4,r2,r16
1000ea50:	19405026 	beq	r3,r5,1000eb94 <__subdf3+0x574>
1000ea54:	01401004 	movi	r5,64
1000ea58:	28c7c83a 	sub	r3,r5,r3
1000ea5c:	10c4983a 	sll	r2,r2,r3
1000ea60:	88a2b03a 	or	r17,r17,r2
1000ea64:	8822c03a 	cmpne	r17,r17,zero
1000ea68:	2462b03a 	or	r17,r4,r17
1000ea6c:	0007883a 	mov	r3,zero
1000ea70:	0021883a 	mov	r16,zero
1000ea74:	003f6d06 	br	1000e82c <__alt_data_end+0xf800e82c>
1000ea78:	11fff804 	addi	r7,r2,-32
1000ea7c:	01000804 	movi	r4,32
1000ea80:	29ced83a 	srl	r7,r5,r7
1000ea84:	11004526 	beq	r2,r4,1000eb9c <__subdf3+0x57c>
1000ea88:	01001004 	movi	r4,64
1000ea8c:	2089c83a 	sub	r4,r4,r2
1000ea90:	2904983a 	sll	r2,r5,r4
1000ea94:	118cb03a 	or	r6,r2,r6
1000ea98:	300cc03a 	cmpne	r6,r6,zero
1000ea9c:	398cb03a 	or	r6,r7,r6
1000eaa0:	0005883a 	mov	r2,zero
1000eaa4:	003f3706 	br	1000e784 <__alt_data_end+0xf800e784>
1000eaa8:	80002a26 	beq	r16,zero,1000eb54 <__subdf3+0x534>
1000eaac:	0101ffc4 	movi	r4,2047
1000eab0:	49006626 	beq	r9,r4,1000ec4c <__subdf3+0x62c>
1000eab4:	0085c83a 	sub	r2,zero,r2
1000eab8:	18c02034 	orhi	r3,r3,128
1000eabc:	01000e04 	movi	r4,56
1000eac0:	20807e16 	blt	r4,r2,1000ecbc <__subdf3+0x69c>
1000eac4:	010007c4 	movi	r4,31
1000eac8:	2080e716 	blt	r4,r2,1000ee68 <__subdf3+0x848>
1000eacc:	01000804 	movi	r4,32
1000ead0:	2089c83a 	sub	r4,r4,r2
1000ead4:	1914983a 	sll	r10,r3,r4
1000ead8:	8890d83a 	srl	r8,r17,r2
1000eadc:	8908983a 	sll	r4,r17,r4
1000eae0:	1884d83a 	srl	r2,r3,r2
1000eae4:	5222b03a 	or	r17,r10,r8
1000eae8:	2006c03a 	cmpne	r3,r4,zero
1000eaec:	88e2b03a 	or	r17,r17,r3
1000eaf0:	3463c83a 	sub	r17,r6,r17
1000eaf4:	2885c83a 	sub	r2,r5,r2
1000eaf8:	344d803a 	cmpltu	r6,r6,r17
1000eafc:	1187c83a 	sub	r3,r2,r6
1000eb00:	4821883a 	mov	r16,r9
1000eb04:	3825883a 	mov	r18,r7
1000eb08:	003f2306 	br	1000e798 <__alt_data_end+0xf800e798>
1000eb0c:	24d0b03a 	or	r8,r4,r19
1000eb10:	40001b1e 	bne	r8,zero,1000eb80 <__subdf3+0x560>
1000eb14:	0005883a 	mov	r2,zero
1000eb18:	0009883a 	mov	r4,zero
1000eb1c:	0021883a 	mov	r16,zero
1000eb20:	003f4906 	br	1000e848 <__alt_data_end+0xf800e848>
1000eb24:	010007c4 	movi	r4,31
1000eb28:	20803a16 	blt	r4,r2,1000ec14 <__subdf3+0x5f4>
1000eb2c:	01000804 	movi	r4,32
1000eb30:	2089c83a 	sub	r4,r4,r2
1000eb34:	2912983a 	sll	r9,r5,r4
1000eb38:	3090d83a 	srl	r8,r6,r2
1000eb3c:	3108983a 	sll	r4,r6,r4
1000eb40:	2884d83a 	srl	r2,r5,r2
1000eb44:	4a12b03a 	or	r9,r9,r8
1000eb48:	2008c03a 	cmpne	r4,r4,zero
1000eb4c:	4912b03a 	or	r9,r9,r4
1000eb50:	003f4e06 	br	1000e88c <__alt_data_end+0xf800e88c>
1000eb54:	1c48b03a 	or	r4,r3,r17
1000eb58:	20003c26 	beq	r4,zero,1000ec4c <__subdf3+0x62c>
1000eb5c:	0084303a 	nor	r2,zero,r2
1000eb60:	1000381e 	bne	r2,zero,1000ec44 <__subdf3+0x624>
1000eb64:	3463c83a 	sub	r17,r6,r17
1000eb68:	28c5c83a 	sub	r2,r5,r3
1000eb6c:	344d803a 	cmpltu	r6,r6,r17
1000eb70:	1187c83a 	sub	r3,r2,r6
1000eb74:	4821883a 	mov	r16,r9
1000eb78:	3825883a 	mov	r18,r7
1000eb7c:	003f0606 	br	1000e798 <__alt_data_end+0xf800e798>
1000eb80:	2023883a 	mov	r17,r4
1000eb84:	003f0906 	br	1000e7ac <__alt_data_end+0xf800e7ac>
1000eb88:	0101ffc4 	movi	r4,2047
1000eb8c:	813f3a1e 	bne	r16,r4,1000e878 <__alt_data_end+0xf800e878>
1000eb90:	003ec406 	br	1000e6a4 <__alt_data_end+0xf800e6a4>
1000eb94:	0005883a 	mov	r2,zero
1000eb98:	003fb106 	br	1000ea60 <__alt_data_end+0xf800ea60>
1000eb9c:	0005883a 	mov	r2,zero
1000eba0:	003fbc06 	br	1000ea94 <__alt_data_end+0xf800ea94>
1000eba4:	1c44b03a 	or	r2,r3,r17
1000eba8:	80008e1e 	bne	r16,zero,1000ede4 <__subdf3+0x7c4>
1000ebac:	1000c826 	beq	r2,zero,1000eed0 <__subdf3+0x8b0>
1000ebb0:	2984b03a 	or	r2,r5,r6
1000ebb4:	103ebb26 	beq	r2,zero,1000e6a4 <__alt_data_end+0xf800e6a4>
1000ebb8:	8989883a 	add	r4,r17,r6
1000ebbc:	1945883a 	add	r2,r3,r5
1000ebc0:	2447803a 	cmpltu	r3,r4,r17
1000ebc4:	1887883a 	add	r3,r3,r2
1000ebc8:	1880202c 	andhi	r2,r3,128
1000ebcc:	2023883a 	mov	r17,r4
1000ebd0:	103f1626 	beq	r2,zero,1000e82c <__alt_data_end+0xf800e82c>
1000ebd4:	00bfe034 	movhi	r2,65408
1000ebd8:	10bfffc4 	addi	r2,r2,-1
1000ebdc:	5021883a 	mov	r16,r10
1000ebe0:	1886703a 	and	r3,r3,r2
1000ebe4:	003eaf06 	br	1000e6a4 <__alt_data_end+0xf800e6a4>
1000ebe8:	3825883a 	mov	r18,r7
1000ebec:	003f0f06 	br	1000e82c <__alt_data_end+0xf800e82c>
1000ebf0:	1c44b03a 	or	r2,r3,r17
1000ebf4:	8000251e 	bne	r16,zero,1000ec8c <__subdf3+0x66c>
1000ebf8:	1000661e 	bne	r2,zero,1000ed94 <__subdf3+0x774>
1000ebfc:	2990b03a 	or	r8,r5,r6
1000ec00:	40009626 	beq	r8,zero,1000ee5c <__subdf3+0x83c>
1000ec04:	2807883a 	mov	r3,r5
1000ec08:	3023883a 	mov	r17,r6
1000ec0c:	3825883a 	mov	r18,r7
1000ec10:	003ea406 	br	1000e6a4 <__alt_data_end+0xf800e6a4>
1000ec14:	127ff804 	addi	r9,r2,-32
1000ec18:	01000804 	movi	r4,32
1000ec1c:	2a52d83a 	srl	r9,r5,r9
1000ec20:	11008c26 	beq	r2,r4,1000ee54 <__subdf3+0x834>
1000ec24:	01001004 	movi	r4,64
1000ec28:	2085c83a 	sub	r2,r4,r2
1000ec2c:	2884983a 	sll	r2,r5,r2
1000ec30:	118cb03a 	or	r6,r2,r6
1000ec34:	300cc03a 	cmpne	r6,r6,zero
1000ec38:	4992b03a 	or	r9,r9,r6
1000ec3c:	0005883a 	mov	r2,zero
1000ec40:	003f1206 	br	1000e88c <__alt_data_end+0xf800e88c>
1000ec44:	0101ffc4 	movi	r4,2047
1000ec48:	493f9c1e 	bne	r9,r4,1000eabc <__alt_data_end+0xf800eabc>
1000ec4c:	2807883a 	mov	r3,r5
1000ec50:	3023883a 	mov	r17,r6
1000ec54:	4821883a 	mov	r16,r9
1000ec58:	3825883a 	mov	r18,r7
1000ec5c:	003e9106 	br	1000e6a4 <__alt_data_end+0xf800e6a4>
1000ec60:	80001f1e 	bne	r16,zero,1000ece0 <__subdf3+0x6c0>
1000ec64:	1c48b03a 	or	r4,r3,r17
1000ec68:	20005a26 	beq	r4,zero,1000edd4 <__subdf3+0x7b4>
1000ec6c:	0084303a 	nor	r2,zero,r2
1000ec70:	1000561e 	bne	r2,zero,1000edcc <__subdf3+0x7ac>
1000ec74:	89a3883a 	add	r17,r17,r6
1000ec78:	1945883a 	add	r2,r3,r5
1000ec7c:	898d803a 	cmpltu	r6,r17,r6
1000ec80:	3087883a 	add	r3,r6,r2
1000ec84:	4821883a 	mov	r16,r9
1000ec88:	003f0506 	br	1000e8a0 <__alt_data_end+0xf800e8a0>
1000ec8c:	10002b1e 	bne	r2,zero,1000ed3c <__subdf3+0x71c>
1000ec90:	2984b03a 	or	r2,r5,r6
1000ec94:	10008026 	beq	r2,zero,1000ee98 <__subdf3+0x878>
1000ec98:	2807883a 	mov	r3,r5
1000ec9c:	3023883a 	mov	r17,r6
1000eca0:	3825883a 	mov	r18,r7
1000eca4:	0401ffc4 	movi	r16,2047
1000eca8:	003e7e06 	br	1000e6a4 <__alt_data_end+0xf800e6a4>
1000ecac:	3809883a 	mov	r4,r7
1000ecb0:	0011883a 	mov	r8,zero
1000ecb4:	0005883a 	mov	r2,zero
1000ecb8:	003ee306 	br	1000e848 <__alt_data_end+0xf800e848>
1000ecbc:	1c62b03a 	or	r17,r3,r17
1000ecc0:	8822c03a 	cmpne	r17,r17,zero
1000ecc4:	0005883a 	mov	r2,zero
1000ecc8:	003f8906 	br	1000eaf0 <__alt_data_end+0xf800eaf0>
1000eccc:	3809883a 	mov	r4,r7
1000ecd0:	4821883a 	mov	r16,r9
1000ecd4:	0011883a 	mov	r8,zero
1000ecd8:	0005883a 	mov	r2,zero
1000ecdc:	003eda06 	br	1000e848 <__alt_data_end+0xf800e848>
1000ece0:	0101ffc4 	movi	r4,2047
1000ece4:	49003b26 	beq	r9,r4,1000edd4 <__subdf3+0x7b4>
1000ece8:	0085c83a 	sub	r2,zero,r2
1000ecec:	18c02034 	orhi	r3,r3,128
1000ecf0:	01000e04 	movi	r4,56
1000ecf4:	20806e16 	blt	r4,r2,1000eeb0 <__subdf3+0x890>
1000ecf8:	010007c4 	movi	r4,31
1000ecfc:	20807716 	blt	r4,r2,1000eedc <__subdf3+0x8bc>
1000ed00:	01000804 	movi	r4,32
1000ed04:	2089c83a 	sub	r4,r4,r2
1000ed08:	1914983a 	sll	r10,r3,r4
1000ed0c:	8890d83a 	srl	r8,r17,r2
1000ed10:	8908983a 	sll	r4,r17,r4
1000ed14:	1884d83a 	srl	r2,r3,r2
1000ed18:	5222b03a 	or	r17,r10,r8
1000ed1c:	2006c03a 	cmpne	r3,r4,zero
1000ed20:	88e2b03a 	or	r17,r17,r3
1000ed24:	89a3883a 	add	r17,r17,r6
1000ed28:	1145883a 	add	r2,r2,r5
1000ed2c:	898d803a 	cmpltu	r6,r17,r6
1000ed30:	3087883a 	add	r3,r6,r2
1000ed34:	4821883a 	mov	r16,r9
1000ed38:	003ed906 	br	1000e8a0 <__alt_data_end+0xf800e8a0>
1000ed3c:	2984b03a 	or	r2,r5,r6
1000ed40:	10004226 	beq	r2,zero,1000ee4c <__subdf3+0x82c>
1000ed44:	1808d0fa 	srli	r4,r3,3
1000ed48:	8822d0fa 	srli	r17,r17,3
1000ed4c:	1806977a 	slli	r3,r3,29
1000ed50:	2080022c 	andhi	r2,r4,8
1000ed54:	1c62b03a 	or	r17,r3,r17
1000ed58:	10000826 	beq	r2,zero,1000ed7c <__subdf3+0x75c>
1000ed5c:	2812d0fa 	srli	r9,r5,3
1000ed60:	4880022c 	andhi	r2,r9,8
1000ed64:	1000051e 	bne	r2,zero,1000ed7c <__subdf3+0x75c>
1000ed68:	300cd0fa 	srli	r6,r6,3
1000ed6c:	2804977a 	slli	r2,r5,29
1000ed70:	4809883a 	mov	r4,r9
1000ed74:	3825883a 	mov	r18,r7
1000ed78:	11a2b03a 	or	r17,r2,r6
1000ed7c:	8806d77a 	srli	r3,r17,29
1000ed80:	200890fa 	slli	r4,r4,3
1000ed84:	882290fa 	slli	r17,r17,3
1000ed88:	0401ffc4 	movi	r16,2047
1000ed8c:	1906b03a 	or	r3,r3,r4
1000ed90:	003e4406 	br	1000e6a4 <__alt_data_end+0xf800e6a4>
1000ed94:	2984b03a 	or	r2,r5,r6
1000ed98:	103e4226 	beq	r2,zero,1000e6a4 <__alt_data_end+0xf800e6a4>
1000ed9c:	8989c83a 	sub	r4,r17,r6
1000eda0:	8911803a 	cmpltu	r8,r17,r4
1000eda4:	1945c83a 	sub	r2,r3,r5
1000eda8:	1205c83a 	sub	r2,r2,r8
1000edac:	1200202c 	andhi	r8,r2,128
1000edb0:	403e9a26 	beq	r8,zero,1000e81c <__alt_data_end+0xf800e81c>
1000edb4:	3463c83a 	sub	r17,r6,r17
1000edb8:	28c5c83a 	sub	r2,r5,r3
1000edbc:	344d803a 	cmpltu	r6,r6,r17
1000edc0:	1187c83a 	sub	r3,r2,r6
1000edc4:	3825883a 	mov	r18,r7
1000edc8:	003e3606 	br	1000e6a4 <__alt_data_end+0xf800e6a4>
1000edcc:	0101ffc4 	movi	r4,2047
1000edd0:	493fc71e 	bne	r9,r4,1000ecf0 <__alt_data_end+0xf800ecf0>
1000edd4:	2807883a 	mov	r3,r5
1000edd8:	3023883a 	mov	r17,r6
1000eddc:	4821883a 	mov	r16,r9
1000ede0:	003e3006 	br	1000e6a4 <__alt_data_end+0xf800e6a4>
1000ede4:	10003626 	beq	r2,zero,1000eec0 <__subdf3+0x8a0>
1000ede8:	2984b03a 	or	r2,r5,r6
1000edec:	10001726 	beq	r2,zero,1000ee4c <__subdf3+0x82c>
1000edf0:	1808d0fa 	srli	r4,r3,3
1000edf4:	8822d0fa 	srli	r17,r17,3
1000edf8:	1806977a 	slli	r3,r3,29
1000edfc:	2080022c 	andhi	r2,r4,8
1000ee00:	1c62b03a 	or	r17,r3,r17
1000ee04:	10000726 	beq	r2,zero,1000ee24 <__subdf3+0x804>
1000ee08:	2812d0fa 	srli	r9,r5,3
1000ee0c:	4880022c 	andhi	r2,r9,8
1000ee10:	1000041e 	bne	r2,zero,1000ee24 <__subdf3+0x804>
1000ee14:	300cd0fa 	srli	r6,r6,3
1000ee18:	2804977a 	slli	r2,r5,29
1000ee1c:	4809883a 	mov	r4,r9
1000ee20:	11a2b03a 	or	r17,r2,r6
1000ee24:	8806d77a 	srli	r3,r17,29
1000ee28:	200890fa 	slli	r4,r4,3
1000ee2c:	882290fa 	slli	r17,r17,3
1000ee30:	3825883a 	mov	r18,r7
1000ee34:	1906b03a 	or	r3,r3,r4
1000ee38:	0401ffc4 	movi	r16,2047
1000ee3c:	003e1906 	br	1000e6a4 <__alt_data_end+0xf800e6a4>
1000ee40:	000b883a 	mov	r5,zero
1000ee44:	0005883a 	mov	r2,zero
1000ee48:	003e2e06 	br	1000e704 <__alt_data_end+0xf800e704>
1000ee4c:	0401ffc4 	movi	r16,2047
1000ee50:	003e1406 	br	1000e6a4 <__alt_data_end+0xf800e6a4>
1000ee54:	0005883a 	mov	r2,zero
1000ee58:	003f7506 	br	1000ec30 <__alt_data_end+0xf800ec30>
1000ee5c:	0005883a 	mov	r2,zero
1000ee60:	0009883a 	mov	r4,zero
1000ee64:	003e7806 	br	1000e848 <__alt_data_end+0xf800e848>
1000ee68:	123ff804 	addi	r8,r2,-32
1000ee6c:	01000804 	movi	r4,32
1000ee70:	1a10d83a 	srl	r8,r3,r8
1000ee74:	11002526 	beq	r2,r4,1000ef0c <__subdf3+0x8ec>
1000ee78:	01001004 	movi	r4,64
1000ee7c:	2085c83a 	sub	r2,r4,r2
1000ee80:	1884983a 	sll	r2,r3,r2
1000ee84:	1444b03a 	or	r2,r2,r17
1000ee88:	1004c03a 	cmpne	r2,r2,zero
1000ee8c:	40a2b03a 	or	r17,r8,r2
1000ee90:	0005883a 	mov	r2,zero
1000ee94:	003f1606 	br	1000eaf0 <__alt_data_end+0xf800eaf0>
1000ee98:	02000434 	movhi	r8,16
1000ee9c:	0009883a 	mov	r4,zero
1000eea0:	423fffc4 	addi	r8,r8,-1
1000eea4:	00bfffc4 	movi	r2,-1
1000eea8:	0401ffc4 	movi	r16,2047
1000eeac:	003e6606 	br	1000e848 <__alt_data_end+0xf800e848>
1000eeb0:	1c62b03a 	or	r17,r3,r17
1000eeb4:	8822c03a 	cmpne	r17,r17,zero
1000eeb8:	0005883a 	mov	r2,zero
1000eebc:	003f9906 	br	1000ed24 <__alt_data_end+0xf800ed24>
1000eec0:	2807883a 	mov	r3,r5
1000eec4:	3023883a 	mov	r17,r6
1000eec8:	0401ffc4 	movi	r16,2047
1000eecc:	003df506 	br	1000e6a4 <__alt_data_end+0xf800e6a4>
1000eed0:	2807883a 	mov	r3,r5
1000eed4:	3023883a 	mov	r17,r6
1000eed8:	003df206 	br	1000e6a4 <__alt_data_end+0xf800e6a4>
1000eedc:	123ff804 	addi	r8,r2,-32
1000eee0:	01000804 	movi	r4,32
1000eee4:	1a10d83a 	srl	r8,r3,r8
1000eee8:	11000a26 	beq	r2,r4,1000ef14 <__subdf3+0x8f4>
1000eeec:	01001004 	movi	r4,64
1000eef0:	2085c83a 	sub	r2,r4,r2
1000eef4:	1884983a 	sll	r2,r3,r2
1000eef8:	1444b03a 	or	r2,r2,r17
1000eefc:	1004c03a 	cmpne	r2,r2,zero
1000ef00:	40a2b03a 	or	r17,r8,r2
1000ef04:	0005883a 	mov	r2,zero
1000ef08:	003f8606 	br	1000ed24 <__alt_data_end+0xf800ed24>
1000ef0c:	0005883a 	mov	r2,zero
1000ef10:	003fdc06 	br	1000ee84 <__alt_data_end+0xf800ee84>
1000ef14:	0005883a 	mov	r2,zero
1000ef18:	003ff706 	br	1000eef8 <__alt_data_end+0xf800eef8>

1000ef1c <__fixdfsi>:
1000ef1c:	280cd53a 	srli	r6,r5,20
1000ef20:	00c00434 	movhi	r3,16
1000ef24:	18ffffc4 	addi	r3,r3,-1
1000ef28:	3181ffcc 	andi	r6,r6,2047
1000ef2c:	01c0ff84 	movi	r7,1022
1000ef30:	28c6703a 	and	r3,r5,r3
1000ef34:	280ad7fa 	srli	r5,r5,31
1000ef38:	3980120e 	bge	r7,r6,1000ef84 <__fixdfsi+0x68>
1000ef3c:	00810744 	movi	r2,1053
1000ef40:	11800c16 	blt	r2,r6,1000ef74 <__fixdfsi+0x58>
1000ef44:	00810cc4 	movi	r2,1075
1000ef48:	1185c83a 	sub	r2,r2,r6
1000ef4c:	01c007c4 	movi	r7,31
1000ef50:	18c00434 	orhi	r3,r3,16
1000ef54:	38800d16 	blt	r7,r2,1000ef8c <__fixdfsi+0x70>
1000ef58:	31befb44 	addi	r6,r6,-1043
1000ef5c:	2084d83a 	srl	r2,r4,r2
1000ef60:	1986983a 	sll	r3,r3,r6
1000ef64:	1884b03a 	or	r2,r3,r2
1000ef68:	28000726 	beq	r5,zero,1000ef88 <__fixdfsi+0x6c>
1000ef6c:	0085c83a 	sub	r2,zero,r2
1000ef70:	f800283a 	ret
1000ef74:	00a00034 	movhi	r2,32768
1000ef78:	10bfffc4 	addi	r2,r2,-1
1000ef7c:	2885883a 	add	r2,r5,r2
1000ef80:	f800283a 	ret
1000ef84:	0005883a 	mov	r2,zero
1000ef88:	f800283a 	ret
1000ef8c:	008104c4 	movi	r2,1043
1000ef90:	1185c83a 	sub	r2,r2,r6
1000ef94:	1884d83a 	srl	r2,r3,r2
1000ef98:	003ff306 	br	1000ef68 <__alt_data_end+0xf800ef68>

1000ef9c <__floatsidf>:
1000ef9c:	defffd04 	addi	sp,sp,-12
1000efa0:	dfc00215 	stw	ra,8(sp)
1000efa4:	dc400115 	stw	r17,4(sp)
1000efa8:	dc000015 	stw	r16,0(sp)
1000efac:	20002b26 	beq	r4,zero,1000f05c <__floatsidf+0xc0>
1000efb0:	2023883a 	mov	r17,r4
1000efb4:	2020d7fa 	srli	r16,r4,31
1000efb8:	20002d16 	blt	r4,zero,1000f070 <__floatsidf+0xd4>
1000efbc:	8809883a 	mov	r4,r17
1000efc0:	000f1200 	call	1000f120 <__clzsi2>
1000efc4:	01410784 	movi	r5,1054
1000efc8:	288bc83a 	sub	r5,r5,r2
1000efcc:	01010cc4 	movi	r4,1075
1000efd0:	2149c83a 	sub	r4,r4,r5
1000efd4:	00c007c4 	movi	r3,31
1000efd8:	1900160e 	bge	r3,r4,1000f034 <__floatsidf+0x98>
1000efdc:	00c104c4 	movi	r3,1043
1000efe0:	1947c83a 	sub	r3,r3,r5
1000efe4:	88c6983a 	sll	r3,r17,r3
1000efe8:	00800434 	movhi	r2,16
1000efec:	10bfffc4 	addi	r2,r2,-1
1000eff0:	1886703a 	and	r3,r3,r2
1000eff4:	2941ffcc 	andi	r5,r5,2047
1000eff8:	800d883a 	mov	r6,r16
1000effc:	0005883a 	mov	r2,zero
1000f000:	280a953a 	slli	r5,r5,20
1000f004:	31803fcc 	andi	r6,r6,255
1000f008:	01000434 	movhi	r4,16
1000f00c:	300c97fa 	slli	r6,r6,31
1000f010:	213fffc4 	addi	r4,r4,-1
1000f014:	1906703a 	and	r3,r3,r4
1000f018:	1946b03a 	or	r3,r3,r5
1000f01c:	1986b03a 	or	r3,r3,r6
1000f020:	dfc00217 	ldw	ra,8(sp)
1000f024:	dc400117 	ldw	r17,4(sp)
1000f028:	dc000017 	ldw	r16,0(sp)
1000f02c:	dec00304 	addi	sp,sp,12
1000f030:	f800283a 	ret
1000f034:	00c002c4 	movi	r3,11
1000f038:	1887c83a 	sub	r3,r3,r2
1000f03c:	88c6d83a 	srl	r3,r17,r3
1000f040:	8904983a 	sll	r2,r17,r4
1000f044:	01000434 	movhi	r4,16
1000f048:	213fffc4 	addi	r4,r4,-1
1000f04c:	2941ffcc 	andi	r5,r5,2047
1000f050:	1906703a 	and	r3,r3,r4
1000f054:	800d883a 	mov	r6,r16
1000f058:	003fe906 	br	1000f000 <__alt_data_end+0xf800f000>
1000f05c:	000d883a 	mov	r6,zero
1000f060:	000b883a 	mov	r5,zero
1000f064:	0007883a 	mov	r3,zero
1000f068:	0005883a 	mov	r2,zero
1000f06c:	003fe406 	br	1000f000 <__alt_data_end+0xf800f000>
1000f070:	0123c83a 	sub	r17,zero,r4
1000f074:	003fd106 	br	1000efbc <__alt_data_end+0xf800efbc>

1000f078 <__floatunsidf>:
1000f078:	defffe04 	addi	sp,sp,-8
1000f07c:	dc000015 	stw	r16,0(sp)
1000f080:	dfc00115 	stw	ra,4(sp)
1000f084:	2021883a 	mov	r16,r4
1000f088:	20002226 	beq	r4,zero,1000f114 <__floatunsidf+0x9c>
1000f08c:	000f1200 	call	1000f120 <__clzsi2>
1000f090:	01010784 	movi	r4,1054
1000f094:	2089c83a 	sub	r4,r4,r2
1000f098:	01810cc4 	movi	r6,1075
1000f09c:	310dc83a 	sub	r6,r6,r4
1000f0a0:	00c007c4 	movi	r3,31
1000f0a4:	1980120e 	bge	r3,r6,1000f0f0 <__floatunsidf+0x78>
1000f0a8:	00c104c4 	movi	r3,1043
1000f0ac:	1907c83a 	sub	r3,r3,r4
1000f0b0:	80ca983a 	sll	r5,r16,r3
1000f0b4:	00800434 	movhi	r2,16
1000f0b8:	10bfffc4 	addi	r2,r2,-1
1000f0bc:	2101ffcc 	andi	r4,r4,2047
1000f0c0:	0021883a 	mov	r16,zero
1000f0c4:	288a703a 	and	r5,r5,r2
1000f0c8:	2008953a 	slli	r4,r4,20
1000f0cc:	00c00434 	movhi	r3,16
1000f0d0:	18ffffc4 	addi	r3,r3,-1
1000f0d4:	28c6703a 	and	r3,r5,r3
1000f0d8:	8005883a 	mov	r2,r16
1000f0dc:	1906b03a 	or	r3,r3,r4
1000f0e0:	dfc00117 	ldw	ra,4(sp)
1000f0e4:	dc000017 	ldw	r16,0(sp)
1000f0e8:	dec00204 	addi	sp,sp,8
1000f0ec:	f800283a 	ret
1000f0f0:	00c002c4 	movi	r3,11
1000f0f4:	188bc83a 	sub	r5,r3,r2
1000f0f8:	814ad83a 	srl	r5,r16,r5
1000f0fc:	00c00434 	movhi	r3,16
1000f100:	18ffffc4 	addi	r3,r3,-1
1000f104:	81a0983a 	sll	r16,r16,r6
1000f108:	2101ffcc 	andi	r4,r4,2047
1000f10c:	28ca703a 	and	r5,r5,r3
1000f110:	003fed06 	br	1000f0c8 <__alt_data_end+0xf800f0c8>
1000f114:	0009883a 	mov	r4,zero
1000f118:	000b883a 	mov	r5,zero
1000f11c:	003fea06 	br	1000f0c8 <__alt_data_end+0xf800f0c8>

1000f120 <__clzsi2>:
1000f120:	00bfffd4 	movui	r2,65535
1000f124:	11000536 	bltu	r2,r4,1000f13c <__clzsi2+0x1c>
1000f128:	00803fc4 	movi	r2,255
1000f12c:	11000f36 	bltu	r2,r4,1000f16c <__clzsi2+0x4c>
1000f130:	00800804 	movi	r2,32
1000f134:	0007883a 	mov	r3,zero
1000f138:	00000506 	br	1000f150 <__clzsi2+0x30>
1000f13c:	00804034 	movhi	r2,256
1000f140:	10bfffc4 	addi	r2,r2,-1
1000f144:	11000c2e 	bgeu	r2,r4,1000f178 <__clzsi2+0x58>
1000f148:	00800204 	movi	r2,8
1000f14c:	00c00604 	movi	r3,24
1000f150:	20c8d83a 	srl	r4,r4,r3
1000f154:	00c40074 	movhi	r3,4097
1000f158:	18c8ba04 	addi	r3,r3,8936
1000f15c:	1909883a 	add	r4,r3,r4
1000f160:	20c00003 	ldbu	r3,0(r4)
1000f164:	10c5c83a 	sub	r2,r2,r3
1000f168:	f800283a 	ret
1000f16c:	00800604 	movi	r2,24
1000f170:	00c00204 	movi	r3,8
1000f174:	003ff606 	br	1000f150 <__alt_data_end+0xf800f150>
1000f178:	00800404 	movi	r2,16
1000f17c:	1007883a 	mov	r3,r2
1000f180:	003ff306 	br	1000f150 <__alt_data_end+0xf800f150>

1000f184 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f184:	defffe04 	addi	sp,sp,-8
1000f188:	dfc00115 	stw	ra,4(sp)
1000f18c:	df000015 	stw	fp,0(sp)
1000f190:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f194:	d0a00b17 	ldw	r2,-32724(gp)
1000f198:	10000326 	beq	r2,zero,1000f1a8 <alt_get_errno+0x24>
1000f19c:	d0a00b17 	ldw	r2,-32724(gp)
1000f1a0:	103ee83a 	callr	r2
1000f1a4:	00000106 	br	1000f1ac <alt_get_errno+0x28>
1000f1a8:	d0a6d204 	addi	r2,gp,-25784
}
1000f1ac:	e037883a 	mov	sp,fp
1000f1b0:	dfc00117 	ldw	ra,4(sp)
1000f1b4:	df000017 	ldw	fp,0(sp)
1000f1b8:	dec00204 	addi	sp,sp,8
1000f1bc:	f800283a 	ret

1000f1c0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000f1c0:	defffb04 	addi	sp,sp,-20
1000f1c4:	dfc00415 	stw	ra,16(sp)
1000f1c8:	df000315 	stw	fp,12(sp)
1000f1cc:	df000304 	addi	fp,sp,12
1000f1d0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000f1d4:	e0bfff17 	ldw	r2,-4(fp)
1000f1d8:	10000816 	blt	r2,zero,1000f1fc <close+0x3c>
1000f1dc:	01400304 	movi	r5,12
1000f1e0:	e13fff17 	ldw	r4,-4(fp)
1000f1e4:	000c8b80 	call	1000c8b8 <__mulsi3>
1000f1e8:	1007883a 	mov	r3,r2
1000f1ec:	00840074 	movhi	r2,4097
1000f1f0:	108b3a04 	addi	r2,r2,11496
1000f1f4:	1885883a 	add	r2,r3,r2
1000f1f8:	00000106 	br	1000f200 <close+0x40>
1000f1fc:	0005883a 	mov	r2,zero
1000f200:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000f204:	e0bffd17 	ldw	r2,-12(fp)
1000f208:	10001926 	beq	r2,zero,1000f270 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000f20c:	e0bffd17 	ldw	r2,-12(fp)
1000f210:	10800017 	ldw	r2,0(r2)
1000f214:	10800417 	ldw	r2,16(r2)
1000f218:	10000626 	beq	r2,zero,1000f234 <close+0x74>
1000f21c:	e0bffd17 	ldw	r2,-12(fp)
1000f220:	10800017 	ldw	r2,0(r2)
1000f224:	10800417 	ldw	r2,16(r2)
1000f228:	e13ffd17 	ldw	r4,-12(fp)
1000f22c:	103ee83a 	callr	r2
1000f230:	00000106 	br	1000f238 <close+0x78>
1000f234:	0005883a 	mov	r2,zero
1000f238:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000f23c:	e13fff17 	ldw	r4,-4(fp)
1000f240:	000f8a80 	call	1000f8a8 <alt_release_fd>
    if (rval < 0)
1000f244:	e0bffe17 	ldw	r2,-8(fp)
1000f248:	1000070e 	bge	r2,zero,1000f268 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000f24c:	000f1840 	call	1000f184 <alt_get_errno>
1000f250:	1007883a 	mov	r3,r2
1000f254:	e0bffe17 	ldw	r2,-8(fp)
1000f258:	0085c83a 	sub	r2,zero,r2
1000f25c:	18800015 	stw	r2,0(r3)
      return -1;
1000f260:	00bfffc4 	movi	r2,-1
1000f264:	00000706 	br	1000f284 <close+0xc4>
    }
    return 0;
1000f268:	0005883a 	mov	r2,zero
1000f26c:	00000506 	br	1000f284 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f270:	000f1840 	call	1000f184 <alt_get_errno>
1000f274:	1007883a 	mov	r3,r2
1000f278:	00801444 	movi	r2,81
1000f27c:	18800015 	stw	r2,0(r3)
    return -1;
1000f280:	00bfffc4 	movi	r2,-1
  }
}
1000f284:	e037883a 	mov	sp,fp
1000f288:	dfc00117 	ldw	ra,4(sp)
1000f28c:	df000017 	ldw	fp,0(sp)
1000f290:	dec00204 	addi	sp,sp,8
1000f294:	f800283a 	ret

1000f298 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000f298:	defffc04 	addi	sp,sp,-16
1000f29c:	df000315 	stw	fp,12(sp)
1000f2a0:	df000304 	addi	fp,sp,12
1000f2a4:	e13ffd15 	stw	r4,-12(fp)
1000f2a8:	e17ffe15 	stw	r5,-8(fp)
1000f2ac:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000f2b0:	e0bfff17 	ldw	r2,-4(fp)
}
1000f2b4:	e037883a 	mov	sp,fp
1000f2b8:	df000017 	ldw	fp,0(sp)
1000f2bc:	dec00104 	addi	sp,sp,4
1000f2c0:	f800283a 	ret

1000f2c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f2c4:	defffe04 	addi	sp,sp,-8
1000f2c8:	dfc00115 	stw	ra,4(sp)
1000f2cc:	df000015 	stw	fp,0(sp)
1000f2d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f2d4:	d0a00b17 	ldw	r2,-32724(gp)
1000f2d8:	10000326 	beq	r2,zero,1000f2e8 <alt_get_errno+0x24>
1000f2dc:	d0a00b17 	ldw	r2,-32724(gp)
1000f2e0:	103ee83a 	callr	r2
1000f2e4:	00000106 	br	1000f2ec <alt_get_errno+0x28>
1000f2e8:	d0a6d204 	addi	r2,gp,-25784
}
1000f2ec:	e037883a 	mov	sp,fp
1000f2f0:	dfc00117 	ldw	ra,4(sp)
1000f2f4:	df000017 	ldw	fp,0(sp)
1000f2f8:	dec00204 	addi	sp,sp,8
1000f2fc:	f800283a 	ret

1000f300 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000f300:	defffb04 	addi	sp,sp,-20
1000f304:	dfc00415 	stw	ra,16(sp)
1000f308:	df000315 	stw	fp,12(sp)
1000f30c:	df000304 	addi	fp,sp,12
1000f310:	e13ffe15 	stw	r4,-8(fp)
1000f314:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f318:	e0bffe17 	ldw	r2,-8(fp)
1000f31c:	10000816 	blt	r2,zero,1000f340 <fstat+0x40>
1000f320:	01400304 	movi	r5,12
1000f324:	e13ffe17 	ldw	r4,-8(fp)
1000f328:	000c8b80 	call	1000c8b8 <__mulsi3>
1000f32c:	1007883a 	mov	r3,r2
1000f330:	00840074 	movhi	r2,4097
1000f334:	108b3a04 	addi	r2,r2,11496
1000f338:	1885883a 	add	r2,r3,r2
1000f33c:	00000106 	br	1000f344 <fstat+0x44>
1000f340:	0005883a 	mov	r2,zero
1000f344:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000f348:	e0bffd17 	ldw	r2,-12(fp)
1000f34c:	10001026 	beq	r2,zero,1000f390 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000f350:	e0bffd17 	ldw	r2,-12(fp)
1000f354:	10800017 	ldw	r2,0(r2)
1000f358:	10800817 	ldw	r2,32(r2)
1000f35c:	10000726 	beq	r2,zero,1000f37c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000f360:	e0bffd17 	ldw	r2,-12(fp)
1000f364:	10800017 	ldw	r2,0(r2)
1000f368:	10800817 	ldw	r2,32(r2)
1000f36c:	e17fff17 	ldw	r5,-4(fp)
1000f370:	e13ffd17 	ldw	r4,-12(fp)
1000f374:	103ee83a 	callr	r2
1000f378:	00000a06 	br	1000f3a4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000f37c:	e0bfff17 	ldw	r2,-4(fp)
1000f380:	00c80004 	movi	r3,8192
1000f384:	10c00115 	stw	r3,4(r2)
      return 0;
1000f388:	0005883a 	mov	r2,zero
1000f38c:	00000506 	br	1000f3a4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f390:	000f2c40 	call	1000f2c4 <alt_get_errno>
1000f394:	1007883a 	mov	r3,r2
1000f398:	00801444 	movi	r2,81
1000f39c:	18800015 	stw	r2,0(r3)
    return -1;
1000f3a0:	00bfffc4 	movi	r2,-1
  }
}
1000f3a4:	e037883a 	mov	sp,fp
1000f3a8:	dfc00117 	ldw	ra,4(sp)
1000f3ac:	df000017 	ldw	fp,0(sp)
1000f3b0:	dec00204 	addi	sp,sp,8
1000f3b4:	f800283a 	ret

1000f3b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f3b8:	defffe04 	addi	sp,sp,-8
1000f3bc:	dfc00115 	stw	ra,4(sp)
1000f3c0:	df000015 	stw	fp,0(sp)
1000f3c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f3c8:	d0a00b17 	ldw	r2,-32724(gp)
1000f3cc:	10000326 	beq	r2,zero,1000f3dc <alt_get_errno+0x24>
1000f3d0:	d0a00b17 	ldw	r2,-32724(gp)
1000f3d4:	103ee83a 	callr	r2
1000f3d8:	00000106 	br	1000f3e0 <alt_get_errno+0x28>
1000f3dc:	d0a6d204 	addi	r2,gp,-25784
}
1000f3e0:	e037883a 	mov	sp,fp
1000f3e4:	dfc00117 	ldw	ra,4(sp)
1000f3e8:	df000017 	ldw	fp,0(sp)
1000f3ec:	dec00204 	addi	sp,sp,8
1000f3f0:	f800283a 	ret

1000f3f4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000f3f4:	deffed04 	addi	sp,sp,-76
1000f3f8:	dfc01215 	stw	ra,72(sp)
1000f3fc:	df001115 	stw	fp,68(sp)
1000f400:	df001104 	addi	fp,sp,68
1000f404:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f408:	e0bfff17 	ldw	r2,-4(fp)
1000f40c:	10000816 	blt	r2,zero,1000f430 <isatty+0x3c>
1000f410:	01400304 	movi	r5,12
1000f414:	e13fff17 	ldw	r4,-4(fp)
1000f418:	000c8b80 	call	1000c8b8 <__mulsi3>
1000f41c:	1007883a 	mov	r3,r2
1000f420:	00840074 	movhi	r2,4097
1000f424:	108b3a04 	addi	r2,r2,11496
1000f428:	1885883a 	add	r2,r3,r2
1000f42c:	00000106 	br	1000f434 <isatty+0x40>
1000f430:	0005883a 	mov	r2,zero
1000f434:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000f438:	e0bfef17 	ldw	r2,-68(fp)
1000f43c:	10000e26 	beq	r2,zero,1000f478 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000f440:	e0bfef17 	ldw	r2,-68(fp)
1000f444:	10800017 	ldw	r2,0(r2)
1000f448:	10800817 	ldw	r2,32(r2)
1000f44c:	1000021e 	bne	r2,zero,1000f458 <isatty+0x64>
    {
      return 1;
1000f450:	00800044 	movi	r2,1
1000f454:	00000d06 	br	1000f48c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000f458:	e0bff004 	addi	r2,fp,-64
1000f45c:	100b883a 	mov	r5,r2
1000f460:	e13fff17 	ldw	r4,-4(fp)
1000f464:	000f3000 	call	1000f300 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000f468:	e0bff117 	ldw	r2,-60(fp)
1000f46c:	10880020 	cmpeqi	r2,r2,8192
1000f470:	10803fcc 	andi	r2,r2,255
1000f474:	00000506 	br	1000f48c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f478:	000f3b80 	call	1000f3b8 <alt_get_errno>
1000f47c:	1007883a 	mov	r3,r2
1000f480:	00801444 	movi	r2,81
1000f484:	18800015 	stw	r2,0(r3)
    return 0;
1000f488:	0005883a 	mov	r2,zero
  }
}
1000f48c:	e037883a 	mov	sp,fp
1000f490:	dfc00117 	ldw	ra,4(sp)
1000f494:	df000017 	ldw	fp,0(sp)
1000f498:	dec00204 	addi	sp,sp,8
1000f49c:	f800283a 	ret

1000f4a0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000f4a0:	defffc04 	addi	sp,sp,-16
1000f4a4:	df000315 	stw	fp,12(sp)
1000f4a8:	df000304 	addi	fp,sp,12
1000f4ac:	e13ffd15 	stw	r4,-12(fp)
1000f4b0:	e17ffe15 	stw	r5,-8(fp)
1000f4b4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000f4b8:	e0fffe17 	ldw	r3,-8(fp)
1000f4bc:	e0bffd17 	ldw	r2,-12(fp)
1000f4c0:	18800c26 	beq	r3,r2,1000f4f4 <alt_load_section+0x54>
  {
    while( to != end )
1000f4c4:	00000806 	br	1000f4e8 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000f4c8:	e0bffe17 	ldw	r2,-8(fp)
1000f4cc:	10c00104 	addi	r3,r2,4
1000f4d0:	e0fffe15 	stw	r3,-8(fp)
1000f4d4:	e0fffd17 	ldw	r3,-12(fp)
1000f4d8:	19000104 	addi	r4,r3,4
1000f4dc:	e13ffd15 	stw	r4,-12(fp)
1000f4e0:	18c00017 	ldw	r3,0(r3)
1000f4e4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000f4e8:	e0fffe17 	ldw	r3,-8(fp)
1000f4ec:	e0bfff17 	ldw	r2,-4(fp)
1000f4f0:	18bff51e 	bne	r3,r2,1000f4c8 <__alt_data_end+0xf800f4c8>
    {
      *to++ = *from++;
    }
  }
}
1000f4f4:	0001883a 	nop
1000f4f8:	e037883a 	mov	sp,fp
1000f4fc:	df000017 	ldw	fp,0(sp)
1000f500:	dec00104 	addi	sp,sp,4
1000f504:	f800283a 	ret

1000f508 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000f508:	defffe04 	addi	sp,sp,-8
1000f50c:	dfc00115 	stw	ra,4(sp)
1000f510:	df000015 	stw	fp,0(sp)
1000f514:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000f518:	01840074 	movhi	r6,4097
1000f51c:	318fc204 	addi	r6,r6,16136
1000f520:	01440074 	movhi	r5,4097
1000f524:	29490704 	addi	r5,r5,9244
1000f528:	01040074 	movhi	r4,4097
1000f52c:	210fc204 	addi	r4,r4,16136
1000f530:	000f4a00 	call	1000f4a0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000f534:	01840034 	movhi	r6,4096
1000f538:	31808c04 	addi	r6,r6,560
1000f53c:	01440034 	movhi	r5,4096
1000f540:	29400804 	addi	r5,r5,32
1000f544:	01040034 	movhi	r4,4096
1000f548:	21000804 	addi	r4,r4,32
1000f54c:	000f4a00 	call	1000f4a0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000f550:	01840074 	movhi	r6,4097
1000f554:	31890704 	addi	r6,r6,9244
1000f558:	01440074 	movhi	r5,4097
1000f55c:	29466904 	addi	r5,r5,6564
1000f560:	01040074 	movhi	r4,4097
1000f564:	21066904 	addi	r4,r4,6564
1000f568:	000f4a00 	call	1000f4a0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000f56c:	00108ec0 	call	100108ec <alt_dcache_flush_all>
  alt_icache_flush_all();
1000f570:	0010aac0 	call	10010aac <alt_icache_flush_all>
}
1000f574:	0001883a 	nop
1000f578:	e037883a 	mov	sp,fp
1000f57c:	dfc00117 	ldw	ra,4(sp)
1000f580:	df000017 	ldw	fp,0(sp)
1000f584:	dec00204 	addi	sp,sp,8
1000f588:	f800283a 	ret

1000f58c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f58c:	defffe04 	addi	sp,sp,-8
1000f590:	dfc00115 	stw	ra,4(sp)
1000f594:	df000015 	stw	fp,0(sp)
1000f598:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f59c:	d0a00b17 	ldw	r2,-32724(gp)
1000f5a0:	10000326 	beq	r2,zero,1000f5b0 <alt_get_errno+0x24>
1000f5a4:	d0a00b17 	ldw	r2,-32724(gp)
1000f5a8:	103ee83a 	callr	r2
1000f5ac:	00000106 	br	1000f5b4 <alt_get_errno+0x28>
1000f5b0:	d0a6d204 	addi	r2,gp,-25784
}
1000f5b4:	e037883a 	mov	sp,fp
1000f5b8:	dfc00117 	ldw	ra,4(sp)
1000f5bc:	df000017 	ldw	fp,0(sp)
1000f5c0:	dec00204 	addi	sp,sp,8
1000f5c4:	f800283a 	ret

1000f5c8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000f5c8:	defff904 	addi	sp,sp,-28
1000f5cc:	dfc00615 	stw	ra,24(sp)
1000f5d0:	df000515 	stw	fp,20(sp)
1000f5d4:	df000504 	addi	fp,sp,20
1000f5d8:	e13ffd15 	stw	r4,-12(fp)
1000f5dc:	e17ffe15 	stw	r5,-8(fp)
1000f5e0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000f5e4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f5e8:	e0bffd17 	ldw	r2,-12(fp)
1000f5ec:	10000816 	blt	r2,zero,1000f610 <lseek+0x48>
1000f5f0:	01400304 	movi	r5,12
1000f5f4:	e13ffd17 	ldw	r4,-12(fp)
1000f5f8:	000c8b80 	call	1000c8b8 <__mulsi3>
1000f5fc:	1007883a 	mov	r3,r2
1000f600:	00840074 	movhi	r2,4097
1000f604:	108b3a04 	addi	r2,r2,11496
1000f608:	1885883a 	add	r2,r3,r2
1000f60c:	00000106 	br	1000f614 <lseek+0x4c>
1000f610:	0005883a 	mov	r2,zero
1000f614:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000f618:	e0bffc17 	ldw	r2,-16(fp)
1000f61c:	10001026 	beq	r2,zero,1000f660 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000f620:	e0bffc17 	ldw	r2,-16(fp)
1000f624:	10800017 	ldw	r2,0(r2)
1000f628:	10800717 	ldw	r2,28(r2)
1000f62c:	10000926 	beq	r2,zero,1000f654 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000f630:	e0bffc17 	ldw	r2,-16(fp)
1000f634:	10800017 	ldw	r2,0(r2)
1000f638:	10800717 	ldw	r2,28(r2)
1000f63c:	e1bfff17 	ldw	r6,-4(fp)
1000f640:	e17ffe17 	ldw	r5,-8(fp)
1000f644:	e13ffc17 	ldw	r4,-16(fp)
1000f648:	103ee83a 	callr	r2
1000f64c:	e0bffb15 	stw	r2,-20(fp)
1000f650:	00000506 	br	1000f668 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000f654:	00bfde84 	movi	r2,-134
1000f658:	e0bffb15 	stw	r2,-20(fp)
1000f65c:	00000206 	br	1000f668 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000f660:	00bfebc4 	movi	r2,-81
1000f664:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000f668:	e0bffb17 	ldw	r2,-20(fp)
1000f66c:	1000070e 	bge	r2,zero,1000f68c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1000f670:	000f58c0 	call	1000f58c <alt_get_errno>
1000f674:	1007883a 	mov	r3,r2
1000f678:	e0bffb17 	ldw	r2,-20(fp)
1000f67c:	0085c83a 	sub	r2,zero,r2
1000f680:	18800015 	stw	r2,0(r3)
    rc = -1;
1000f684:	00bfffc4 	movi	r2,-1
1000f688:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000f68c:	e0bffb17 	ldw	r2,-20(fp)
}
1000f690:	e037883a 	mov	sp,fp
1000f694:	dfc00117 	ldw	ra,4(sp)
1000f698:	df000017 	ldw	fp,0(sp)
1000f69c:	dec00204 	addi	sp,sp,8
1000f6a0:	f800283a 	ret

1000f6a4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000f6a4:	defffd04 	addi	sp,sp,-12
1000f6a8:	dfc00215 	stw	ra,8(sp)
1000f6ac:	df000115 	stw	fp,4(sp)
1000f6b0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000f6b4:	0009883a 	mov	r4,zero
1000f6b8:	000fb7c0 	call	1000fb7c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000f6bc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000f6c0:	000fbb40 	call	1000fbb4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000f6c4:	01840074 	movhi	r6,4097
1000f6c8:	3188fd04 	addi	r6,r6,9204
1000f6cc:	01440074 	movhi	r5,4097
1000f6d0:	2948fd04 	addi	r5,r5,9204
1000f6d4:	01040074 	movhi	r4,4097
1000f6d8:	2108fd04 	addi	r4,r4,9204
1000f6dc:	0010e500 	call	10010e50 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000f6e0:	00109ec0 	call	100109ec <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000f6e4:	01040074 	movhi	r4,4097
1000f6e8:	21029304 	addi	r4,r4,2636
1000f6ec:	00116100 	call	10011610 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000f6f0:	d0a6d317 	ldw	r2,-25780(gp)
1000f6f4:	d0e6d417 	ldw	r3,-25776(gp)
1000f6f8:	d126d517 	ldw	r4,-25772(gp)
1000f6fc:	200d883a 	mov	r6,r4
1000f700:	180b883a 	mov	r5,r3
1000f704:	1009883a 	mov	r4,r2
1000f708:	00003c40 	call	100003c4 <main>
1000f70c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000f710:	01000044 	movi	r4,1
1000f714:	000f1c00 	call	1000f1c0 <close>
  exit (result);
1000f718:	e13fff17 	ldw	r4,-4(fp)
1000f71c:	00116240 	call	10011624 <exit>

1000f720 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000f720:	defffe04 	addi	sp,sp,-8
1000f724:	df000115 	stw	fp,4(sp)
1000f728:	df000104 	addi	fp,sp,4
1000f72c:	e13fff15 	stw	r4,-4(fp)
}
1000f730:	0001883a 	nop
1000f734:	e037883a 	mov	sp,fp
1000f738:	df000017 	ldw	fp,0(sp)
1000f73c:	dec00104 	addi	sp,sp,4
1000f740:	f800283a 	ret

1000f744 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000f744:	defffe04 	addi	sp,sp,-8
1000f748:	df000115 	stw	fp,4(sp)
1000f74c:	df000104 	addi	fp,sp,4
1000f750:	e13fff15 	stw	r4,-4(fp)
}
1000f754:	0001883a 	nop
1000f758:	e037883a 	mov	sp,fp
1000f75c:	df000017 	ldw	fp,0(sp)
1000f760:	dec00104 	addi	sp,sp,4
1000f764:	f800283a 	ret

1000f768 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f768:	defffe04 	addi	sp,sp,-8
1000f76c:	dfc00115 	stw	ra,4(sp)
1000f770:	df000015 	stw	fp,0(sp)
1000f774:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f778:	d0a00b17 	ldw	r2,-32724(gp)
1000f77c:	10000326 	beq	r2,zero,1000f78c <alt_get_errno+0x24>
1000f780:	d0a00b17 	ldw	r2,-32724(gp)
1000f784:	103ee83a 	callr	r2
1000f788:	00000106 	br	1000f790 <alt_get_errno+0x28>
1000f78c:	d0a6d204 	addi	r2,gp,-25784
}
1000f790:	e037883a 	mov	sp,fp
1000f794:	dfc00117 	ldw	ra,4(sp)
1000f798:	df000017 	ldw	fp,0(sp)
1000f79c:	dec00204 	addi	sp,sp,8
1000f7a0:	f800283a 	ret

1000f7a4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000f7a4:	defff904 	addi	sp,sp,-28
1000f7a8:	dfc00615 	stw	ra,24(sp)
1000f7ac:	df000515 	stw	fp,20(sp)
1000f7b0:	df000504 	addi	fp,sp,20
1000f7b4:	e13ffd15 	stw	r4,-12(fp)
1000f7b8:	e17ffe15 	stw	r5,-8(fp)
1000f7bc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f7c0:	e0bffd17 	ldw	r2,-12(fp)
1000f7c4:	10000816 	blt	r2,zero,1000f7e8 <read+0x44>
1000f7c8:	01400304 	movi	r5,12
1000f7cc:	e13ffd17 	ldw	r4,-12(fp)
1000f7d0:	000c8b80 	call	1000c8b8 <__mulsi3>
1000f7d4:	1007883a 	mov	r3,r2
1000f7d8:	00840074 	movhi	r2,4097
1000f7dc:	108b3a04 	addi	r2,r2,11496
1000f7e0:	1885883a 	add	r2,r3,r2
1000f7e4:	00000106 	br	1000f7ec <read+0x48>
1000f7e8:	0005883a 	mov	r2,zero
1000f7ec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000f7f0:	e0bffb17 	ldw	r2,-20(fp)
1000f7f4:	10002226 	beq	r2,zero,1000f880 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000f7f8:	e0bffb17 	ldw	r2,-20(fp)
1000f7fc:	10800217 	ldw	r2,8(r2)
1000f800:	108000cc 	andi	r2,r2,3
1000f804:	10800060 	cmpeqi	r2,r2,1
1000f808:	1000181e 	bne	r2,zero,1000f86c <read+0xc8>
        (fd->dev->read))
1000f80c:	e0bffb17 	ldw	r2,-20(fp)
1000f810:	10800017 	ldw	r2,0(r2)
1000f814:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000f818:	10001426 	beq	r2,zero,1000f86c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000f81c:	e0bffb17 	ldw	r2,-20(fp)
1000f820:	10800017 	ldw	r2,0(r2)
1000f824:	10800517 	ldw	r2,20(r2)
1000f828:	e0ffff17 	ldw	r3,-4(fp)
1000f82c:	180d883a 	mov	r6,r3
1000f830:	e17ffe17 	ldw	r5,-8(fp)
1000f834:	e13ffb17 	ldw	r4,-20(fp)
1000f838:	103ee83a 	callr	r2
1000f83c:	e0bffc15 	stw	r2,-16(fp)
1000f840:	e0bffc17 	ldw	r2,-16(fp)
1000f844:	1000070e 	bge	r2,zero,1000f864 <read+0xc0>
        {
          ALT_ERRNO = -rval;
1000f848:	000f7680 	call	1000f768 <alt_get_errno>
1000f84c:	1007883a 	mov	r3,r2
1000f850:	e0bffc17 	ldw	r2,-16(fp)
1000f854:	0085c83a 	sub	r2,zero,r2
1000f858:	18800015 	stw	r2,0(r3)
          return -1;
1000f85c:	00bfffc4 	movi	r2,-1
1000f860:	00000c06 	br	1000f894 <read+0xf0>
        }
        return rval;
1000f864:	e0bffc17 	ldw	r2,-16(fp)
1000f868:	00000a06 	br	1000f894 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000f86c:	000f7680 	call	1000f768 <alt_get_errno>
1000f870:	1007883a 	mov	r3,r2
1000f874:	00800344 	movi	r2,13
1000f878:	18800015 	stw	r2,0(r3)
1000f87c:	00000406 	br	1000f890 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000f880:	000f7680 	call	1000f768 <alt_get_errno>
1000f884:	1007883a 	mov	r3,r2
1000f888:	00801444 	movi	r2,81
1000f88c:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000f890:	00bfffc4 	movi	r2,-1
}
1000f894:	e037883a 	mov	sp,fp
1000f898:	dfc00117 	ldw	ra,4(sp)
1000f89c:	df000017 	ldw	fp,0(sp)
1000f8a0:	dec00204 	addi	sp,sp,8
1000f8a4:	f800283a 	ret

1000f8a8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000f8a8:	defffc04 	addi	sp,sp,-16
1000f8ac:	dfc00315 	stw	ra,12(sp)
1000f8b0:	df000215 	stw	fp,8(sp)
1000f8b4:	dc000115 	stw	r16,4(sp)
1000f8b8:	df000204 	addi	fp,sp,8
1000f8bc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000f8c0:	e0bffe17 	ldw	r2,-8(fp)
1000f8c4:	108000d0 	cmplti	r2,r2,3
1000f8c8:	1000111e 	bne	r2,zero,1000f910 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000f8cc:	04040074 	movhi	r16,4097
1000f8d0:	840b3a04 	addi	r16,r16,11496
1000f8d4:	e0bffe17 	ldw	r2,-8(fp)
1000f8d8:	01400304 	movi	r5,12
1000f8dc:	1009883a 	mov	r4,r2
1000f8e0:	000c8b80 	call	1000c8b8 <__mulsi3>
1000f8e4:	8085883a 	add	r2,r16,r2
1000f8e8:	10800204 	addi	r2,r2,8
1000f8ec:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000f8f0:	04040074 	movhi	r16,4097
1000f8f4:	840b3a04 	addi	r16,r16,11496
1000f8f8:	e0bffe17 	ldw	r2,-8(fp)
1000f8fc:	01400304 	movi	r5,12
1000f900:	1009883a 	mov	r4,r2
1000f904:	000c8b80 	call	1000c8b8 <__mulsi3>
1000f908:	8085883a 	add	r2,r16,r2
1000f90c:	10000015 	stw	zero,0(r2)
  }
}
1000f910:	0001883a 	nop
1000f914:	e6ffff04 	addi	sp,fp,-4
1000f918:	dfc00217 	ldw	ra,8(sp)
1000f91c:	df000117 	ldw	fp,4(sp)
1000f920:	dc000017 	ldw	r16,0(sp)
1000f924:	dec00304 	addi	sp,sp,12
1000f928:	f800283a 	ret

1000f92c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000f92c:	defff904 	addi	sp,sp,-28
1000f930:	df000615 	stw	fp,24(sp)
1000f934:	df000604 	addi	fp,sp,24
1000f938:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f93c:	0005303a 	rdctl	r2,status
1000f940:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f944:	e0fffe17 	ldw	r3,-8(fp)
1000f948:	00bfff84 	movi	r2,-2
1000f94c:	1884703a 	and	r2,r3,r2
1000f950:	1001703a 	wrctl	status,r2
  
  return context;
1000f954:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000f958:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000f95c:	d0a00c17 	ldw	r2,-32720(gp)
1000f960:	10c000c4 	addi	r3,r2,3
1000f964:	00bfff04 	movi	r2,-4
1000f968:	1884703a 	and	r2,r3,r2
1000f96c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000f970:	d0e00c17 	ldw	r3,-32720(gp)
1000f974:	e0bfff17 	ldw	r2,-4(fp)
1000f978:	1887883a 	add	r3,r3,r2
1000f97c:	00860034 	movhi	r2,6144
1000f980:	10800004 	addi	r2,r2,0
1000f984:	10c0062e 	bgeu	r2,r3,1000f9a0 <sbrk+0x74>
1000f988:	e0bffb17 	ldw	r2,-20(fp)
1000f98c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f990:	e0bffa17 	ldw	r2,-24(fp)
1000f994:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000f998:	00bfffc4 	movi	r2,-1
1000f99c:	00000b06 	br	1000f9cc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000f9a0:	d0a00c17 	ldw	r2,-32720(gp)
1000f9a4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1000f9a8:	d0e00c17 	ldw	r3,-32720(gp)
1000f9ac:	e0bfff17 	ldw	r2,-4(fp)
1000f9b0:	1885883a 	add	r2,r3,r2
1000f9b4:	d0a00c15 	stw	r2,-32720(gp)
1000f9b8:	e0bffb17 	ldw	r2,-20(fp)
1000f9bc:	e0bffc15 	stw	r2,-16(fp)
1000f9c0:	e0bffc17 	ldw	r2,-16(fp)
1000f9c4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000f9c8:	e0bffd17 	ldw	r2,-12(fp)
} 
1000f9cc:	e037883a 	mov	sp,fp
1000f9d0:	df000017 	ldw	fp,0(sp)
1000f9d4:	dec00104 	addi	sp,sp,4
1000f9d8:	f800283a 	ret

1000f9dc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
1000f9dc:	defffd04 	addi	sp,sp,-12
1000f9e0:	dfc00215 	stw	ra,8(sp)
1000f9e4:	df000115 	stw	fp,4(sp)
1000f9e8:	df000104 	addi	fp,sp,4
1000f9ec:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1000f9f0:	e13fff17 	ldw	r4,-4(fp)
1000f9f4:	00107940 	call	10010794 <alt_busy_sleep>
}
1000f9f8:	e037883a 	mov	sp,fp
1000f9fc:	dfc00117 	ldw	ra,4(sp)
1000fa00:	df000017 	ldw	fp,0(sp)
1000fa04:	dec00204 	addi	sp,sp,8
1000fa08:	f800283a 	ret

1000fa0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fa0c:	defffe04 	addi	sp,sp,-8
1000fa10:	dfc00115 	stw	ra,4(sp)
1000fa14:	df000015 	stw	fp,0(sp)
1000fa18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fa1c:	d0a00b17 	ldw	r2,-32724(gp)
1000fa20:	10000326 	beq	r2,zero,1000fa30 <alt_get_errno+0x24>
1000fa24:	d0a00b17 	ldw	r2,-32724(gp)
1000fa28:	103ee83a 	callr	r2
1000fa2c:	00000106 	br	1000fa34 <alt_get_errno+0x28>
1000fa30:	d0a6d204 	addi	r2,gp,-25784
}
1000fa34:	e037883a 	mov	sp,fp
1000fa38:	dfc00117 	ldw	ra,4(sp)
1000fa3c:	df000017 	ldw	fp,0(sp)
1000fa40:	dec00204 	addi	sp,sp,8
1000fa44:	f800283a 	ret

1000fa48 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000fa48:	defff904 	addi	sp,sp,-28
1000fa4c:	dfc00615 	stw	ra,24(sp)
1000fa50:	df000515 	stw	fp,20(sp)
1000fa54:	df000504 	addi	fp,sp,20
1000fa58:	e13ffd15 	stw	r4,-12(fp)
1000fa5c:	e17ffe15 	stw	r5,-8(fp)
1000fa60:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fa64:	e0bffd17 	ldw	r2,-12(fp)
1000fa68:	10000816 	blt	r2,zero,1000fa8c <write+0x44>
1000fa6c:	01400304 	movi	r5,12
1000fa70:	e13ffd17 	ldw	r4,-12(fp)
1000fa74:	000c8b80 	call	1000c8b8 <__mulsi3>
1000fa78:	1007883a 	mov	r3,r2
1000fa7c:	00840074 	movhi	r2,4097
1000fa80:	108b3a04 	addi	r2,r2,11496
1000fa84:	1885883a 	add	r2,r3,r2
1000fa88:	00000106 	br	1000fa90 <write+0x48>
1000fa8c:	0005883a 	mov	r2,zero
1000fa90:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000fa94:	e0bffb17 	ldw	r2,-20(fp)
1000fa98:	10002126 	beq	r2,zero,1000fb20 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000fa9c:	e0bffb17 	ldw	r2,-20(fp)
1000faa0:	10800217 	ldw	r2,8(r2)
1000faa4:	108000cc 	andi	r2,r2,3
1000faa8:	10001826 	beq	r2,zero,1000fb0c <write+0xc4>
1000faac:	e0bffb17 	ldw	r2,-20(fp)
1000fab0:	10800017 	ldw	r2,0(r2)
1000fab4:	10800617 	ldw	r2,24(r2)
1000fab8:	10001426 	beq	r2,zero,1000fb0c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000fabc:	e0bffb17 	ldw	r2,-20(fp)
1000fac0:	10800017 	ldw	r2,0(r2)
1000fac4:	10800617 	ldw	r2,24(r2)
1000fac8:	e0ffff17 	ldw	r3,-4(fp)
1000facc:	180d883a 	mov	r6,r3
1000fad0:	e17ffe17 	ldw	r5,-8(fp)
1000fad4:	e13ffb17 	ldw	r4,-20(fp)
1000fad8:	103ee83a 	callr	r2
1000fadc:	e0bffc15 	stw	r2,-16(fp)
1000fae0:	e0bffc17 	ldw	r2,-16(fp)
1000fae4:	1000070e 	bge	r2,zero,1000fb04 <write+0xbc>
      {
        ALT_ERRNO = -rval;
1000fae8:	000fa0c0 	call	1000fa0c <alt_get_errno>
1000faec:	1007883a 	mov	r3,r2
1000faf0:	e0bffc17 	ldw	r2,-16(fp)
1000faf4:	0085c83a 	sub	r2,zero,r2
1000faf8:	18800015 	stw	r2,0(r3)
        return -1;
1000fafc:	00bfffc4 	movi	r2,-1
1000fb00:	00000c06 	br	1000fb34 <write+0xec>
      }
      return rval;
1000fb04:	e0bffc17 	ldw	r2,-16(fp)
1000fb08:	00000a06 	br	1000fb34 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000fb0c:	000fa0c0 	call	1000fa0c <alt_get_errno>
1000fb10:	1007883a 	mov	r3,r2
1000fb14:	00800344 	movi	r2,13
1000fb18:	18800015 	stw	r2,0(r3)
1000fb1c:	00000406 	br	1000fb30 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000fb20:	000fa0c0 	call	1000fa0c <alt_get_errno>
1000fb24:	1007883a 	mov	r3,r2
1000fb28:	00801444 	movi	r2,81
1000fb2c:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000fb30:	00bfffc4 	movi	r2,-1
}
1000fb34:	e037883a 	mov	sp,fp
1000fb38:	dfc00117 	ldw	ra,4(sp)
1000fb3c:	df000017 	ldw	fp,0(sp)
1000fb40:	dec00204 	addi	sp,sp,8
1000fb44:	f800283a 	ret

1000fb48 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000fb48:	defffd04 	addi	sp,sp,-12
1000fb4c:	dfc00215 	stw	ra,8(sp)
1000fb50:	df000115 	stw	fp,4(sp)
1000fb54:	df000104 	addi	fp,sp,4
1000fb58:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000fb5c:	d1600804 	addi	r5,gp,-32736
1000fb60:	e13fff17 	ldw	r4,-4(fp)
1000fb64:	00109480 	call	10010948 <alt_dev_llist_insert>
}
1000fb68:	e037883a 	mov	sp,fp
1000fb6c:	dfc00117 	ldw	ra,4(sp)
1000fb70:	df000017 	ldw	fp,0(sp)
1000fb74:	dec00204 	addi	sp,sp,8
1000fb78:	f800283a 	ret

1000fb7c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000fb7c:	defffd04 	addi	sp,sp,-12
1000fb80:	dfc00215 	stw	ra,8(sp)
1000fb84:	df000115 	stw	fp,4(sp)
1000fb88:	df000104 	addi	fp,sp,4
1000fb8c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
1000fb90:	00112f40 	call	100112f4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000fb94:	00800044 	movi	r2,1
1000fb98:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000fb9c:	0001883a 	nop
1000fba0:	e037883a 	mov	sp,fp
1000fba4:	dfc00117 	ldw	ra,4(sp)
1000fba8:	df000017 	ldw	fp,0(sp)
1000fbac:	dec00204 	addi	sp,sp,8
1000fbb0:	f800283a 	ret

1000fbb4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000fbb4:	defffe04 	addi	sp,sp,-8
1000fbb8:	dfc00115 	stw	ra,4(sp)
1000fbbc:	df000015 	stw	fp,0(sp)
1000fbc0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000fbc4:	01800144 	movi	r6,5
1000fbc8:	000b883a 	mov	r5,zero
1000fbcc:	01040074 	movhi	r4,4097
1000fbd0:	210ba404 	addi	r4,r4,11920
1000fbd4:	000fd640 	call	1000fd64 <altera_avalon_jtag_uart_init>
1000fbd8:	01040074 	movhi	r4,4097
1000fbdc:	210b9a04 	addi	r4,r4,11880
1000fbe0:	000fb480 	call	1000fb48 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000fbe4:	0001883a 	nop
}
1000fbe8:	0001883a 	nop
1000fbec:	e037883a 	mov	sp,fp
1000fbf0:	dfc00117 	ldw	ra,4(sp)
1000fbf4:	df000017 	ldw	fp,0(sp)
1000fbf8:	dec00204 	addi	sp,sp,8
1000fbfc:	f800283a 	ret

1000fc00 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000fc00:	defffa04 	addi	sp,sp,-24
1000fc04:	dfc00515 	stw	ra,20(sp)
1000fc08:	df000415 	stw	fp,16(sp)
1000fc0c:	df000404 	addi	fp,sp,16
1000fc10:	e13ffd15 	stw	r4,-12(fp)
1000fc14:	e17ffe15 	stw	r5,-8(fp)
1000fc18:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000fc1c:	e0bffd17 	ldw	r2,-12(fp)
1000fc20:	10800017 	ldw	r2,0(r2)
1000fc24:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000fc28:	e0bffc17 	ldw	r2,-16(fp)
1000fc2c:	10c00a04 	addi	r3,r2,40
1000fc30:	e0bffd17 	ldw	r2,-12(fp)
1000fc34:	10800217 	ldw	r2,8(r2)
1000fc38:	100f883a 	mov	r7,r2
1000fc3c:	e1bfff17 	ldw	r6,-4(fp)
1000fc40:	e17ffe17 	ldw	r5,-8(fp)
1000fc44:	1809883a 	mov	r4,r3
1000fc48:	00102280 	call	10010228 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000fc4c:	e037883a 	mov	sp,fp
1000fc50:	dfc00117 	ldw	ra,4(sp)
1000fc54:	df000017 	ldw	fp,0(sp)
1000fc58:	dec00204 	addi	sp,sp,8
1000fc5c:	f800283a 	ret

1000fc60 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000fc60:	defffa04 	addi	sp,sp,-24
1000fc64:	dfc00515 	stw	ra,20(sp)
1000fc68:	df000415 	stw	fp,16(sp)
1000fc6c:	df000404 	addi	fp,sp,16
1000fc70:	e13ffd15 	stw	r4,-12(fp)
1000fc74:	e17ffe15 	stw	r5,-8(fp)
1000fc78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000fc7c:	e0bffd17 	ldw	r2,-12(fp)
1000fc80:	10800017 	ldw	r2,0(r2)
1000fc84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000fc88:	e0bffc17 	ldw	r2,-16(fp)
1000fc8c:	10c00a04 	addi	r3,r2,40
1000fc90:	e0bffd17 	ldw	r2,-12(fp)
1000fc94:	10800217 	ldw	r2,8(r2)
1000fc98:	100f883a 	mov	r7,r2
1000fc9c:	e1bfff17 	ldw	r6,-4(fp)
1000fca0:	e17ffe17 	ldw	r5,-8(fp)
1000fca4:	1809883a 	mov	r4,r3
1000fca8:	00104440 	call	10010444 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000fcac:	e037883a 	mov	sp,fp
1000fcb0:	dfc00117 	ldw	ra,4(sp)
1000fcb4:	df000017 	ldw	fp,0(sp)
1000fcb8:	dec00204 	addi	sp,sp,8
1000fcbc:	f800283a 	ret

1000fcc0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000fcc0:	defffc04 	addi	sp,sp,-16
1000fcc4:	dfc00315 	stw	ra,12(sp)
1000fcc8:	df000215 	stw	fp,8(sp)
1000fccc:	df000204 	addi	fp,sp,8
1000fcd0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000fcd4:	e0bfff17 	ldw	r2,-4(fp)
1000fcd8:	10800017 	ldw	r2,0(r2)
1000fcdc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000fce0:	e0bffe17 	ldw	r2,-8(fp)
1000fce4:	10c00a04 	addi	r3,r2,40
1000fce8:	e0bfff17 	ldw	r2,-4(fp)
1000fcec:	10800217 	ldw	r2,8(r2)
1000fcf0:	100b883a 	mov	r5,r2
1000fcf4:	1809883a 	mov	r4,r3
1000fcf8:	00100d00 	call	100100d0 <altera_avalon_jtag_uart_close>
}
1000fcfc:	e037883a 	mov	sp,fp
1000fd00:	dfc00117 	ldw	ra,4(sp)
1000fd04:	df000017 	ldw	fp,0(sp)
1000fd08:	dec00204 	addi	sp,sp,8
1000fd0c:	f800283a 	ret

1000fd10 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000fd10:	defffa04 	addi	sp,sp,-24
1000fd14:	dfc00515 	stw	ra,20(sp)
1000fd18:	df000415 	stw	fp,16(sp)
1000fd1c:	df000404 	addi	fp,sp,16
1000fd20:	e13ffd15 	stw	r4,-12(fp)
1000fd24:	e17ffe15 	stw	r5,-8(fp)
1000fd28:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000fd2c:	e0bffd17 	ldw	r2,-12(fp)
1000fd30:	10800017 	ldw	r2,0(r2)
1000fd34:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000fd38:	e0bffc17 	ldw	r2,-16(fp)
1000fd3c:	10800a04 	addi	r2,r2,40
1000fd40:	e1bfff17 	ldw	r6,-4(fp)
1000fd44:	e17ffe17 	ldw	r5,-8(fp)
1000fd48:	1009883a 	mov	r4,r2
1000fd4c:	00101380 	call	10010138 <altera_avalon_jtag_uart_ioctl>
}
1000fd50:	e037883a 	mov	sp,fp
1000fd54:	dfc00117 	ldw	ra,4(sp)
1000fd58:	df000017 	ldw	fp,0(sp)
1000fd5c:	dec00204 	addi	sp,sp,8
1000fd60:	f800283a 	ret

1000fd64 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000fd64:	defffa04 	addi	sp,sp,-24
1000fd68:	dfc00515 	stw	ra,20(sp)
1000fd6c:	df000415 	stw	fp,16(sp)
1000fd70:	df000404 	addi	fp,sp,16
1000fd74:	e13ffd15 	stw	r4,-12(fp)
1000fd78:	e17ffe15 	stw	r5,-8(fp)
1000fd7c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000fd80:	e0bffd17 	ldw	r2,-12(fp)
1000fd84:	00c00044 	movi	r3,1
1000fd88:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000fd8c:	e0bffd17 	ldw	r2,-12(fp)
1000fd90:	10800017 	ldw	r2,0(r2)
1000fd94:	10800104 	addi	r2,r2,4
1000fd98:	1007883a 	mov	r3,r2
1000fd9c:	e0bffd17 	ldw	r2,-12(fp)
1000fda0:	10800817 	ldw	r2,32(r2)
1000fda4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000fda8:	e0bffe17 	ldw	r2,-8(fp)
1000fdac:	e0ffff17 	ldw	r3,-4(fp)
1000fdb0:	d8000015 	stw	zero,0(sp)
1000fdb4:	e1fffd17 	ldw	r7,-12(fp)
1000fdb8:	01840074 	movhi	r6,4097
1000fdbc:	31bf8904 	addi	r6,r6,-476
1000fdc0:	180b883a 	mov	r5,r3
1000fdc4:	1009883a 	mov	r4,r2
1000fdc8:	0010acc0 	call	10010acc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000fdcc:	e0bffd17 	ldw	r2,-12(fp)
1000fdd0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000fdd4:	e0bffd17 	ldw	r2,-12(fp)
1000fdd8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000fddc:	d0e6d717 	ldw	r3,-25764(gp)
1000fde0:	e1fffd17 	ldw	r7,-12(fp)
1000fde4:	01840074 	movhi	r6,4097
1000fde8:	31800c04 	addi	r6,r6,48
1000fdec:	180b883a 	mov	r5,r3
1000fdf0:	1009883a 	mov	r4,r2
1000fdf4:	00106680 	call	10010668 <alt_alarm_start>
1000fdf8:	1000040e 	bge	r2,zero,1000fe0c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000fdfc:	e0fffd17 	ldw	r3,-12(fp)
1000fe00:	00a00034 	movhi	r2,32768
1000fe04:	10bfffc4 	addi	r2,r2,-1
1000fe08:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000fe0c:	0001883a 	nop
1000fe10:	e037883a 	mov	sp,fp
1000fe14:	dfc00117 	ldw	ra,4(sp)
1000fe18:	df000017 	ldw	fp,0(sp)
1000fe1c:	dec00204 	addi	sp,sp,8
1000fe20:	f800283a 	ret

1000fe24 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000fe24:	defff804 	addi	sp,sp,-32
1000fe28:	df000715 	stw	fp,28(sp)
1000fe2c:	df000704 	addi	fp,sp,28
1000fe30:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000fe34:	e0bfff17 	ldw	r2,-4(fp)
1000fe38:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000fe3c:	e0bffb17 	ldw	r2,-20(fp)
1000fe40:	10800017 	ldw	r2,0(r2)
1000fe44:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000fe48:	e0bffc17 	ldw	r2,-16(fp)
1000fe4c:	10800104 	addi	r2,r2,4
1000fe50:	10800037 	ldwio	r2,0(r2)
1000fe54:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000fe58:	e0bffd17 	ldw	r2,-12(fp)
1000fe5c:	1080c00c 	andi	r2,r2,768
1000fe60:	10006d26 	beq	r2,zero,10010018 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000fe64:	e0bffd17 	ldw	r2,-12(fp)
1000fe68:	1080400c 	andi	r2,r2,256
1000fe6c:	10003526 	beq	r2,zero,1000ff44 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000fe70:	00800074 	movhi	r2,1
1000fe74:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fe78:	e0bffb17 	ldw	r2,-20(fp)
1000fe7c:	10800a17 	ldw	r2,40(r2)
1000fe80:	10800044 	addi	r2,r2,1
1000fe84:	1081ffcc 	andi	r2,r2,2047
1000fe88:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000fe8c:	e0bffb17 	ldw	r2,-20(fp)
1000fe90:	10c00b17 	ldw	r3,44(r2)
1000fe94:	e0bffe17 	ldw	r2,-8(fp)
1000fe98:	18801526 	beq	r3,r2,1000fef0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000fe9c:	e0bffc17 	ldw	r2,-16(fp)
1000fea0:	10800037 	ldwio	r2,0(r2)
1000fea4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000fea8:	e0bff917 	ldw	r2,-28(fp)
1000feac:	10a0000c 	andi	r2,r2,32768
1000feb0:	10001126 	beq	r2,zero,1000fef8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000feb4:	e0bffb17 	ldw	r2,-20(fp)
1000feb8:	10800a17 	ldw	r2,40(r2)
1000febc:	e0fff917 	ldw	r3,-28(fp)
1000fec0:	1809883a 	mov	r4,r3
1000fec4:	e0fffb17 	ldw	r3,-20(fp)
1000fec8:	1885883a 	add	r2,r3,r2
1000fecc:	10800e04 	addi	r2,r2,56
1000fed0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fed4:	e0bffb17 	ldw	r2,-20(fp)
1000fed8:	10800a17 	ldw	r2,40(r2)
1000fedc:	10800044 	addi	r2,r2,1
1000fee0:	10c1ffcc 	andi	r3,r2,2047
1000fee4:	e0bffb17 	ldw	r2,-20(fp)
1000fee8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000feec:	003fe206 	br	1000fe78 <__alt_data_end+0xf800fe78>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1000fef0:	0001883a 	nop
1000fef4:	00000106 	br	1000fefc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
1000fef8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000fefc:	e0bff917 	ldw	r2,-28(fp)
1000ff00:	10bfffec 	andhi	r2,r2,65535
1000ff04:	10000f26 	beq	r2,zero,1000ff44 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000ff08:	e0bffb17 	ldw	r2,-20(fp)
1000ff0c:	10c00817 	ldw	r3,32(r2)
1000ff10:	00bfff84 	movi	r2,-2
1000ff14:	1886703a 	and	r3,r3,r2
1000ff18:	e0bffb17 	ldw	r2,-20(fp)
1000ff1c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000ff20:	e0bffc17 	ldw	r2,-16(fp)
1000ff24:	10800104 	addi	r2,r2,4
1000ff28:	1007883a 	mov	r3,r2
1000ff2c:	e0bffb17 	ldw	r2,-20(fp)
1000ff30:	10800817 	ldw	r2,32(r2)
1000ff34:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000ff38:	e0bffc17 	ldw	r2,-16(fp)
1000ff3c:	10800104 	addi	r2,r2,4
1000ff40:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000ff44:	e0bffd17 	ldw	r2,-12(fp)
1000ff48:	1080800c 	andi	r2,r2,512
1000ff4c:	103fbe26 	beq	r2,zero,1000fe48 <__alt_data_end+0xf800fe48>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000ff50:	e0bffd17 	ldw	r2,-12(fp)
1000ff54:	1004d43a 	srli	r2,r2,16
1000ff58:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000ff5c:	00001406 	br	1000ffb0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000ff60:	e0bffc17 	ldw	r2,-16(fp)
1000ff64:	e0fffb17 	ldw	r3,-20(fp)
1000ff68:	18c00d17 	ldw	r3,52(r3)
1000ff6c:	e13ffb17 	ldw	r4,-20(fp)
1000ff70:	20c7883a 	add	r3,r4,r3
1000ff74:	18c20e04 	addi	r3,r3,2104
1000ff78:	18c00003 	ldbu	r3,0(r3)
1000ff7c:	18c03fcc 	andi	r3,r3,255
1000ff80:	18c0201c 	xori	r3,r3,128
1000ff84:	18ffe004 	addi	r3,r3,-128
1000ff88:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000ff8c:	e0bffb17 	ldw	r2,-20(fp)
1000ff90:	10800d17 	ldw	r2,52(r2)
1000ff94:	10800044 	addi	r2,r2,1
1000ff98:	10c1ffcc 	andi	r3,r2,2047
1000ff9c:	e0bffb17 	ldw	r2,-20(fp)
1000ffa0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000ffa4:	e0bffa17 	ldw	r2,-24(fp)
1000ffa8:	10bfffc4 	addi	r2,r2,-1
1000ffac:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000ffb0:	e0bffa17 	ldw	r2,-24(fp)
1000ffb4:	10000526 	beq	r2,zero,1000ffcc <altera_avalon_jtag_uart_irq+0x1a8>
1000ffb8:	e0bffb17 	ldw	r2,-20(fp)
1000ffbc:	10c00d17 	ldw	r3,52(r2)
1000ffc0:	e0bffb17 	ldw	r2,-20(fp)
1000ffc4:	10800c17 	ldw	r2,48(r2)
1000ffc8:	18bfe51e 	bne	r3,r2,1000ff60 <__alt_data_end+0xf800ff60>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000ffcc:	e0bffa17 	ldw	r2,-24(fp)
1000ffd0:	103f9d26 	beq	r2,zero,1000fe48 <__alt_data_end+0xf800fe48>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000ffd4:	e0bffb17 	ldw	r2,-20(fp)
1000ffd8:	10c00817 	ldw	r3,32(r2)
1000ffdc:	00bfff44 	movi	r2,-3
1000ffe0:	1886703a 	and	r3,r3,r2
1000ffe4:	e0bffb17 	ldw	r2,-20(fp)
1000ffe8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000ffec:	e0bffb17 	ldw	r2,-20(fp)
1000fff0:	10800017 	ldw	r2,0(r2)
1000fff4:	10800104 	addi	r2,r2,4
1000fff8:	1007883a 	mov	r3,r2
1000fffc:	e0bffb17 	ldw	r2,-20(fp)
10010000:	10800817 	ldw	r2,32(r2)
10010004:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010008:	e0bffc17 	ldw	r2,-16(fp)
1001000c:	10800104 	addi	r2,r2,4
10010010:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10010014:	003f8c06 	br	1000fe48 <__alt_data_end+0xf800fe48>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10010018:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
1001001c:	0001883a 	nop
10010020:	e037883a 	mov	sp,fp
10010024:	df000017 	ldw	fp,0(sp)
10010028:	dec00104 	addi	sp,sp,4
1001002c:	f800283a 	ret

10010030 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10010030:	defff804 	addi	sp,sp,-32
10010034:	df000715 	stw	fp,28(sp)
10010038:	df000704 	addi	fp,sp,28
1001003c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10010040:	e0bffb17 	ldw	r2,-20(fp)
10010044:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10010048:	e0bff917 	ldw	r2,-28(fp)
1001004c:	10800017 	ldw	r2,0(r2)
10010050:	10800104 	addi	r2,r2,4
10010054:	10800037 	ldwio	r2,0(r2)
10010058:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1001005c:	e0bffa17 	ldw	r2,-24(fp)
10010060:	1081000c 	andi	r2,r2,1024
10010064:	10000b26 	beq	r2,zero,10010094 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10010068:	e0bff917 	ldw	r2,-28(fp)
1001006c:	10800017 	ldw	r2,0(r2)
10010070:	10800104 	addi	r2,r2,4
10010074:	1007883a 	mov	r3,r2
10010078:	e0bff917 	ldw	r2,-28(fp)
1001007c:	10800817 	ldw	r2,32(r2)
10010080:	10810014 	ori	r2,r2,1024
10010084:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10010088:	e0bff917 	ldw	r2,-28(fp)
1001008c:	10000915 	stw	zero,36(r2)
10010090:	00000a06 	br	100100bc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10010094:	e0bff917 	ldw	r2,-28(fp)
10010098:	10c00917 	ldw	r3,36(r2)
1001009c:	00a00034 	movhi	r2,32768
100100a0:	10bfff04 	addi	r2,r2,-4
100100a4:	10c00536 	bltu	r2,r3,100100bc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
100100a8:	e0bff917 	ldw	r2,-28(fp)
100100ac:	10800917 	ldw	r2,36(r2)
100100b0:	10c00044 	addi	r3,r2,1
100100b4:	e0bff917 	ldw	r2,-28(fp)
100100b8:	10c00915 	stw	r3,36(r2)
100100bc:	d0a6d717 	ldw	r2,-25764(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
100100c0:	e037883a 	mov	sp,fp
100100c4:	df000017 	ldw	fp,0(sp)
100100c8:	dec00104 	addi	sp,sp,4
100100cc:	f800283a 	ret

100100d0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
100100d0:	defffd04 	addi	sp,sp,-12
100100d4:	df000215 	stw	fp,8(sp)
100100d8:	df000204 	addi	fp,sp,8
100100dc:	e13ffe15 	stw	r4,-8(fp)
100100e0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100100e4:	00000506 	br	100100fc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
100100e8:	e0bfff17 	ldw	r2,-4(fp)
100100ec:	1090000c 	andi	r2,r2,16384
100100f0:	10000226 	beq	r2,zero,100100fc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
100100f4:	00bffd44 	movi	r2,-11
100100f8:	00000b06 	br	10010128 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100100fc:	e0bffe17 	ldw	r2,-8(fp)
10010100:	10c00d17 	ldw	r3,52(r2)
10010104:	e0bffe17 	ldw	r2,-8(fp)
10010108:	10800c17 	ldw	r2,48(r2)
1001010c:	18800526 	beq	r3,r2,10010124 <altera_avalon_jtag_uart_close+0x54>
10010110:	e0bffe17 	ldw	r2,-8(fp)
10010114:	10c00917 	ldw	r3,36(r2)
10010118:	e0bffe17 	ldw	r2,-8(fp)
1001011c:	10800117 	ldw	r2,4(r2)
10010120:	18bff136 	bltu	r3,r2,100100e8 <__alt_data_end+0xf80100e8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10010124:	0005883a 	mov	r2,zero
}
10010128:	e037883a 	mov	sp,fp
1001012c:	df000017 	ldw	fp,0(sp)
10010130:	dec00104 	addi	sp,sp,4
10010134:	f800283a 	ret

10010138 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10010138:	defffa04 	addi	sp,sp,-24
1001013c:	df000515 	stw	fp,20(sp)
10010140:	df000504 	addi	fp,sp,20
10010144:	e13ffd15 	stw	r4,-12(fp)
10010148:	e17ffe15 	stw	r5,-8(fp)
1001014c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10010150:	00bff9c4 	movi	r2,-25
10010154:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10010158:	e0bffe17 	ldw	r2,-8(fp)
1001015c:	10da8060 	cmpeqi	r3,r2,27137
10010160:	1800031e 	bne	r3,zero,10010170 <altera_avalon_jtag_uart_ioctl+0x38>
10010164:	109a80a0 	cmpeqi	r2,r2,27138
10010168:	1000181e 	bne	r2,zero,100101cc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
1001016c:	00002906 	br	10010214 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10010170:	e0bffd17 	ldw	r2,-12(fp)
10010174:	10c00117 	ldw	r3,4(r2)
10010178:	00a00034 	movhi	r2,32768
1001017c:	10bfffc4 	addi	r2,r2,-1
10010180:	18802126 	beq	r3,r2,10010208 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10010184:	e0bfff17 	ldw	r2,-4(fp)
10010188:	10800017 	ldw	r2,0(r2)
1001018c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10010190:	e0bffc17 	ldw	r2,-16(fp)
10010194:	10800090 	cmplti	r2,r2,2
10010198:	1000061e 	bne	r2,zero,100101b4 <altera_avalon_jtag_uart_ioctl+0x7c>
1001019c:	e0fffc17 	ldw	r3,-16(fp)
100101a0:	00a00034 	movhi	r2,32768
100101a4:	10bfffc4 	addi	r2,r2,-1
100101a8:	18800226 	beq	r3,r2,100101b4 <altera_avalon_jtag_uart_ioctl+0x7c>
100101ac:	e0bffc17 	ldw	r2,-16(fp)
100101b0:	00000206 	br	100101bc <altera_avalon_jtag_uart_ioctl+0x84>
100101b4:	00a00034 	movhi	r2,32768
100101b8:	10bfff84 	addi	r2,r2,-2
100101bc:	e0fffd17 	ldw	r3,-12(fp)
100101c0:	18800115 	stw	r2,4(r3)
      rc = 0;
100101c4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100101c8:	00000f06 	br	10010208 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
100101cc:	e0bffd17 	ldw	r2,-12(fp)
100101d0:	10c00117 	ldw	r3,4(r2)
100101d4:	00a00034 	movhi	r2,32768
100101d8:	10bfffc4 	addi	r2,r2,-1
100101dc:	18800c26 	beq	r3,r2,10010210 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
100101e0:	e0bffd17 	ldw	r2,-12(fp)
100101e4:	10c00917 	ldw	r3,36(r2)
100101e8:	e0bffd17 	ldw	r2,-12(fp)
100101ec:	10800117 	ldw	r2,4(r2)
100101f0:	1885803a 	cmpltu	r2,r3,r2
100101f4:	10c03fcc 	andi	r3,r2,255
100101f8:	e0bfff17 	ldw	r2,-4(fp)
100101fc:	10c00015 	stw	r3,0(r2)
      rc = 0;
10010200:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10010204:	00000206 	br	10010210 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10010208:	0001883a 	nop
1001020c:	00000106 	br	10010214 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10010210:	0001883a 	nop

  default:
    break;
  }

  return rc;
10010214:	e0bffb17 	ldw	r2,-20(fp)
}
10010218:	e037883a 	mov	sp,fp
1001021c:	df000017 	ldw	fp,0(sp)
10010220:	dec00104 	addi	sp,sp,4
10010224:	f800283a 	ret

10010228 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10010228:	defff304 	addi	sp,sp,-52
1001022c:	dfc00c15 	stw	ra,48(sp)
10010230:	df000b15 	stw	fp,44(sp)
10010234:	df000b04 	addi	fp,sp,44
10010238:	e13ffc15 	stw	r4,-16(fp)
1001023c:	e17ffd15 	stw	r5,-12(fp)
10010240:	e1bffe15 	stw	r6,-8(fp)
10010244:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10010248:	e0bffd17 	ldw	r2,-12(fp)
1001024c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10010250:	00004706 	br	10010370 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10010254:	e0bffc17 	ldw	r2,-16(fp)
10010258:	10800a17 	ldw	r2,40(r2)
1001025c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10010260:	e0bffc17 	ldw	r2,-16(fp)
10010264:	10800b17 	ldw	r2,44(r2)
10010268:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1001026c:	e0fff717 	ldw	r3,-36(fp)
10010270:	e0bff817 	ldw	r2,-32(fp)
10010274:	18800536 	bltu	r3,r2,1001028c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10010278:	e0fff717 	ldw	r3,-36(fp)
1001027c:	e0bff817 	ldw	r2,-32(fp)
10010280:	1885c83a 	sub	r2,r3,r2
10010284:	e0bff615 	stw	r2,-40(fp)
10010288:	00000406 	br	1001029c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1001028c:	00c20004 	movi	r3,2048
10010290:	e0bff817 	ldw	r2,-32(fp)
10010294:	1885c83a 	sub	r2,r3,r2
10010298:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1001029c:	e0bff617 	ldw	r2,-40(fp)
100102a0:	10001e26 	beq	r2,zero,1001031c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
100102a4:	e0fffe17 	ldw	r3,-8(fp)
100102a8:	e0bff617 	ldw	r2,-40(fp)
100102ac:	1880022e 	bgeu	r3,r2,100102b8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
100102b0:	e0bffe17 	ldw	r2,-8(fp)
100102b4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
100102b8:	e0bffc17 	ldw	r2,-16(fp)
100102bc:	10c00e04 	addi	r3,r2,56
100102c0:	e0bff817 	ldw	r2,-32(fp)
100102c4:	1885883a 	add	r2,r3,r2
100102c8:	e1bff617 	ldw	r6,-40(fp)
100102cc:	100b883a 	mov	r5,r2
100102d0:	e13ff517 	ldw	r4,-44(fp)
100102d4:	0007e380 	call	10007e38 <memcpy>
      ptr   += n;
100102d8:	e0fff517 	ldw	r3,-44(fp)
100102dc:	e0bff617 	ldw	r2,-40(fp)
100102e0:	1885883a 	add	r2,r3,r2
100102e4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
100102e8:	e0fffe17 	ldw	r3,-8(fp)
100102ec:	e0bff617 	ldw	r2,-40(fp)
100102f0:	1885c83a 	sub	r2,r3,r2
100102f4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100102f8:	e0fff817 	ldw	r3,-32(fp)
100102fc:	e0bff617 	ldw	r2,-40(fp)
10010300:	1885883a 	add	r2,r3,r2
10010304:	10c1ffcc 	andi	r3,r2,2047
10010308:	e0bffc17 	ldw	r2,-16(fp)
1001030c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10010310:	e0bffe17 	ldw	r2,-8(fp)
10010314:	00bfcf16 	blt	zero,r2,10010254 <__alt_data_end+0xf8010254>
10010318:	00000106 	br	10010320 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
1001031c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10010320:	e0fff517 	ldw	r3,-44(fp)
10010324:	e0bffd17 	ldw	r2,-12(fp)
10010328:	1880141e 	bne	r3,r2,1001037c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1001032c:	e0bfff17 	ldw	r2,-4(fp)
10010330:	1090000c 	andi	r2,r2,16384
10010334:	1000131e 	bne	r2,zero,10010384 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10010338:	0001883a 	nop
1001033c:	e0bffc17 	ldw	r2,-16(fp)
10010340:	10c00a17 	ldw	r3,40(r2)
10010344:	e0bff717 	ldw	r2,-36(fp)
10010348:	1880051e 	bne	r3,r2,10010360 <altera_avalon_jtag_uart_read+0x138>
1001034c:	e0bffc17 	ldw	r2,-16(fp)
10010350:	10c00917 	ldw	r3,36(r2)
10010354:	e0bffc17 	ldw	r2,-16(fp)
10010358:	10800117 	ldw	r2,4(r2)
1001035c:	18bff736 	bltu	r3,r2,1001033c <__alt_data_end+0xf801033c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10010360:	e0bffc17 	ldw	r2,-16(fp)
10010364:	10c00a17 	ldw	r3,40(r2)
10010368:	e0bff717 	ldw	r2,-36(fp)
1001036c:	18800726 	beq	r3,r2,1001038c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10010370:	e0bffe17 	ldw	r2,-8(fp)
10010374:	00bfb716 	blt	zero,r2,10010254 <__alt_data_end+0xf8010254>
10010378:	00000506 	br	10010390 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
1001037c:	0001883a 	nop
10010380:	00000306 	br	10010390 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10010384:	0001883a 	nop
10010388:	00000106 	br	10010390 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
1001038c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10010390:	e0fff517 	ldw	r3,-44(fp)
10010394:	e0bffd17 	ldw	r2,-12(fp)
10010398:	18801826 	beq	r3,r2,100103fc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001039c:	0005303a 	rdctl	r2,status
100103a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100103a4:	e0fffb17 	ldw	r3,-20(fp)
100103a8:	00bfff84 	movi	r2,-2
100103ac:	1884703a 	and	r2,r3,r2
100103b0:	1001703a 	wrctl	status,r2
  
  return context;
100103b4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
100103b8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100103bc:	e0bffc17 	ldw	r2,-16(fp)
100103c0:	10800817 	ldw	r2,32(r2)
100103c4:	10c00054 	ori	r3,r2,1
100103c8:	e0bffc17 	ldw	r2,-16(fp)
100103cc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100103d0:	e0bffc17 	ldw	r2,-16(fp)
100103d4:	10800017 	ldw	r2,0(r2)
100103d8:	10800104 	addi	r2,r2,4
100103dc:	1007883a 	mov	r3,r2
100103e0:	e0bffc17 	ldw	r2,-16(fp)
100103e4:	10800817 	ldw	r2,32(r2)
100103e8:	18800035 	stwio	r2,0(r3)
100103ec:	e0bffa17 	ldw	r2,-24(fp)
100103f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100103f4:	e0bff917 	ldw	r2,-28(fp)
100103f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
100103fc:	e0fff517 	ldw	r3,-44(fp)
10010400:	e0bffd17 	ldw	r2,-12(fp)
10010404:	18800426 	beq	r3,r2,10010418 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10010408:	e0fff517 	ldw	r3,-44(fp)
1001040c:	e0bffd17 	ldw	r2,-12(fp)
10010410:	1885c83a 	sub	r2,r3,r2
10010414:	00000606 	br	10010430 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10010418:	e0bfff17 	ldw	r2,-4(fp)
1001041c:	1090000c 	andi	r2,r2,16384
10010420:	10000226 	beq	r2,zero,1001042c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10010424:	00bffd44 	movi	r2,-11
10010428:	00000106 	br	10010430 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
1001042c:	00bffec4 	movi	r2,-5
}
10010430:	e037883a 	mov	sp,fp
10010434:	dfc00117 	ldw	ra,4(sp)
10010438:	df000017 	ldw	fp,0(sp)
1001043c:	dec00204 	addi	sp,sp,8
10010440:	f800283a 	ret

10010444 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10010444:	defff304 	addi	sp,sp,-52
10010448:	dfc00c15 	stw	ra,48(sp)
1001044c:	df000b15 	stw	fp,44(sp)
10010450:	df000b04 	addi	fp,sp,44
10010454:	e13ffc15 	stw	r4,-16(fp)
10010458:	e17ffd15 	stw	r5,-12(fp)
1001045c:	e1bffe15 	stw	r6,-8(fp)
10010460:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10010464:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10010468:	e0bffd17 	ldw	r2,-12(fp)
1001046c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10010470:	00003706 	br	10010550 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10010474:	e0bffc17 	ldw	r2,-16(fp)
10010478:	10800c17 	ldw	r2,48(r2)
1001047c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10010480:	e0bffc17 	ldw	r2,-16(fp)
10010484:	10800d17 	ldw	r2,52(r2)
10010488:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1001048c:	e0fff917 	ldw	r3,-28(fp)
10010490:	e0bff517 	ldw	r2,-44(fp)
10010494:	1880062e 	bgeu	r3,r2,100104b0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10010498:	e0fff517 	ldw	r3,-44(fp)
1001049c:	e0bff917 	ldw	r2,-28(fp)
100104a0:	1885c83a 	sub	r2,r3,r2
100104a4:	10bfffc4 	addi	r2,r2,-1
100104a8:	e0bff615 	stw	r2,-40(fp)
100104ac:	00000b06 	br	100104dc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
100104b0:	e0bff517 	ldw	r2,-44(fp)
100104b4:	10000526 	beq	r2,zero,100104cc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
100104b8:	00c20004 	movi	r3,2048
100104bc:	e0bff917 	ldw	r2,-28(fp)
100104c0:	1885c83a 	sub	r2,r3,r2
100104c4:	e0bff615 	stw	r2,-40(fp)
100104c8:	00000406 	br	100104dc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
100104cc:	00c1ffc4 	movi	r3,2047
100104d0:	e0bff917 	ldw	r2,-28(fp)
100104d4:	1885c83a 	sub	r2,r3,r2
100104d8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100104dc:	e0bff617 	ldw	r2,-40(fp)
100104e0:	10001e26 	beq	r2,zero,1001055c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
100104e4:	e0fffe17 	ldw	r3,-8(fp)
100104e8:	e0bff617 	ldw	r2,-40(fp)
100104ec:	1880022e 	bgeu	r3,r2,100104f8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
100104f0:	e0bffe17 	ldw	r2,-8(fp)
100104f4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
100104f8:	e0bffc17 	ldw	r2,-16(fp)
100104fc:	10c20e04 	addi	r3,r2,2104
10010500:	e0bff917 	ldw	r2,-28(fp)
10010504:	1885883a 	add	r2,r3,r2
10010508:	e1bff617 	ldw	r6,-40(fp)
1001050c:	e17ffd17 	ldw	r5,-12(fp)
10010510:	1009883a 	mov	r4,r2
10010514:	0007e380 	call	10007e38 <memcpy>
      ptr   += n;
10010518:	e0fffd17 	ldw	r3,-12(fp)
1001051c:	e0bff617 	ldw	r2,-40(fp)
10010520:	1885883a 	add	r2,r3,r2
10010524:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10010528:	e0fffe17 	ldw	r3,-8(fp)
1001052c:	e0bff617 	ldw	r2,-40(fp)
10010530:	1885c83a 	sub	r2,r3,r2
10010534:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010538:	e0fff917 	ldw	r3,-28(fp)
1001053c:	e0bff617 	ldw	r2,-40(fp)
10010540:	1885883a 	add	r2,r3,r2
10010544:	10c1ffcc 	andi	r3,r2,2047
10010548:	e0bffc17 	ldw	r2,-16(fp)
1001054c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10010550:	e0bffe17 	ldw	r2,-8(fp)
10010554:	00bfc716 	blt	zero,r2,10010474 <__alt_data_end+0xf8010474>
10010558:	00000106 	br	10010560 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
1001055c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010560:	0005303a 	rdctl	r2,status
10010564:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010568:	e0fffb17 	ldw	r3,-20(fp)
1001056c:	00bfff84 	movi	r2,-2
10010570:	1884703a 	and	r2,r3,r2
10010574:	1001703a 	wrctl	status,r2
  
  return context;
10010578:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1001057c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10010580:	e0bffc17 	ldw	r2,-16(fp)
10010584:	10800817 	ldw	r2,32(r2)
10010588:	10c00094 	ori	r3,r2,2
1001058c:	e0bffc17 	ldw	r2,-16(fp)
10010590:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010594:	e0bffc17 	ldw	r2,-16(fp)
10010598:	10800017 	ldw	r2,0(r2)
1001059c:	10800104 	addi	r2,r2,4
100105a0:	1007883a 	mov	r3,r2
100105a4:	e0bffc17 	ldw	r2,-16(fp)
100105a8:	10800817 	ldw	r2,32(r2)
100105ac:	18800035 	stwio	r2,0(r3)
100105b0:	e0bffa17 	ldw	r2,-24(fp)
100105b4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100105b8:	e0bff817 	ldw	r2,-32(fp)
100105bc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
100105c0:	e0bffe17 	ldw	r2,-8(fp)
100105c4:	0080100e 	bge	zero,r2,10010608 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
100105c8:	e0bfff17 	ldw	r2,-4(fp)
100105cc:	1090000c 	andi	r2,r2,16384
100105d0:	1000101e 	bne	r2,zero,10010614 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
100105d4:	0001883a 	nop
100105d8:	e0bffc17 	ldw	r2,-16(fp)
100105dc:	10c00d17 	ldw	r3,52(r2)
100105e0:	e0bff517 	ldw	r2,-44(fp)
100105e4:	1880051e 	bne	r3,r2,100105fc <altera_avalon_jtag_uart_write+0x1b8>
100105e8:	e0bffc17 	ldw	r2,-16(fp)
100105ec:	10c00917 	ldw	r3,36(r2)
100105f0:	e0bffc17 	ldw	r2,-16(fp)
100105f4:	10800117 	ldw	r2,4(r2)
100105f8:	18bff736 	bltu	r3,r2,100105d8 <__alt_data_end+0xf80105d8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
100105fc:	e0bffc17 	ldw	r2,-16(fp)
10010600:	10800917 	ldw	r2,36(r2)
10010604:	1000051e 	bne	r2,zero,1001061c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10010608:	e0bffe17 	ldw	r2,-8(fp)
1001060c:	00bfd016 	blt	zero,r2,10010550 <__alt_data_end+0xf8010550>
10010610:	00000306 	br	10010620 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10010614:	0001883a 	nop
10010618:	00000106 	br	10010620 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
1001061c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10010620:	e0fffd17 	ldw	r3,-12(fp)
10010624:	e0bff717 	ldw	r2,-36(fp)
10010628:	18800426 	beq	r3,r2,1001063c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
1001062c:	e0fffd17 	ldw	r3,-12(fp)
10010630:	e0bff717 	ldw	r2,-36(fp)
10010634:	1885c83a 	sub	r2,r3,r2
10010638:	00000606 	br	10010654 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
1001063c:	e0bfff17 	ldw	r2,-4(fp)
10010640:	1090000c 	andi	r2,r2,16384
10010644:	10000226 	beq	r2,zero,10010650 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10010648:	00bffd44 	movi	r2,-11
1001064c:	00000106 	br	10010654 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10010650:	00bffec4 	movi	r2,-5
}
10010654:	e037883a 	mov	sp,fp
10010658:	dfc00117 	ldw	ra,4(sp)
1001065c:	df000017 	ldw	fp,0(sp)
10010660:	dec00204 	addi	sp,sp,8
10010664:	f800283a 	ret

10010668 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10010668:	defff504 	addi	sp,sp,-44
1001066c:	df000a15 	stw	fp,40(sp)
10010670:	df000a04 	addi	fp,sp,40
10010674:	e13ffc15 	stw	r4,-16(fp)
10010678:	e17ffd15 	stw	r5,-12(fp)
1001067c:	e1bffe15 	stw	r6,-8(fp)
10010680:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10010684:	e03ff615 	stw	zero,-40(fp)
10010688:	d0a6d717 	ldw	r2,-25764(gp)
  
  if (alt_ticks_per_second ())
1001068c:	10003c26 	beq	r2,zero,10010780 <alt_alarm_start+0x118>
  {
    if (alarm)
10010690:	e0bffc17 	ldw	r2,-16(fp)
10010694:	10003826 	beq	r2,zero,10010778 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
10010698:	e0bffc17 	ldw	r2,-16(fp)
1001069c:	e0fffe17 	ldw	r3,-8(fp)
100106a0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
100106a4:	e0bffc17 	ldw	r2,-16(fp)
100106a8:	e0ffff17 	ldw	r3,-4(fp)
100106ac:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100106b0:	0005303a 	rdctl	r2,status
100106b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100106b8:	e0fff917 	ldw	r3,-28(fp)
100106bc:	00bfff84 	movi	r2,-2
100106c0:	1884703a 	and	r2,r3,r2
100106c4:	1001703a 	wrctl	status,r2
  
  return context;
100106c8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
100106cc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
100106d0:	d0a6d817 	ldw	r2,-25760(gp)
      
      current_nticks = alt_nticks();
100106d4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
100106d8:	e0fffd17 	ldw	r3,-12(fp)
100106dc:	e0bff617 	ldw	r2,-40(fp)
100106e0:	1885883a 	add	r2,r3,r2
100106e4:	10c00044 	addi	r3,r2,1
100106e8:	e0bffc17 	ldw	r2,-16(fp)
100106ec:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
100106f0:	e0bffc17 	ldw	r2,-16(fp)
100106f4:	10c00217 	ldw	r3,8(r2)
100106f8:	e0bff617 	ldw	r2,-40(fp)
100106fc:	1880042e 	bgeu	r3,r2,10010710 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10010700:	e0bffc17 	ldw	r2,-16(fp)
10010704:	00c00044 	movi	r3,1
10010708:	10c00405 	stb	r3,16(r2)
1001070c:	00000206 	br	10010718 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10010710:	e0bffc17 	ldw	r2,-16(fp)
10010714:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10010718:	e0bffc17 	ldw	r2,-16(fp)
1001071c:	d0e00e04 	addi	r3,gp,-32712
10010720:	e0fffa15 	stw	r3,-24(fp)
10010724:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10010728:	e0bffb17 	ldw	r2,-20(fp)
1001072c:	e0fffa17 	ldw	r3,-24(fp)
10010730:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10010734:	e0bffa17 	ldw	r2,-24(fp)
10010738:	10c00017 	ldw	r3,0(r2)
1001073c:	e0bffb17 	ldw	r2,-20(fp)
10010740:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10010744:	e0bffa17 	ldw	r2,-24(fp)
10010748:	10800017 	ldw	r2,0(r2)
1001074c:	e0fffb17 	ldw	r3,-20(fp)
10010750:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10010754:	e0bffa17 	ldw	r2,-24(fp)
10010758:	e0fffb17 	ldw	r3,-20(fp)
1001075c:	10c00015 	stw	r3,0(r2)
10010760:	e0bff817 	ldw	r2,-32(fp)
10010764:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010768:	e0bff717 	ldw	r2,-36(fp)
1001076c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10010770:	0005883a 	mov	r2,zero
10010774:	00000306 	br	10010784 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10010778:	00bffa84 	movi	r2,-22
1001077c:	00000106 	br	10010784 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10010780:	00bfde84 	movi	r2,-134
  }
}
10010784:	e037883a 	mov	sp,fp
10010788:	df000017 	ldw	fp,0(sp)
1001078c:	dec00104 	addi	sp,sp,4
10010790:	f800283a 	ret

10010794 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10010794:	defffa04 	addi	sp,sp,-24
10010798:	dfc00515 	stw	ra,20(sp)
1001079c:	df000415 	stw	fp,16(sp)
100107a0:	df000404 	addi	fp,sp,16
100107a4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
100107a8:	00800244 	movi	r2,9
100107ac:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
100107b0:	014003f4 	movhi	r5,15
100107b4:	29509004 	addi	r5,r5,16960
100107b8:	e13ffd17 	ldw	r4,-12(fp)
100107bc:	000c8b80 	call	1000c8b8 <__mulsi3>
100107c0:	100b883a 	mov	r5,r2
100107c4:	0100bef4 	movhi	r4,763
100107c8:	213c2004 	addi	r4,r4,-3968
100107cc:	000c7fc0 	call	1000c7fc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
100107d0:	100b883a 	mov	r5,r2
100107d4:	01200034 	movhi	r4,32768
100107d8:	213fffc4 	addi	r4,r4,-1
100107dc:	000c7fc0 	call	1000c7fc <__udivsi3>
100107e0:	100b883a 	mov	r5,r2
100107e4:	e13fff17 	ldw	r4,-4(fp)
100107e8:	000c7fc0 	call	1000c7fc <__udivsi3>
100107ec:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
100107f0:	e0bffe17 	ldw	r2,-8(fp)
100107f4:	10002a26 	beq	r2,zero,100108a0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
100107f8:	e03ffc15 	stw	zero,-16(fp)
100107fc:	00001706 	br	1001085c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10010800:	00a00034 	movhi	r2,32768
10010804:	10bfffc4 	addi	r2,r2,-1
10010808:	10bfffc4 	addi	r2,r2,-1
1001080c:	103ffe1e 	bne	r2,zero,10010808 <__alt_data_end+0xf8010808>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10010810:	014003f4 	movhi	r5,15
10010814:	29509004 	addi	r5,r5,16960
10010818:	e13ffd17 	ldw	r4,-12(fp)
1001081c:	000c8b80 	call	1000c8b8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10010820:	100b883a 	mov	r5,r2
10010824:	0100bef4 	movhi	r4,763
10010828:	213c2004 	addi	r4,r4,-3968
1001082c:	000c7fc0 	call	1000c7fc <__udivsi3>
10010830:	100b883a 	mov	r5,r2
10010834:	01200034 	movhi	r4,32768
10010838:	213fffc4 	addi	r4,r4,-1
1001083c:	000c7fc0 	call	1000c7fc <__udivsi3>
10010840:	1007883a 	mov	r3,r2
10010844:	e0bfff17 	ldw	r2,-4(fp)
10010848:	10c5c83a 	sub	r2,r2,r3
1001084c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10010850:	e0bffc17 	ldw	r2,-16(fp)
10010854:	10800044 	addi	r2,r2,1
10010858:	e0bffc15 	stw	r2,-16(fp)
1001085c:	e0fffc17 	ldw	r3,-16(fp)
10010860:	e0bffe17 	ldw	r2,-8(fp)
10010864:	18bfe616 	blt	r3,r2,10010800 <__alt_data_end+0xf8010800>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10010868:	014003f4 	movhi	r5,15
1001086c:	29509004 	addi	r5,r5,16960
10010870:	e13ffd17 	ldw	r4,-12(fp)
10010874:	000c8b80 	call	1000c8b8 <__mulsi3>
10010878:	100b883a 	mov	r5,r2
1001087c:	0100bef4 	movhi	r4,763
10010880:	213c2004 	addi	r4,r4,-3968
10010884:	000c7fc0 	call	1000c7fc <__udivsi3>
10010888:	e17fff17 	ldw	r5,-4(fp)
1001088c:	1009883a 	mov	r4,r2
10010890:	000c8b80 	call	1000c8b8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10010894:	10bfffc4 	addi	r2,r2,-1
10010898:	103ffe1e 	bne	r2,zero,10010894 <__alt_data_end+0xf8010894>
1001089c:	00000d06 	br	100108d4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
100108a0:	014003f4 	movhi	r5,15
100108a4:	29509004 	addi	r5,r5,16960
100108a8:	e13ffd17 	ldw	r4,-12(fp)
100108ac:	000c8b80 	call	1000c8b8 <__mulsi3>
100108b0:	100b883a 	mov	r5,r2
100108b4:	0100bef4 	movhi	r4,763
100108b8:	213c2004 	addi	r4,r4,-3968
100108bc:	000c7fc0 	call	1000c7fc <__udivsi3>
100108c0:	e17fff17 	ldw	r5,-4(fp)
100108c4:	1009883a 	mov	r4,r2
100108c8:	000c8b80 	call	1000c8b8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
100108cc:	10bfffc4 	addi	r2,r2,-1
100108d0:	00bffe16 	blt	zero,r2,100108cc <__alt_data_end+0xf80108cc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
100108d4:	0005883a 	mov	r2,zero
}
100108d8:	e037883a 	mov	sp,fp
100108dc:	dfc00117 	ldw	ra,4(sp)
100108e0:	df000017 	ldw	fp,0(sp)
100108e4:	dec00204 	addi	sp,sp,8
100108e8:	f800283a 	ret

100108ec <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
100108ec:	deffff04 	addi	sp,sp,-4
100108f0:	df000015 	stw	fp,0(sp)
100108f4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100108f8:	0001883a 	nop
100108fc:	e037883a 	mov	sp,fp
10010900:	df000017 	ldw	fp,0(sp)
10010904:	dec00104 	addi	sp,sp,4
10010908:	f800283a 	ret

1001090c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001090c:	defffe04 	addi	sp,sp,-8
10010910:	dfc00115 	stw	ra,4(sp)
10010914:	df000015 	stw	fp,0(sp)
10010918:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001091c:	d0a00b17 	ldw	r2,-32724(gp)
10010920:	10000326 	beq	r2,zero,10010930 <alt_get_errno+0x24>
10010924:	d0a00b17 	ldw	r2,-32724(gp)
10010928:	103ee83a 	callr	r2
1001092c:	00000106 	br	10010934 <alt_get_errno+0x28>
10010930:	d0a6d204 	addi	r2,gp,-25784
}
10010934:	e037883a 	mov	sp,fp
10010938:	dfc00117 	ldw	ra,4(sp)
1001093c:	df000017 	ldw	fp,0(sp)
10010940:	dec00204 	addi	sp,sp,8
10010944:	f800283a 	ret

10010948 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10010948:	defffa04 	addi	sp,sp,-24
1001094c:	dfc00515 	stw	ra,20(sp)
10010950:	df000415 	stw	fp,16(sp)
10010954:	df000404 	addi	fp,sp,16
10010958:	e13ffe15 	stw	r4,-8(fp)
1001095c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10010960:	e0bffe17 	ldw	r2,-8(fp)
10010964:	10000326 	beq	r2,zero,10010974 <alt_dev_llist_insert+0x2c>
10010968:	e0bffe17 	ldw	r2,-8(fp)
1001096c:	10800217 	ldw	r2,8(r2)
10010970:	1000061e 	bne	r2,zero,1001098c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10010974:	001090c0 	call	1001090c <alt_get_errno>
10010978:	1007883a 	mov	r3,r2
1001097c:	00800584 	movi	r2,22
10010980:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10010984:	00bffa84 	movi	r2,-22
10010988:	00001306 	br	100109d8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1001098c:	e0bffe17 	ldw	r2,-8(fp)
10010990:	e0ffff17 	ldw	r3,-4(fp)
10010994:	e0fffc15 	stw	r3,-16(fp)
10010998:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1001099c:	e0bffd17 	ldw	r2,-12(fp)
100109a0:	e0fffc17 	ldw	r3,-16(fp)
100109a4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100109a8:	e0bffc17 	ldw	r2,-16(fp)
100109ac:	10c00017 	ldw	r3,0(r2)
100109b0:	e0bffd17 	ldw	r2,-12(fp)
100109b4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100109b8:	e0bffc17 	ldw	r2,-16(fp)
100109bc:	10800017 	ldw	r2,0(r2)
100109c0:	e0fffd17 	ldw	r3,-12(fp)
100109c4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100109c8:	e0bffc17 	ldw	r2,-16(fp)
100109cc:	e0fffd17 	ldw	r3,-12(fp)
100109d0:	10c00015 	stw	r3,0(r2)

  return 0;  
100109d4:	0005883a 	mov	r2,zero
}
100109d8:	e037883a 	mov	sp,fp
100109dc:	dfc00117 	ldw	ra,4(sp)
100109e0:	df000017 	ldw	fp,0(sp)
100109e4:	dec00204 	addi	sp,sp,8
100109e8:	f800283a 	ret

100109ec <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
100109ec:	defffd04 	addi	sp,sp,-12
100109f0:	dfc00215 	stw	ra,8(sp)
100109f4:	df000115 	stw	fp,4(sp)
100109f8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100109fc:	00840074 	movhi	r2,4097
10010a00:	10866804 	addi	r2,r2,6560
10010a04:	e0bfff15 	stw	r2,-4(fp)
10010a08:	00000606 	br	10010a24 <_do_ctors+0x38>
        (*ctor) (); 
10010a0c:	e0bfff17 	ldw	r2,-4(fp)
10010a10:	10800017 	ldw	r2,0(r2)
10010a14:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10010a18:	e0bfff17 	ldw	r2,-4(fp)
10010a1c:	10bfff04 	addi	r2,r2,-4
10010a20:	e0bfff15 	stw	r2,-4(fp)
10010a24:	e0ffff17 	ldw	r3,-4(fp)
10010a28:	00840074 	movhi	r2,4097
10010a2c:	10866904 	addi	r2,r2,6564
10010a30:	18bff62e 	bgeu	r3,r2,10010a0c <__alt_data_end+0xf8010a0c>
        (*ctor) (); 
}
10010a34:	0001883a 	nop
10010a38:	e037883a 	mov	sp,fp
10010a3c:	dfc00117 	ldw	ra,4(sp)
10010a40:	df000017 	ldw	fp,0(sp)
10010a44:	dec00204 	addi	sp,sp,8
10010a48:	f800283a 	ret

10010a4c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10010a4c:	defffd04 	addi	sp,sp,-12
10010a50:	dfc00215 	stw	ra,8(sp)
10010a54:	df000115 	stw	fp,4(sp)
10010a58:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10010a5c:	00840074 	movhi	r2,4097
10010a60:	10866804 	addi	r2,r2,6560
10010a64:	e0bfff15 	stw	r2,-4(fp)
10010a68:	00000606 	br	10010a84 <_do_dtors+0x38>
        (*dtor) (); 
10010a6c:	e0bfff17 	ldw	r2,-4(fp)
10010a70:	10800017 	ldw	r2,0(r2)
10010a74:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10010a78:	e0bfff17 	ldw	r2,-4(fp)
10010a7c:	10bfff04 	addi	r2,r2,-4
10010a80:	e0bfff15 	stw	r2,-4(fp)
10010a84:	e0ffff17 	ldw	r3,-4(fp)
10010a88:	00840074 	movhi	r2,4097
10010a8c:	10866904 	addi	r2,r2,6564
10010a90:	18bff62e 	bgeu	r3,r2,10010a6c <__alt_data_end+0xf8010a6c>
        (*dtor) (); 
}
10010a94:	0001883a 	nop
10010a98:	e037883a 	mov	sp,fp
10010a9c:	dfc00117 	ldw	ra,4(sp)
10010aa0:	df000017 	ldw	fp,0(sp)
10010aa4:	dec00204 	addi	sp,sp,8
10010aa8:	f800283a 	ret

10010aac <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10010aac:	deffff04 	addi	sp,sp,-4
10010ab0:	df000015 	stw	fp,0(sp)
10010ab4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10010ab8:	0001883a 	nop
10010abc:	e037883a 	mov	sp,fp
10010ac0:	df000017 	ldw	fp,0(sp)
10010ac4:	dec00104 	addi	sp,sp,4
10010ac8:	f800283a 	ret

10010acc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10010acc:	defff904 	addi	sp,sp,-28
10010ad0:	dfc00615 	stw	ra,24(sp)
10010ad4:	df000515 	stw	fp,20(sp)
10010ad8:	df000504 	addi	fp,sp,20
10010adc:	e13ffc15 	stw	r4,-16(fp)
10010ae0:	e17ffd15 	stw	r5,-12(fp)
10010ae4:	e1bffe15 	stw	r6,-8(fp)
10010ae8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10010aec:	e0800217 	ldw	r2,8(fp)
10010af0:	d8800015 	stw	r2,0(sp)
10010af4:	e1ffff17 	ldw	r7,-4(fp)
10010af8:	e1bffe17 	ldw	r6,-8(fp)
10010afc:	e17ffd17 	ldw	r5,-12(fp)
10010b00:	e13ffc17 	ldw	r4,-16(fp)
10010b04:	0010c7c0 	call	10010c7c <alt_iic_isr_register>
}  
10010b08:	e037883a 	mov	sp,fp
10010b0c:	dfc00117 	ldw	ra,4(sp)
10010b10:	df000017 	ldw	fp,0(sp)
10010b14:	dec00204 	addi	sp,sp,8
10010b18:	f800283a 	ret

10010b1c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10010b1c:	defff904 	addi	sp,sp,-28
10010b20:	df000615 	stw	fp,24(sp)
10010b24:	df000604 	addi	fp,sp,24
10010b28:	e13ffe15 	stw	r4,-8(fp)
10010b2c:	e17fff15 	stw	r5,-4(fp)
10010b30:	e0bfff17 	ldw	r2,-4(fp)
10010b34:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010b38:	0005303a 	rdctl	r2,status
10010b3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010b40:	e0fffb17 	ldw	r3,-20(fp)
10010b44:	00bfff84 	movi	r2,-2
10010b48:	1884703a 	and	r2,r3,r2
10010b4c:	1001703a 	wrctl	status,r2
  
  return context;
10010b50:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10010b54:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10010b58:	00c00044 	movi	r3,1
10010b5c:	e0bffa17 	ldw	r2,-24(fp)
10010b60:	1884983a 	sll	r2,r3,r2
10010b64:	1007883a 	mov	r3,r2
10010b68:	d0a6d617 	ldw	r2,-25768(gp)
10010b6c:	1884b03a 	or	r2,r3,r2
10010b70:	d0a6d615 	stw	r2,-25768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010b74:	d0a6d617 	ldw	r2,-25768(gp)
10010b78:	100170fa 	wrctl	ienable,r2
10010b7c:	e0bffc17 	ldw	r2,-16(fp)
10010b80:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010b84:	e0bffd17 	ldw	r2,-12(fp)
10010b88:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10010b8c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10010b90:	0001883a 	nop
}
10010b94:	e037883a 	mov	sp,fp
10010b98:	df000017 	ldw	fp,0(sp)
10010b9c:	dec00104 	addi	sp,sp,4
10010ba0:	f800283a 	ret

10010ba4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10010ba4:	defff904 	addi	sp,sp,-28
10010ba8:	df000615 	stw	fp,24(sp)
10010bac:	df000604 	addi	fp,sp,24
10010bb0:	e13ffe15 	stw	r4,-8(fp)
10010bb4:	e17fff15 	stw	r5,-4(fp)
10010bb8:	e0bfff17 	ldw	r2,-4(fp)
10010bbc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010bc0:	0005303a 	rdctl	r2,status
10010bc4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010bc8:	e0fffb17 	ldw	r3,-20(fp)
10010bcc:	00bfff84 	movi	r2,-2
10010bd0:	1884703a 	and	r2,r3,r2
10010bd4:	1001703a 	wrctl	status,r2
  
  return context;
10010bd8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10010bdc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10010be0:	00c00044 	movi	r3,1
10010be4:	e0bffa17 	ldw	r2,-24(fp)
10010be8:	1884983a 	sll	r2,r3,r2
10010bec:	0084303a 	nor	r2,zero,r2
10010bf0:	1007883a 	mov	r3,r2
10010bf4:	d0a6d617 	ldw	r2,-25768(gp)
10010bf8:	1884703a 	and	r2,r3,r2
10010bfc:	d0a6d615 	stw	r2,-25768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010c00:	d0a6d617 	ldw	r2,-25768(gp)
10010c04:	100170fa 	wrctl	ienable,r2
10010c08:	e0bffc17 	ldw	r2,-16(fp)
10010c0c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010c10:	e0bffd17 	ldw	r2,-12(fp)
10010c14:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10010c18:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10010c1c:	0001883a 	nop
}
10010c20:	e037883a 	mov	sp,fp
10010c24:	df000017 	ldw	fp,0(sp)
10010c28:	dec00104 	addi	sp,sp,4
10010c2c:	f800283a 	ret

10010c30 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10010c30:	defffc04 	addi	sp,sp,-16
10010c34:	df000315 	stw	fp,12(sp)
10010c38:	df000304 	addi	fp,sp,12
10010c3c:	e13ffe15 	stw	r4,-8(fp)
10010c40:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10010c44:	000530fa 	rdctl	r2,ienable
10010c48:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10010c4c:	00c00044 	movi	r3,1
10010c50:	e0bfff17 	ldw	r2,-4(fp)
10010c54:	1884983a 	sll	r2,r3,r2
10010c58:	1007883a 	mov	r3,r2
10010c5c:	e0bffd17 	ldw	r2,-12(fp)
10010c60:	1884703a 	and	r2,r3,r2
10010c64:	1004c03a 	cmpne	r2,r2,zero
10010c68:	10803fcc 	andi	r2,r2,255
}
10010c6c:	e037883a 	mov	sp,fp
10010c70:	df000017 	ldw	fp,0(sp)
10010c74:	dec00104 	addi	sp,sp,4
10010c78:	f800283a 	ret

10010c7c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10010c7c:	defff504 	addi	sp,sp,-44
10010c80:	dfc00a15 	stw	ra,40(sp)
10010c84:	df000915 	stw	fp,36(sp)
10010c88:	df000904 	addi	fp,sp,36
10010c8c:	e13ffc15 	stw	r4,-16(fp)
10010c90:	e17ffd15 	stw	r5,-12(fp)
10010c94:	e1bffe15 	stw	r6,-8(fp)
10010c98:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10010c9c:	00bffa84 	movi	r2,-22
10010ca0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10010ca4:	e0bffd17 	ldw	r2,-12(fp)
10010ca8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10010cac:	e0bff817 	ldw	r2,-32(fp)
10010cb0:	10800808 	cmpgei	r2,r2,32
10010cb4:	1000271e 	bne	r2,zero,10010d54 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010cb8:	0005303a 	rdctl	r2,status
10010cbc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010cc0:	e0fffb17 	ldw	r3,-20(fp)
10010cc4:	00bfff84 	movi	r2,-2
10010cc8:	1884703a 	and	r2,r3,r2
10010ccc:	1001703a 	wrctl	status,r2
  
  return context;
10010cd0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10010cd4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10010cd8:	00840074 	movhi	r2,4097
10010cdc:	10969604 	addi	r2,r2,23128
10010ce0:	e0fff817 	ldw	r3,-32(fp)
10010ce4:	180690fa 	slli	r3,r3,3
10010ce8:	10c5883a 	add	r2,r2,r3
10010cec:	e0fffe17 	ldw	r3,-8(fp)
10010cf0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10010cf4:	00840074 	movhi	r2,4097
10010cf8:	10969604 	addi	r2,r2,23128
10010cfc:	e0fff817 	ldw	r3,-32(fp)
10010d00:	180690fa 	slli	r3,r3,3
10010d04:	10c5883a 	add	r2,r2,r3
10010d08:	10800104 	addi	r2,r2,4
10010d0c:	e0ffff17 	ldw	r3,-4(fp)
10010d10:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10010d14:	e0bffe17 	ldw	r2,-8(fp)
10010d18:	10000526 	beq	r2,zero,10010d30 <alt_iic_isr_register+0xb4>
10010d1c:	e0bff817 	ldw	r2,-32(fp)
10010d20:	100b883a 	mov	r5,r2
10010d24:	e13ffc17 	ldw	r4,-16(fp)
10010d28:	0010b1c0 	call	10010b1c <alt_ic_irq_enable>
10010d2c:	00000406 	br	10010d40 <alt_iic_isr_register+0xc4>
10010d30:	e0bff817 	ldw	r2,-32(fp)
10010d34:	100b883a 	mov	r5,r2
10010d38:	e13ffc17 	ldw	r4,-16(fp)
10010d3c:	0010ba40 	call	10010ba4 <alt_ic_irq_disable>
10010d40:	e0bff715 	stw	r2,-36(fp)
10010d44:	e0bffa17 	ldw	r2,-24(fp)
10010d48:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010d4c:	e0bff917 	ldw	r2,-28(fp)
10010d50:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10010d54:	e0bff717 	ldw	r2,-36(fp)
}
10010d58:	e037883a 	mov	sp,fp
10010d5c:	dfc00117 	ldw	ra,4(sp)
10010d60:	df000017 	ldw	fp,0(sp)
10010d64:	dec00204 	addi	sp,sp,8
10010d68:	f800283a 	ret

10010d6c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10010d6c:	defff804 	addi	sp,sp,-32
10010d70:	dfc00715 	stw	ra,28(sp)
10010d74:	df000615 	stw	fp,24(sp)
10010d78:	dc000515 	stw	r16,20(sp)
10010d7c:	df000604 	addi	fp,sp,24
10010d80:	e13ffb15 	stw	r4,-20(fp)
10010d84:	e17ffc15 	stw	r5,-16(fp)
10010d88:	e1bffd15 	stw	r6,-12(fp)
10010d8c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10010d90:	e1bffe17 	ldw	r6,-8(fp)
10010d94:	e17ffd17 	ldw	r5,-12(fp)
10010d98:	e13ffc17 	ldw	r4,-16(fp)
10010d9c:	0010ff40 	call	10010ff4 <open>
10010da0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10010da4:	e0bffa17 	ldw	r2,-24(fp)
10010da8:	10002216 	blt	r2,zero,10010e34 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10010dac:	04040074 	movhi	r16,4097
10010db0:	840b3a04 	addi	r16,r16,11496
10010db4:	e0bffa17 	ldw	r2,-24(fp)
10010db8:	01400304 	movi	r5,12
10010dbc:	1009883a 	mov	r4,r2
10010dc0:	000c8b80 	call	1000c8b8 <__mulsi3>
10010dc4:	8085883a 	add	r2,r16,r2
10010dc8:	10c00017 	ldw	r3,0(r2)
10010dcc:	e0bffb17 	ldw	r2,-20(fp)
10010dd0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10010dd4:	04040074 	movhi	r16,4097
10010dd8:	840b3a04 	addi	r16,r16,11496
10010ddc:	e0bffa17 	ldw	r2,-24(fp)
10010de0:	01400304 	movi	r5,12
10010de4:	1009883a 	mov	r4,r2
10010de8:	000c8b80 	call	1000c8b8 <__mulsi3>
10010dec:	8085883a 	add	r2,r16,r2
10010df0:	10800104 	addi	r2,r2,4
10010df4:	10c00017 	ldw	r3,0(r2)
10010df8:	e0bffb17 	ldw	r2,-20(fp)
10010dfc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10010e00:	04040074 	movhi	r16,4097
10010e04:	840b3a04 	addi	r16,r16,11496
10010e08:	e0bffa17 	ldw	r2,-24(fp)
10010e0c:	01400304 	movi	r5,12
10010e10:	1009883a 	mov	r4,r2
10010e14:	000c8b80 	call	1000c8b8 <__mulsi3>
10010e18:	8085883a 	add	r2,r16,r2
10010e1c:	10800204 	addi	r2,r2,8
10010e20:	10c00017 	ldw	r3,0(r2)
10010e24:	e0bffb17 	ldw	r2,-20(fp)
10010e28:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10010e2c:	e13ffa17 	ldw	r4,-24(fp)
10010e30:	000f8a80 	call	1000f8a8 <alt_release_fd>
  }
} 
10010e34:	0001883a 	nop
10010e38:	e6ffff04 	addi	sp,fp,-4
10010e3c:	dfc00217 	ldw	ra,8(sp)
10010e40:	df000117 	ldw	fp,4(sp)
10010e44:	dc000017 	ldw	r16,0(sp)
10010e48:	dec00304 	addi	sp,sp,12
10010e4c:	f800283a 	ret

10010e50 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10010e50:	defffb04 	addi	sp,sp,-20
10010e54:	dfc00415 	stw	ra,16(sp)
10010e58:	df000315 	stw	fp,12(sp)
10010e5c:	df000304 	addi	fp,sp,12
10010e60:	e13ffd15 	stw	r4,-12(fp)
10010e64:	e17ffe15 	stw	r5,-8(fp)
10010e68:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10010e6c:	01c07fc4 	movi	r7,511
10010e70:	01800044 	movi	r6,1
10010e74:	e17ffd17 	ldw	r5,-12(fp)
10010e78:	01040074 	movhi	r4,4097
10010e7c:	210b3d04 	addi	r4,r4,11508
10010e80:	0010d6c0 	call	10010d6c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10010e84:	01c07fc4 	movi	r7,511
10010e88:	000d883a 	mov	r6,zero
10010e8c:	e17ffe17 	ldw	r5,-8(fp)
10010e90:	01040074 	movhi	r4,4097
10010e94:	210b3a04 	addi	r4,r4,11496
10010e98:	0010d6c0 	call	10010d6c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10010e9c:	01c07fc4 	movi	r7,511
10010ea0:	01800044 	movi	r6,1
10010ea4:	e17fff17 	ldw	r5,-4(fp)
10010ea8:	01040074 	movhi	r4,4097
10010eac:	210b4004 	addi	r4,r4,11520
10010eb0:	0010d6c0 	call	10010d6c <alt_open_fd>
}  
10010eb4:	0001883a 	nop
10010eb8:	e037883a 	mov	sp,fp
10010ebc:	dfc00117 	ldw	ra,4(sp)
10010ec0:	df000017 	ldw	fp,0(sp)
10010ec4:	dec00204 	addi	sp,sp,8
10010ec8:	f800283a 	ret

10010ecc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010ecc:	defffe04 	addi	sp,sp,-8
10010ed0:	dfc00115 	stw	ra,4(sp)
10010ed4:	df000015 	stw	fp,0(sp)
10010ed8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010edc:	d0a00b17 	ldw	r2,-32724(gp)
10010ee0:	10000326 	beq	r2,zero,10010ef0 <alt_get_errno+0x24>
10010ee4:	d0a00b17 	ldw	r2,-32724(gp)
10010ee8:	103ee83a 	callr	r2
10010eec:	00000106 	br	10010ef4 <alt_get_errno+0x28>
10010ef0:	d0a6d204 	addi	r2,gp,-25784
}
10010ef4:	e037883a 	mov	sp,fp
10010ef8:	dfc00117 	ldw	ra,4(sp)
10010efc:	df000017 	ldw	fp,0(sp)
10010f00:	dec00204 	addi	sp,sp,8
10010f04:	f800283a 	ret

10010f08 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10010f08:	defffb04 	addi	sp,sp,-20
10010f0c:	dfc00415 	stw	ra,16(sp)
10010f10:	df000315 	stw	fp,12(sp)
10010f14:	dc000215 	stw	r16,8(sp)
10010f18:	df000304 	addi	fp,sp,12
10010f1c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10010f20:	e0bffe17 	ldw	r2,-8(fp)
10010f24:	10800217 	ldw	r2,8(r2)
10010f28:	10d00034 	orhi	r3,r2,16384
10010f2c:	e0bffe17 	ldw	r2,-8(fp)
10010f30:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10010f34:	e03ffd15 	stw	zero,-12(fp)
10010f38:	00002306 	br	10010fc8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10010f3c:	04040074 	movhi	r16,4097
10010f40:	840b3a04 	addi	r16,r16,11496
10010f44:	e0bffd17 	ldw	r2,-12(fp)
10010f48:	01400304 	movi	r5,12
10010f4c:	1009883a 	mov	r4,r2
10010f50:	000c8b80 	call	1000c8b8 <__mulsi3>
10010f54:	8085883a 	add	r2,r16,r2
10010f58:	10c00017 	ldw	r3,0(r2)
10010f5c:	e0bffe17 	ldw	r2,-8(fp)
10010f60:	10800017 	ldw	r2,0(r2)
10010f64:	1880151e 	bne	r3,r2,10010fbc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10010f68:	04040074 	movhi	r16,4097
10010f6c:	840b3a04 	addi	r16,r16,11496
10010f70:	e0bffd17 	ldw	r2,-12(fp)
10010f74:	01400304 	movi	r5,12
10010f78:	1009883a 	mov	r4,r2
10010f7c:	000c8b80 	call	1000c8b8 <__mulsi3>
10010f80:	8085883a 	add	r2,r16,r2
10010f84:	10800204 	addi	r2,r2,8
10010f88:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10010f8c:	10000b0e 	bge	r2,zero,10010fbc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10010f90:	01400304 	movi	r5,12
10010f94:	e13ffd17 	ldw	r4,-12(fp)
10010f98:	000c8b80 	call	1000c8b8 <__mulsi3>
10010f9c:	1007883a 	mov	r3,r2
10010fa0:	00840074 	movhi	r2,4097
10010fa4:	108b3a04 	addi	r2,r2,11496
10010fa8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10010fac:	e0bffe17 	ldw	r2,-8(fp)
10010fb0:	18800226 	beq	r3,r2,10010fbc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10010fb4:	00bffcc4 	movi	r2,-13
10010fb8:	00000806 	br	10010fdc <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10010fbc:	e0bffd17 	ldw	r2,-12(fp)
10010fc0:	10800044 	addi	r2,r2,1
10010fc4:	e0bffd15 	stw	r2,-12(fp)
10010fc8:	d0a00a17 	ldw	r2,-32728(gp)
10010fcc:	1007883a 	mov	r3,r2
10010fd0:	e0bffd17 	ldw	r2,-12(fp)
10010fd4:	18bfd92e 	bgeu	r3,r2,10010f3c <__alt_data_end+0xf8010f3c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10010fd8:	0005883a 	mov	r2,zero
}
10010fdc:	e6ffff04 	addi	sp,fp,-4
10010fe0:	dfc00217 	ldw	ra,8(sp)
10010fe4:	df000117 	ldw	fp,4(sp)
10010fe8:	dc000017 	ldw	r16,0(sp)
10010fec:	dec00304 	addi	sp,sp,12
10010ff0:	f800283a 	ret

10010ff4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10010ff4:	defff604 	addi	sp,sp,-40
10010ff8:	dfc00915 	stw	ra,36(sp)
10010ffc:	df000815 	stw	fp,32(sp)
10011000:	df000804 	addi	fp,sp,32
10011004:	e13ffd15 	stw	r4,-12(fp)
10011008:	e17ffe15 	stw	r5,-8(fp)
1001100c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10011010:	00bfffc4 	movi	r2,-1
10011014:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10011018:	00bffb44 	movi	r2,-19
1001101c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10011020:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10011024:	d1600804 	addi	r5,gp,-32736
10011028:	e13ffd17 	ldw	r4,-12(fp)
1001102c:	00113180 	call	10011318 <alt_find_dev>
10011030:	e0bff815 	stw	r2,-32(fp)
10011034:	e0bff817 	ldw	r2,-32(fp)
10011038:	1000051e 	bne	r2,zero,10011050 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1001103c:	e13ffd17 	ldw	r4,-12(fp)
10011040:	00113a80 	call	100113a8 <alt_find_file>
10011044:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10011048:	00800044 	movi	r2,1
1001104c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10011050:	e0bff817 	ldw	r2,-32(fp)
10011054:	10002b26 	beq	r2,zero,10011104 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
10011058:	e13ff817 	ldw	r4,-32(fp)
1001105c:	00114b00 	call	100114b0 <alt_get_fd>
10011060:	e0bff915 	stw	r2,-28(fp)
10011064:	e0bff917 	ldw	r2,-28(fp)
10011068:	1000030e 	bge	r2,zero,10011078 <open+0x84>
    {
      status = index;
1001106c:	e0bff917 	ldw	r2,-28(fp)
10011070:	e0bffa15 	stw	r2,-24(fp)
10011074:	00002506 	br	1001110c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
10011078:	01400304 	movi	r5,12
1001107c:	e13ff917 	ldw	r4,-28(fp)
10011080:	000c8b80 	call	1000c8b8 <__mulsi3>
10011084:	1007883a 	mov	r3,r2
10011088:	00840074 	movhi	r2,4097
1001108c:	108b3a04 	addi	r2,r2,11496
10011090:	1885883a 	add	r2,r3,r2
10011094:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10011098:	e0fffe17 	ldw	r3,-8(fp)
1001109c:	00900034 	movhi	r2,16384
100110a0:	10bfffc4 	addi	r2,r2,-1
100110a4:	1886703a 	and	r3,r3,r2
100110a8:	e0bffc17 	ldw	r2,-16(fp)
100110ac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
100110b0:	e0bffb17 	ldw	r2,-20(fp)
100110b4:	1000051e 	bne	r2,zero,100110cc <open+0xd8>
100110b8:	e13ffc17 	ldw	r4,-16(fp)
100110bc:	0010f080 	call	10010f08 <alt_file_locked>
100110c0:	e0bffa15 	stw	r2,-24(fp)
100110c4:	e0bffa17 	ldw	r2,-24(fp)
100110c8:	10001016 	blt	r2,zero,1001110c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
100110cc:	e0bff817 	ldw	r2,-32(fp)
100110d0:	10800317 	ldw	r2,12(r2)
100110d4:	10000826 	beq	r2,zero,100110f8 <open+0x104>
100110d8:	e0bff817 	ldw	r2,-32(fp)
100110dc:	10800317 	ldw	r2,12(r2)
100110e0:	e1ffff17 	ldw	r7,-4(fp)
100110e4:	e1bffe17 	ldw	r6,-8(fp)
100110e8:	e17ffd17 	ldw	r5,-12(fp)
100110ec:	e13ffc17 	ldw	r4,-16(fp)
100110f0:	103ee83a 	callr	r2
100110f4:	00000106 	br	100110fc <open+0x108>
100110f8:	0005883a 	mov	r2,zero
100110fc:	e0bffa15 	stw	r2,-24(fp)
10011100:	00000206 	br	1001110c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
10011104:	00bffb44 	movi	r2,-19
10011108:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1001110c:	e0bffa17 	ldw	r2,-24(fp)
10011110:	1000090e 	bge	r2,zero,10011138 <open+0x144>
  {
    alt_release_fd (index);  
10011114:	e13ff917 	ldw	r4,-28(fp)
10011118:	000f8a80 	call	1000f8a8 <alt_release_fd>
    ALT_ERRNO = -status;
1001111c:	0010ecc0 	call	10010ecc <alt_get_errno>
10011120:	1007883a 	mov	r3,r2
10011124:	e0bffa17 	ldw	r2,-24(fp)
10011128:	0085c83a 	sub	r2,zero,r2
1001112c:	18800015 	stw	r2,0(r3)
    return -1;
10011130:	00bfffc4 	movi	r2,-1
10011134:	00000106 	br	1001113c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
10011138:	e0bff917 	ldw	r2,-28(fp)
}
1001113c:	e037883a 	mov	sp,fp
10011140:	dfc00117 	ldw	ra,4(sp)
10011144:	df000017 	ldw	fp,0(sp)
10011148:	dec00204 	addi	sp,sp,8
1001114c:	f800283a 	ret

10011150 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10011150:	defffa04 	addi	sp,sp,-24
10011154:	df000515 	stw	fp,20(sp)
10011158:	df000504 	addi	fp,sp,20
1001115c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011160:	0005303a 	rdctl	r2,status
10011164:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011168:	e0fffc17 	ldw	r3,-16(fp)
1001116c:	00bfff84 	movi	r2,-2
10011170:	1884703a 	and	r2,r3,r2
10011174:	1001703a 	wrctl	status,r2
  
  return context;
10011178:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1001117c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10011180:	e0bfff17 	ldw	r2,-4(fp)
10011184:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10011188:	e0bffd17 	ldw	r2,-12(fp)
1001118c:	10800017 	ldw	r2,0(r2)
10011190:	e0fffd17 	ldw	r3,-12(fp)
10011194:	18c00117 	ldw	r3,4(r3)
10011198:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1001119c:	e0bffd17 	ldw	r2,-12(fp)
100111a0:	10800117 	ldw	r2,4(r2)
100111a4:	e0fffd17 	ldw	r3,-12(fp)
100111a8:	18c00017 	ldw	r3,0(r3)
100111ac:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
100111b0:	e0bffd17 	ldw	r2,-12(fp)
100111b4:	e0fffd17 	ldw	r3,-12(fp)
100111b8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
100111bc:	e0bffd17 	ldw	r2,-12(fp)
100111c0:	e0fffd17 	ldw	r3,-12(fp)
100111c4:	10c00015 	stw	r3,0(r2)
100111c8:	e0bffb17 	ldw	r2,-20(fp)
100111cc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100111d0:	e0bffe17 	ldw	r2,-8(fp)
100111d4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
100111d8:	0001883a 	nop
100111dc:	e037883a 	mov	sp,fp
100111e0:	df000017 	ldw	fp,0(sp)
100111e4:	dec00104 	addi	sp,sp,4
100111e8:	f800283a 	ret

100111ec <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
100111ec:	defffb04 	addi	sp,sp,-20
100111f0:	dfc00415 	stw	ra,16(sp)
100111f4:	df000315 	stw	fp,12(sp)
100111f8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
100111fc:	d0a00e17 	ldw	r2,-32712(gp)
10011200:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10011204:	d0a6d817 	ldw	r2,-25760(gp)
10011208:	10800044 	addi	r2,r2,1
1001120c:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10011210:	00002e06 	br	100112cc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10011214:	e0bffd17 	ldw	r2,-12(fp)
10011218:	10800017 	ldw	r2,0(r2)
1001121c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10011220:	e0bffd17 	ldw	r2,-12(fp)
10011224:	10800403 	ldbu	r2,16(r2)
10011228:	10803fcc 	andi	r2,r2,255
1001122c:	10000426 	beq	r2,zero,10011240 <alt_tick+0x54>
10011230:	d0a6d817 	ldw	r2,-25760(gp)
10011234:	1000021e 	bne	r2,zero,10011240 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10011238:	e0bffd17 	ldw	r2,-12(fp)
1001123c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10011240:	e0bffd17 	ldw	r2,-12(fp)
10011244:	10800217 	ldw	r2,8(r2)
10011248:	d0e6d817 	ldw	r3,-25760(gp)
1001124c:	18801d36 	bltu	r3,r2,100112c4 <alt_tick+0xd8>
10011250:	e0bffd17 	ldw	r2,-12(fp)
10011254:	10800403 	ldbu	r2,16(r2)
10011258:	10803fcc 	andi	r2,r2,255
1001125c:	1000191e 	bne	r2,zero,100112c4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10011260:	e0bffd17 	ldw	r2,-12(fp)
10011264:	10800317 	ldw	r2,12(r2)
10011268:	e0fffd17 	ldw	r3,-12(fp)
1001126c:	18c00517 	ldw	r3,20(r3)
10011270:	1809883a 	mov	r4,r3
10011274:	103ee83a 	callr	r2
10011278:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1001127c:	e0bfff17 	ldw	r2,-4(fp)
10011280:	1000031e 	bne	r2,zero,10011290 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10011284:	e13ffd17 	ldw	r4,-12(fp)
10011288:	00111500 	call	10011150 <alt_alarm_stop>
1001128c:	00000d06 	br	100112c4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10011290:	e0bffd17 	ldw	r2,-12(fp)
10011294:	10c00217 	ldw	r3,8(r2)
10011298:	e0bfff17 	ldw	r2,-4(fp)
1001129c:	1887883a 	add	r3,r3,r2
100112a0:	e0bffd17 	ldw	r2,-12(fp)
100112a4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
100112a8:	e0bffd17 	ldw	r2,-12(fp)
100112ac:	10c00217 	ldw	r3,8(r2)
100112b0:	d0a6d817 	ldw	r2,-25760(gp)
100112b4:	1880032e 	bgeu	r3,r2,100112c4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
100112b8:	e0bffd17 	ldw	r2,-12(fp)
100112bc:	00c00044 	movi	r3,1
100112c0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
100112c4:	e0bffe17 	ldw	r2,-8(fp)
100112c8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100112cc:	e0fffd17 	ldw	r3,-12(fp)
100112d0:	d0a00e04 	addi	r2,gp,-32712
100112d4:	18bfcf1e 	bne	r3,r2,10011214 <__alt_data_end+0xf8011214>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
100112d8:	0001883a 	nop
}
100112dc:	0001883a 	nop
100112e0:	e037883a 	mov	sp,fp
100112e4:	dfc00117 	ldw	ra,4(sp)
100112e8:	df000017 	ldw	fp,0(sp)
100112ec:	dec00204 	addi	sp,sp,8
100112f0:	f800283a 	ret

100112f4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
100112f4:	deffff04 	addi	sp,sp,-4
100112f8:	df000015 	stw	fp,0(sp)
100112fc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10011300:	000170fa 	wrctl	ienable,zero
}
10011304:	0001883a 	nop
10011308:	e037883a 	mov	sp,fp
1001130c:	df000017 	ldw	fp,0(sp)
10011310:	dec00104 	addi	sp,sp,4
10011314:	f800283a 	ret

10011318 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10011318:	defffa04 	addi	sp,sp,-24
1001131c:	dfc00515 	stw	ra,20(sp)
10011320:	df000415 	stw	fp,16(sp)
10011324:	df000404 	addi	fp,sp,16
10011328:	e13ffe15 	stw	r4,-8(fp)
1001132c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10011330:	e0bfff17 	ldw	r2,-4(fp)
10011334:	10800017 	ldw	r2,0(r2)
10011338:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1001133c:	e13ffe17 	ldw	r4,-8(fp)
10011340:	00023840 	call	10002384 <strlen>
10011344:	10800044 	addi	r2,r2,1
10011348:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1001134c:	00000d06 	br	10011384 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10011350:	e0bffc17 	ldw	r2,-16(fp)
10011354:	10800217 	ldw	r2,8(r2)
10011358:	e0fffd17 	ldw	r3,-12(fp)
1001135c:	180d883a 	mov	r6,r3
10011360:	e17ffe17 	ldw	r5,-8(fp)
10011364:	1009883a 	mov	r4,r2
10011368:	001165c0 	call	1001165c <memcmp>
1001136c:	1000021e 	bne	r2,zero,10011378 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10011370:	e0bffc17 	ldw	r2,-16(fp)
10011374:	00000706 	br	10011394 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10011378:	e0bffc17 	ldw	r2,-16(fp)
1001137c:	10800017 	ldw	r2,0(r2)
10011380:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10011384:	e0fffc17 	ldw	r3,-16(fp)
10011388:	e0bfff17 	ldw	r2,-4(fp)
1001138c:	18bff01e 	bne	r3,r2,10011350 <__alt_data_end+0xf8011350>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10011390:	0005883a 	mov	r2,zero
}
10011394:	e037883a 	mov	sp,fp
10011398:	dfc00117 	ldw	ra,4(sp)
1001139c:	df000017 	ldw	fp,0(sp)
100113a0:	dec00204 	addi	sp,sp,8
100113a4:	f800283a 	ret

100113a8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
100113a8:	defffb04 	addi	sp,sp,-20
100113ac:	dfc00415 	stw	ra,16(sp)
100113b0:	df000315 	stw	fp,12(sp)
100113b4:	df000304 	addi	fp,sp,12
100113b8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
100113bc:	d0a00617 	ldw	r2,-32744(gp)
100113c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100113c4:	00003106 	br	1001148c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
100113c8:	e0bffd17 	ldw	r2,-12(fp)
100113cc:	10800217 	ldw	r2,8(r2)
100113d0:	1009883a 	mov	r4,r2
100113d4:	00023840 	call	10002384 <strlen>
100113d8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
100113dc:	e0bffd17 	ldw	r2,-12(fp)
100113e0:	10c00217 	ldw	r3,8(r2)
100113e4:	e0bffe17 	ldw	r2,-8(fp)
100113e8:	10bfffc4 	addi	r2,r2,-1
100113ec:	1885883a 	add	r2,r3,r2
100113f0:	10800003 	ldbu	r2,0(r2)
100113f4:	10803fcc 	andi	r2,r2,255
100113f8:	1080201c 	xori	r2,r2,128
100113fc:	10bfe004 	addi	r2,r2,-128
10011400:	10800bd8 	cmpnei	r2,r2,47
10011404:	1000031e 	bne	r2,zero,10011414 <alt_find_file+0x6c>
    {
      len -= 1;
10011408:	e0bffe17 	ldw	r2,-8(fp)
1001140c:	10bfffc4 	addi	r2,r2,-1
10011410:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10011414:	e0bffe17 	ldw	r2,-8(fp)
10011418:	e0ffff17 	ldw	r3,-4(fp)
1001141c:	1885883a 	add	r2,r3,r2
10011420:	10800003 	ldbu	r2,0(r2)
10011424:	10803fcc 	andi	r2,r2,255
10011428:	1080201c 	xori	r2,r2,128
1001142c:	10bfe004 	addi	r2,r2,-128
10011430:	10800be0 	cmpeqi	r2,r2,47
10011434:	1000081e 	bne	r2,zero,10011458 <alt_find_file+0xb0>
10011438:	e0bffe17 	ldw	r2,-8(fp)
1001143c:	e0ffff17 	ldw	r3,-4(fp)
10011440:	1885883a 	add	r2,r3,r2
10011444:	10800003 	ldbu	r2,0(r2)
10011448:	10803fcc 	andi	r2,r2,255
1001144c:	1080201c 	xori	r2,r2,128
10011450:	10bfe004 	addi	r2,r2,-128
10011454:	10000a1e 	bne	r2,zero,10011480 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10011458:	e0bffd17 	ldw	r2,-12(fp)
1001145c:	10800217 	ldw	r2,8(r2)
10011460:	e0fffe17 	ldw	r3,-8(fp)
10011464:	180d883a 	mov	r6,r3
10011468:	e17fff17 	ldw	r5,-4(fp)
1001146c:	1009883a 	mov	r4,r2
10011470:	001165c0 	call	1001165c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10011474:	1000021e 	bne	r2,zero,10011480 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10011478:	e0bffd17 	ldw	r2,-12(fp)
1001147c:	00000706 	br	1001149c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10011480:	e0bffd17 	ldw	r2,-12(fp)
10011484:	10800017 	ldw	r2,0(r2)
10011488:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1001148c:	e0fffd17 	ldw	r3,-12(fp)
10011490:	d0a00604 	addi	r2,gp,-32744
10011494:	18bfcc1e 	bne	r3,r2,100113c8 <__alt_data_end+0xf80113c8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10011498:	0005883a 	mov	r2,zero
}
1001149c:	e037883a 	mov	sp,fp
100114a0:	dfc00117 	ldw	ra,4(sp)
100114a4:	df000017 	ldw	fp,0(sp)
100114a8:	dec00204 	addi	sp,sp,8
100114ac:	f800283a 	ret

100114b0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
100114b0:	defffa04 	addi	sp,sp,-24
100114b4:	dfc00515 	stw	ra,20(sp)
100114b8:	df000415 	stw	fp,16(sp)
100114bc:	dc000315 	stw	r16,12(sp)
100114c0:	df000404 	addi	fp,sp,16
100114c4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
100114c8:	00bffa04 	movi	r2,-24
100114cc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100114d0:	e03ffc15 	stw	zero,-16(fp)
100114d4:	00001d06 	br	1001154c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
100114d8:	04040074 	movhi	r16,4097
100114dc:	840b3a04 	addi	r16,r16,11496
100114e0:	e0bffc17 	ldw	r2,-16(fp)
100114e4:	01400304 	movi	r5,12
100114e8:	1009883a 	mov	r4,r2
100114ec:	000c8b80 	call	1000c8b8 <__mulsi3>
100114f0:	8085883a 	add	r2,r16,r2
100114f4:	10800017 	ldw	r2,0(r2)
100114f8:	1000111e 	bne	r2,zero,10011540 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
100114fc:	04040074 	movhi	r16,4097
10011500:	840b3a04 	addi	r16,r16,11496
10011504:	e0bffc17 	ldw	r2,-16(fp)
10011508:	01400304 	movi	r5,12
1001150c:	1009883a 	mov	r4,r2
10011510:	000c8b80 	call	1000c8b8 <__mulsi3>
10011514:	8085883a 	add	r2,r16,r2
10011518:	e0fffe17 	ldw	r3,-8(fp)
1001151c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10011520:	d0e00a17 	ldw	r3,-32728(gp)
10011524:	e0bffc17 	ldw	r2,-16(fp)
10011528:	1880020e 	bge	r3,r2,10011534 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
1001152c:	e0bffc17 	ldw	r2,-16(fp)
10011530:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
10011534:	e0bffc17 	ldw	r2,-16(fp)
10011538:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
1001153c:	00000606 	br	10011558 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10011540:	e0bffc17 	ldw	r2,-16(fp)
10011544:	10800044 	addi	r2,r2,1
10011548:	e0bffc15 	stw	r2,-16(fp)
1001154c:	e0bffc17 	ldw	r2,-16(fp)
10011550:	10800810 	cmplti	r2,r2,32
10011554:	103fe01e 	bne	r2,zero,100114d8 <__alt_data_end+0xf80114d8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10011558:	e0bffd17 	ldw	r2,-12(fp)
}
1001155c:	e6ffff04 	addi	sp,fp,-4
10011560:	dfc00217 	ldw	ra,8(sp)
10011564:	df000117 	ldw	fp,4(sp)
10011568:	dc000017 	ldw	r16,0(sp)
1001156c:	dec00304 	addi	sp,sp,12
10011570:	f800283a 	ret

10011574 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10011574:	defffe04 	addi	sp,sp,-8
10011578:	df000115 	stw	fp,4(sp)
1001157c:	df000104 	addi	fp,sp,4
10011580:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10011584:	e0bfff17 	ldw	r2,-4(fp)
10011588:	10bffe84 	addi	r2,r2,-6
1001158c:	10c00428 	cmpgeui	r3,r2,16
10011590:	18001a1e 	bne	r3,zero,100115fc <alt_exception_cause_generated_bad_addr+0x88>
10011594:	100690ba 	slli	r3,r2,2
10011598:	00840074 	movhi	r2,4097
1001159c:	10856b04 	addi	r2,r2,5548
100115a0:	1885883a 	add	r2,r3,r2
100115a4:	10800017 	ldw	r2,0(r2)
100115a8:	1000683a 	jmp	r2
100115ac:	100115ec 	andhi	zero,r2,1111
100115b0:	100115ec 	andhi	zero,r2,1111
100115b4:	100115fc 	xorhi	zero,r2,1111
100115b8:	100115fc 	xorhi	zero,r2,1111
100115bc:	100115fc 	xorhi	zero,r2,1111
100115c0:	100115ec 	andhi	zero,r2,1111
100115c4:	100115f4 	orhi	zero,r2,1111
100115c8:	100115fc 	xorhi	zero,r2,1111
100115cc:	100115ec 	andhi	zero,r2,1111
100115d0:	100115ec 	andhi	zero,r2,1111
100115d4:	100115fc 	xorhi	zero,r2,1111
100115d8:	100115ec 	andhi	zero,r2,1111
100115dc:	100115f4 	orhi	zero,r2,1111
100115e0:	100115fc 	xorhi	zero,r2,1111
100115e4:	100115fc 	xorhi	zero,r2,1111
100115e8:	100115ec 	andhi	zero,r2,1111
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
100115ec:	00800044 	movi	r2,1
100115f0:	00000306 	br	10011600 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
100115f4:	0005883a 	mov	r2,zero
100115f8:	00000106 	br	10011600 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
100115fc:	0005883a 	mov	r2,zero
  }
}
10011600:	e037883a 	mov	sp,fp
10011604:	df000017 	ldw	fp,0(sp)
10011608:	dec00104 	addi	sp,sp,4
1001160c:	f800283a 	ret

10011610 <atexit>:
10011610:	200b883a 	mov	r5,r4
10011614:	000f883a 	mov	r7,zero
10011618:	000d883a 	mov	r6,zero
1001161c:	0009883a 	mov	r4,zero
10011620:	00116d81 	jmpi	100116d8 <__register_exitproc>

10011624 <exit>:
10011624:	defffe04 	addi	sp,sp,-8
10011628:	000b883a 	mov	r5,zero
1001162c:	dc000015 	stw	r16,0(sp)
10011630:	dfc00115 	stw	ra,4(sp)
10011634:	2021883a 	mov	r16,r4
10011638:	00117f00 	call	100117f0 <__call_exitprocs>
1001163c:	00840074 	movhi	r2,4097
10011640:	108fb204 	addi	r2,r2,16072
10011644:	11000017 	ldw	r4,0(r2)
10011648:	20800f17 	ldw	r2,60(r4)
1001164c:	10000126 	beq	r2,zero,10011654 <exit+0x30>
10011650:	103ee83a 	callr	r2
10011654:	8009883a 	mov	r4,r16
10011658:	00119700 	call	10011970 <_exit>

1001165c <memcmp>:
1001165c:	01c000c4 	movi	r7,3
10011660:	3980192e 	bgeu	r7,r6,100116c8 <memcmp+0x6c>
10011664:	2144b03a 	or	r2,r4,r5
10011668:	11c4703a 	and	r2,r2,r7
1001166c:	10000f26 	beq	r2,zero,100116ac <memcmp+0x50>
10011670:	20800003 	ldbu	r2,0(r4)
10011674:	28c00003 	ldbu	r3,0(r5)
10011678:	10c0151e 	bne	r2,r3,100116d0 <memcmp+0x74>
1001167c:	31bfff84 	addi	r6,r6,-2
10011680:	01ffffc4 	movi	r7,-1
10011684:	00000406 	br	10011698 <memcmp+0x3c>
10011688:	20800003 	ldbu	r2,0(r4)
1001168c:	28c00003 	ldbu	r3,0(r5)
10011690:	31bfffc4 	addi	r6,r6,-1
10011694:	10c00e1e 	bne	r2,r3,100116d0 <memcmp+0x74>
10011698:	21000044 	addi	r4,r4,1
1001169c:	29400044 	addi	r5,r5,1
100116a0:	31fff91e 	bne	r6,r7,10011688 <__alt_data_end+0xf8011688>
100116a4:	0005883a 	mov	r2,zero
100116a8:	f800283a 	ret
100116ac:	20c00017 	ldw	r3,0(r4)
100116b0:	28800017 	ldw	r2,0(r5)
100116b4:	18bfee1e 	bne	r3,r2,10011670 <__alt_data_end+0xf8011670>
100116b8:	31bfff04 	addi	r6,r6,-4
100116bc:	21000104 	addi	r4,r4,4
100116c0:	29400104 	addi	r5,r5,4
100116c4:	39bff936 	bltu	r7,r6,100116ac <__alt_data_end+0xf80116ac>
100116c8:	303fe91e 	bne	r6,zero,10011670 <__alt_data_end+0xf8011670>
100116cc:	003ff506 	br	100116a4 <__alt_data_end+0xf80116a4>
100116d0:	10c5c83a 	sub	r2,r2,r3
100116d4:	f800283a 	ret

100116d8 <__register_exitproc>:
100116d8:	defffa04 	addi	sp,sp,-24
100116dc:	dc000315 	stw	r16,12(sp)
100116e0:	04040074 	movhi	r16,4097
100116e4:	840fb204 	addi	r16,r16,16072
100116e8:	80c00017 	ldw	r3,0(r16)
100116ec:	dc400415 	stw	r17,16(sp)
100116f0:	dfc00515 	stw	ra,20(sp)
100116f4:	18805217 	ldw	r2,328(r3)
100116f8:	2023883a 	mov	r17,r4
100116fc:	10003726 	beq	r2,zero,100117dc <__register_exitproc+0x104>
10011700:	10c00117 	ldw	r3,4(r2)
10011704:	010007c4 	movi	r4,31
10011708:	20c00e16 	blt	r4,r3,10011744 <__register_exitproc+0x6c>
1001170c:	1a000044 	addi	r8,r3,1
10011710:	8800221e 	bne	r17,zero,1001179c <__register_exitproc+0xc4>
10011714:	18c00084 	addi	r3,r3,2
10011718:	18c7883a 	add	r3,r3,r3
1001171c:	18c7883a 	add	r3,r3,r3
10011720:	12000115 	stw	r8,4(r2)
10011724:	10c7883a 	add	r3,r2,r3
10011728:	19400015 	stw	r5,0(r3)
1001172c:	0005883a 	mov	r2,zero
10011730:	dfc00517 	ldw	ra,20(sp)
10011734:	dc400417 	ldw	r17,16(sp)
10011738:	dc000317 	ldw	r16,12(sp)
1001173c:	dec00604 	addi	sp,sp,24
10011740:	f800283a 	ret
10011744:	00800034 	movhi	r2,0
10011748:	10800004 	addi	r2,r2,0
1001174c:	10002626 	beq	r2,zero,100117e8 <__register_exitproc+0x110>
10011750:	01006404 	movi	r4,400
10011754:	d9400015 	stw	r5,0(sp)
10011758:	d9800115 	stw	r6,4(sp)
1001175c:	d9c00215 	stw	r7,8(sp)
10011760:	00000000 	call	10000000 <__alt_mem_sdram>
10011764:	d9400017 	ldw	r5,0(sp)
10011768:	d9800117 	ldw	r6,4(sp)
1001176c:	d9c00217 	ldw	r7,8(sp)
10011770:	10001d26 	beq	r2,zero,100117e8 <__register_exitproc+0x110>
10011774:	81000017 	ldw	r4,0(r16)
10011778:	10000115 	stw	zero,4(r2)
1001177c:	02000044 	movi	r8,1
10011780:	22405217 	ldw	r9,328(r4)
10011784:	0007883a 	mov	r3,zero
10011788:	12400015 	stw	r9,0(r2)
1001178c:	20805215 	stw	r2,328(r4)
10011790:	10006215 	stw	zero,392(r2)
10011794:	10006315 	stw	zero,396(r2)
10011798:	883fde26 	beq	r17,zero,10011714 <__alt_data_end+0xf8011714>
1001179c:	18c9883a 	add	r4,r3,r3
100117a0:	2109883a 	add	r4,r4,r4
100117a4:	1109883a 	add	r4,r2,r4
100117a8:	21802215 	stw	r6,136(r4)
100117ac:	01800044 	movi	r6,1
100117b0:	12406217 	ldw	r9,392(r2)
100117b4:	30cc983a 	sll	r6,r6,r3
100117b8:	4992b03a 	or	r9,r9,r6
100117bc:	12406215 	stw	r9,392(r2)
100117c0:	21c04215 	stw	r7,264(r4)
100117c4:	01000084 	movi	r4,2
100117c8:	893fd21e 	bne	r17,r4,10011714 <__alt_data_end+0xf8011714>
100117cc:	11006317 	ldw	r4,396(r2)
100117d0:	218cb03a 	or	r6,r4,r6
100117d4:	11806315 	stw	r6,396(r2)
100117d8:	003fce06 	br	10011714 <__alt_data_end+0xf8011714>
100117dc:	18805304 	addi	r2,r3,332
100117e0:	18805215 	stw	r2,328(r3)
100117e4:	003fc606 	br	10011700 <__alt_data_end+0xf8011700>
100117e8:	00bfffc4 	movi	r2,-1
100117ec:	003fd006 	br	10011730 <__alt_data_end+0xf8011730>

100117f0 <__call_exitprocs>:
100117f0:	defff504 	addi	sp,sp,-44
100117f4:	df000915 	stw	fp,36(sp)
100117f8:	dd400615 	stw	r21,24(sp)
100117fc:	dc800315 	stw	r18,12(sp)
10011800:	dfc00a15 	stw	ra,40(sp)
10011804:	ddc00815 	stw	r23,32(sp)
10011808:	dd800715 	stw	r22,28(sp)
1001180c:	dd000515 	stw	r20,20(sp)
10011810:	dcc00415 	stw	r19,16(sp)
10011814:	dc400215 	stw	r17,8(sp)
10011818:	dc000115 	stw	r16,4(sp)
1001181c:	d9000015 	stw	r4,0(sp)
10011820:	2839883a 	mov	fp,r5
10011824:	04800044 	movi	r18,1
10011828:	057fffc4 	movi	r21,-1
1001182c:	00840074 	movhi	r2,4097
10011830:	108fb204 	addi	r2,r2,16072
10011834:	12000017 	ldw	r8,0(r2)
10011838:	45005217 	ldw	r20,328(r8)
1001183c:	44c05204 	addi	r19,r8,328
10011840:	a0001c26 	beq	r20,zero,100118b4 <__call_exitprocs+0xc4>
10011844:	a0800117 	ldw	r2,4(r20)
10011848:	15ffffc4 	addi	r23,r2,-1
1001184c:	b8000d16 	blt	r23,zero,10011884 <__call_exitprocs+0x94>
10011850:	14000044 	addi	r16,r2,1
10011854:	8421883a 	add	r16,r16,r16
10011858:	8421883a 	add	r16,r16,r16
1001185c:	84402004 	addi	r17,r16,128
10011860:	a463883a 	add	r17,r20,r17
10011864:	a421883a 	add	r16,r20,r16
10011868:	e0001e26 	beq	fp,zero,100118e4 <__call_exitprocs+0xf4>
1001186c:	80804017 	ldw	r2,256(r16)
10011870:	e0801c26 	beq	fp,r2,100118e4 <__call_exitprocs+0xf4>
10011874:	bdffffc4 	addi	r23,r23,-1
10011878:	843fff04 	addi	r16,r16,-4
1001187c:	8c7fff04 	addi	r17,r17,-4
10011880:	bd7ff91e 	bne	r23,r21,10011868 <__alt_data_end+0xf8011868>
10011884:	00800034 	movhi	r2,0
10011888:	10800004 	addi	r2,r2,0
1001188c:	10000926 	beq	r2,zero,100118b4 <__call_exitprocs+0xc4>
10011890:	a0800117 	ldw	r2,4(r20)
10011894:	1000301e 	bne	r2,zero,10011958 <__call_exitprocs+0x168>
10011898:	a0800017 	ldw	r2,0(r20)
1001189c:	10003226 	beq	r2,zero,10011968 <__call_exitprocs+0x178>
100118a0:	a009883a 	mov	r4,r20
100118a4:	98800015 	stw	r2,0(r19)
100118a8:	00000000 	call	10000000 <__alt_mem_sdram>
100118ac:	9d000017 	ldw	r20,0(r19)
100118b0:	a03fe41e 	bne	r20,zero,10011844 <__alt_data_end+0xf8011844>
100118b4:	dfc00a17 	ldw	ra,40(sp)
100118b8:	df000917 	ldw	fp,36(sp)
100118bc:	ddc00817 	ldw	r23,32(sp)
100118c0:	dd800717 	ldw	r22,28(sp)
100118c4:	dd400617 	ldw	r21,24(sp)
100118c8:	dd000517 	ldw	r20,20(sp)
100118cc:	dcc00417 	ldw	r19,16(sp)
100118d0:	dc800317 	ldw	r18,12(sp)
100118d4:	dc400217 	ldw	r17,8(sp)
100118d8:	dc000117 	ldw	r16,4(sp)
100118dc:	dec00b04 	addi	sp,sp,44
100118e0:	f800283a 	ret
100118e4:	a0800117 	ldw	r2,4(r20)
100118e8:	80c00017 	ldw	r3,0(r16)
100118ec:	10bfffc4 	addi	r2,r2,-1
100118f0:	15c01426 	beq	r2,r23,10011944 <__call_exitprocs+0x154>
100118f4:	80000015 	stw	zero,0(r16)
100118f8:	183fde26 	beq	r3,zero,10011874 <__alt_data_end+0xf8011874>
100118fc:	95c8983a 	sll	r4,r18,r23
10011900:	a0806217 	ldw	r2,392(r20)
10011904:	a5800117 	ldw	r22,4(r20)
10011908:	2084703a 	and	r2,r4,r2
1001190c:	10000b26 	beq	r2,zero,1001193c <__call_exitprocs+0x14c>
10011910:	a0806317 	ldw	r2,396(r20)
10011914:	2088703a 	and	r4,r4,r2
10011918:	20000c1e 	bne	r4,zero,1001194c <__call_exitprocs+0x15c>
1001191c:	89400017 	ldw	r5,0(r17)
10011920:	d9000017 	ldw	r4,0(sp)
10011924:	183ee83a 	callr	r3
10011928:	a0800117 	ldw	r2,4(r20)
1001192c:	15bfbf1e 	bne	r2,r22,1001182c <__alt_data_end+0xf801182c>
10011930:	98800017 	ldw	r2,0(r19)
10011934:	153fcf26 	beq	r2,r20,10011874 <__alt_data_end+0xf8011874>
10011938:	003fbc06 	br	1001182c <__alt_data_end+0xf801182c>
1001193c:	183ee83a 	callr	r3
10011940:	003ff906 	br	10011928 <__alt_data_end+0xf8011928>
10011944:	a5c00115 	stw	r23,4(r20)
10011948:	003feb06 	br	100118f8 <__alt_data_end+0xf80118f8>
1001194c:	89000017 	ldw	r4,0(r17)
10011950:	183ee83a 	callr	r3
10011954:	003ff406 	br	10011928 <__alt_data_end+0xf8011928>
10011958:	a0800017 	ldw	r2,0(r20)
1001195c:	a027883a 	mov	r19,r20
10011960:	1029883a 	mov	r20,r2
10011964:	003fb606 	br	10011840 <__alt_data_end+0xf8011840>
10011968:	0005883a 	mov	r2,zero
1001196c:	003ffb06 	br	1001195c <__alt_data_end+0xf801195c>

10011970 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10011970:	defffd04 	addi	sp,sp,-12
10011974:	df000215 	stw	fp,8(sp)
10011978:	df000204 	addi	fp,sp,8
1001197c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10011980:	0001883a 	nop
10011984:	e0bfff17 	ldw	r2,-4(fp)
10011988:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
1001198c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10011990:	10000226 	beq	r2,zero,1001199c <_exit+0x2c>
    ALT_SIM_FAIL();
10011994:	002af070 	cmpltui	zero,zero,43969
10011998:	00000106 	br	100119a0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
1001199c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
100119a0:	003fff06 	br	100119a0 <__alt_data_end+0xf80119a0>
