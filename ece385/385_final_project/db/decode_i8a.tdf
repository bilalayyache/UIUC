--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=6 LPM_WIDTH=3 data eq
--VERSION_BEGIN 16.1 cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_lpm_add_sub 2017:01:18:18:20:37:SJ cbx_lpm_compare 2017:01:18:18:20:37:SJ cbx_lpm_decode 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_nadder 2017:01:18:18:20:37:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Intel and sold by Intel or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.



--synthesis_resources = lut 8 
SUBDESIGN decode_i8a
( 
	data[2..0]	:	input;
	eq[5..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	eq_node[5..0]	: WIRE;
	eq_wire[7..0]	: WIRE;
	w_anode594w[3..0]	: WIRE;
	w_anode612w[3..0]	: WIRE;
	w_anode623w[3..0]	: WIRE;
	w_anode634w[3..0]	: WIRE;
	w_anode645w[3..0]	: WIRE;
	w_anode656w[3..0]	: WIRE;
	w_anode667w[3..0]	: WIRE;
	w_anode678w[3..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	eq[] = eq_node[];
	eq_node[5..0] = eq_wire[5..0];
	eq_wire[] = ( w_anode678w[3..3], w_anode667w[3..3], w_anode656w[3..3], w_anode645w[3..3], w_anode634w[3..3], w_anode623w[3..3], w_anode612w[3..3], w_anode594w[3..3]);
	w_anode594w[] = ( (w_anode594w[2..2] & (! data_wire[2..2])), (w_anode594w[1..1] & (! data_wire[1..1])), (w_anode594w[0..0] & (! data_wire[0..0])), B"1");
	w_anode612w[] = ( (w_anode612w[2..2] & (! data_wire[2..2])), (w_anode612w[1..1] & (! data_wire[1..1])), (w_anode612w[0..0] & data_wire[0..0]), B"1");
	w_anode623w[] = ( (w_anode623w[2..2] & (! data_wire[2..2])), (w_anode623w[1..1] & data_wire[1..1]), (w_anode623w[0..0] & (! data_wire[0..0])), B"1");
	w_anode634w[] = ( (w_anode634w[2..2] & (! data_wire[2..2])), (w_anode634w[1..1] & data_wire[1..1]), (w_anode634w[0..0] & data_wire[0..0]), B"1");
	w_anode645w[] = ( (w_anode645w[2..2] & data_wire[2..2]), (w_anode645w[1..1] & (! data_wire[1..1])), (w_anode645w[0..0] & (! data_wire[0..0])), B"1");
	w_anode656w[] = ( (w_anode656w[2..2] & data_wire[2..2]), (w_anode656w[1..1] & (! data_wire[1..1])), (w_anode656w[0..0] & data_wire[0..0]), B"1");
	w_anode667w[] = ( (w_anode667w[2..2] & data_wire[2..2]), (w_anode667w[1..1] & data_wire[1..1]), (w_anode667w[0..0] & (! data_wire[0..0])), B"1");
	w_anode678w[] = ( (w_anode678w[2..2] & data_wire[2..2]), (w_anode678w[1..1] & data_wire[1..1]), (w_anode678w[0..0] & data_wire[0..0]), B"1");
END;
--VALID FILE
