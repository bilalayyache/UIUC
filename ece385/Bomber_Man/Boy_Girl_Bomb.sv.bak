//-------------------------------------------------------------------------
//    Boy.sv                                                            --
//    Viral Mehta                                                        --
//    Spring 2005                                                        --
//                                                                       --
//    Modified by Stephen Kempf 03-01-2006                               --
//                              03-12-2007                               --
//    Translated by Joe Meng    07-07-2013                               --
//    Modified by Po-Han Huang  10-06-2017                               --
//    Fall 2017 Distribution                                             --
//                                                                       --
//    For use with ECE 385 Lab 8                                         --
//    UIUC ECE Department                                                --
//-------------------------------------------------------------------------


module Boy_Girl_Bomb( input      Clk,                // 50 MHz clock
                             Reset,              // Active-high reset signal
                             frame_clk,          // The clock indicating a new frame (~60Hz)
									
               input [9:0]   DrawX, DrawY,       // Current pixel coordinates
					input [7:0]   keycode,
					input  [4:0]  memory_map_in[16][20],
              // output logic  is_Boy             // Whether current pixel belongs to Boy or background
              	output   [4:0] memory_map  [16][20]
				  
				  );
				  
				  
enum logic [4:0] {Start0, Bback_1,Bback_2, Bback_sta, Bfront_1,Bfront_2, Bfront_sta, Bleft_1,Bleft_1_2, Bleft_1_sta, Bright_1,Bright_2, Bright_sta} State0, NextState0;

enum logic [4:0] {Start1, Gback, Gback_sta, Gfront, Gfront_sta, Gleft, Gleft_sta, Gright, Gright_sta} State1,  NextState1; 		  
    

	 
    parameter [4:0] Boy_X_Step=1;      // Step size on the X axis
    parameter  [4:0]Boy_Y_Step=1;      // Step size on the Y axis
	 
	 parameter [4:0] Girl_X_Step=1;      // Step size on the X axis
    parameter [4:0] Girl_Y_Step=1;      // Step size on the Y axis

    //logic [9:0] Boy_X_Pos, Boy_X_Motion, Boy_Y_Pos, Boy_Y_Motion;
    //logic [9:0] Boy_X_Pos_in, Boy_X_Motion_in, Boy_Y_Pos_in, Boy_Y_Motion_in;
    //*****************
	 
	 logic [4:0] Boy_X_Pos, Boy_Y_Pos, Boy_X_Pos_in, Boy_Y_Pos_in;
	 logic  [4:0] Boy_X_Motion,  Boy_Y_Motion,  Boy_X_Motion_in, Boy_Y_Motion_in;
	 
	 logic [4:0] Girl_X_Pos, Girl_Y_Pos, Girl_X_Pos_in, Girl_Y_Pos_in;
	 logic [4:0] Girl_X_Motion, Girl_Y_Motion, Girl_X_Motion_in, Girl_Y_Motion_in;

    
    //************Do not modify the always_ff blocks*****************
    // Detect rising edge of frame_clk
    logic frame_clk_delayed;
    logic frame_clk_rising_edge;
    always_ff @ (posedge Clk) begin
        frame_clk_delayed <= frame_clk;
    end
    assign frame_clk_rising_edge = (frame_clk == 1'b1) && (frame_clk_delayed == 1'b0);
	 
	 //*************************************************************
    // FSM for boy
	 
    always_ff @ (posedge Clk)
    begin
        if (Reset)
				begin
				Boy_X_Pos <= 1;
            Boy_Y_Pos <= 1;
            Boy_X_Motion <= 0;
            Boy_Y_Motion <= 0;
				 end   
		  
        else if (frame_clk_rising_edge)        // Update only at rising edge of frame clock
        begin
            Boy_X_Pos <= Boy_X_Pos_in;
            Boy_Y_Pos <= Boy_Y_Pos_in;
            Boy_X_Motion <= Boy_X_Motion_in;
            Boy_Y_Motion <= Boy_Y_Motion_in;
        end
        // By defualt, keep the register values.
    end
    
    // You need to modify always_comb block.
    always_comb
    begin
          

		 
        NextState0 = State0;
		  
		//*******************************NextState****************
			unique case(State0)
				Start0:
					case(keycode[7:0])			
					8'h1A://up
						NextState0 <= Bback_1;
					8'h16://down
						NextState0 <= Bfront_1;
					8'h04://left
						NextState0 <= Bleft_1;
					8'h07://right
						NextState0 <= Bright_1;
					default:
						NextState0 <= Start0;
						
					endcase
		//**********************************back**********************************				
				Bback_sta:
					case(keycode[7:0])			
					8'h1A://up
						if(memory_map[Boy_Y_Pos-1][Boy_X_Pos] == 1 || memory_map[Boy_Y_Pos-1][Boy_X_Pos] == 2 
						|| memory_map[Boy_Y_Pos-1][Boy_X_Pos] == 3 )
						NextState0 <= Bback_sta;
						else 
						NextState0 <= Bback_1;
						
					8'h16://down
						if(memory_map[Boy_Y_Pos+1][Boy_X_Pos] == 1 || memory_map[Boy_Y_Pos+1][Boy_X_Pos] == 2 
						|| memory_map[Boy_Y_Pos+1][Boy_X_Pos] == 3 )
						NextState0 <= Bfront_sta;
						else 
						NextState0 <= Bfront_1;

					8'h04://left
						if(memory_map[Boy_Y_Pos][Boy_X_Pos-1] == 1 || memory_map[Boy_Y_Pos][Boy_X_Pos-1] == 2 
						|| memory_map[Boy_Y_Pos][Boy_X_Pos-1] == 3 )
						NextState0 <= Bleft_1_sta;
						else 
						NextState0 <= Bleft_1;
						
					8'h07://right
						if(memory_map[Boy_Y_Pos][Boy_X_Pos+1] == 1 || memory_map[Boy_Y_Pos][Boy_X_Pos+1] == 2 
						|| memory_map[Boy_Y_Pos][Boy_X_Pos+1] == 3 )
						NextState0 <= Bright_sta;
						else 
						NextState0 <= Bright_1;	
					
					default: 
						NextState0 <= Bback_1;
					endcase
				
				Bback_1:
						NextState0 <= Bback_2;
				Bback_2:
						NextState0 <= Bback_sta;
						
		//********************************front***************************************************
				Bfront_sta:
					case(keycode[7:0])			
					8'h1A://up
						if(memory_map[Boy_Y_Pos-1][Boy_X_Pos] == 1 || memory_map[Boy_Y_Pos-1][Boy_X_Pos] == 2 
						|| memory_map[Boy_Y_Pos-1][Boy_X_Pos] == 3 )
						NextState0 <= Bback_sta;
						else 
						NextState0 <= Bback_1;
						
					8'h16://down
						if(memory_map[Boy_Y_Pos+1][Boy_X_Pos] == 1 || memory_map[Boy_Y_Pos+1][Boy_X_Pos] == 2 
						|| memory_map[Boy_Y_Pos+1][Boy_X_Pos] == 3 )
						NextState0 <= Bfront_sta;
						else 
						NextState0 <= Bfront_1;

					8'h04://left
						if(memory_map[Boy_Y_Pos][Boy_X_Pos-1] == 1 || memory_map[Boy_Y_Pos][Boy_X_Pos-1] == 2 
						|| memory_map[Boy_Y_Pos][Boy_X_Pos-1] == 3 )
						NextState0 <= Bleft_1_sta;
						else 
						NextState0 <= Bleft_1;
						
					8'h07://right
						if(memory_map[Boy_Y_Pos][Boy_X_Pos+1] == 1 || memory_map[Boy_Y_Pos][Boy_X_Pos+1] == 2 
						|| memory_map[Boy_Y_Pos][Boy_X_Pos+1] == 3 )
						NextState0 <= Bright_sta;
						else 
						NextState0 <= Bright_1;
					
					
					default: 
						NextState0 <= Bfront_sta;
					endcase
				
				Bfront_1:
						NextState0 <= Bfront_2;
				Bfront_2:
						NextState0 <= Bfront_sta;
		
			//*****************************************left***************************************		
				
				Bleft_1_sta:
					case(keycode[7:0])			
					8'h1A://up
						if(memory_map[Boy_Y_Pos-1][Boy_X_Pos] == 1 || memory_map[Boy_Y_Pos-1][Boy_X_Pos] == 2 
						|| memory_map[Boy_Y_Pos-1][Boy_X_Pos] == 3 )
						NextState0 <= Bback_sta;
						else 
						NextState0 <= Bback_1;
						
					8'h16://down
						if(memory_map[Boy_Y_Pos+1][Boy_X_Pos] == 1 || memory_map[Boy_Y_Pos+1][Boy_X_Pos] == 2 
						|| memory_map[Boy_Y_Pos+1][Boy_X_Pos] == 3 )
						NextState0 <= Bfront_sta;
						else 
						NextState0 <= Bfront_1;

					8'h04://left
						if(memory_map[Boy_Y_Pos][Boy_X_Pos-1] == 1 || memory_map[Boy_Y_Pos][Boy_X_Pos-1] == 2 
						|| memory_map[Boy_Y_Pos][Boy_X_Pos-1] == 3 )
						NextState0 <= Bleft_1_sta;
						else 
						NextState0 <= Bleft_1;
						
					8'h07://right
						if(memory_map[Boy_Y_Pos][Boy_X_Pos+1] == 1 || memory_map[Boy_Y_Pos][Boy_X_Pos+1] == 2 
						|| memory_map[Boy_Y_Pos][Boy_X_Pos+1] == 3 )
						NextState0 <= Bright_sta;
						else 
						NextState0 <= Bleft_1;				
					default: 
						NextState0 <= Bleft_1_sta;
					endcase
					
				Bleft_1:
						NextState0 <= Bleft_1_2;
				Bleft_1_2:
						NextState0 <= Bleft_1_sta;
				
			//*****************************************right*********************************************	
				Bright_sta:
					case(keycode[7:0])			
					8'h1A://up
						if(memory_map[Boy_Y_Pos-1][Boy_X_Pos] == 1 || memory_map[Boy_Y_Pos-1][Boy_X_Pos] == 2 
						|| memory_map[Boy_Y_Pos-1][Boy_X_Pos] == 3 )
						NextState0 <= Bback_sta;
						else 
						NextState0 <= Bback_1;
						
					8'h16://down
						if(memory_map[Boy_Y_Pos+1][Boy_X_Pos] == 1 || memory_map[Boy_Y_Pos+1][Boy_X_Pos] == 2 
						|| memory_map[Boy_Y_Pos+1][Boy_X_Pos] == 3 )
						NextState0 <= Bfront_sta;
						else 
						NextState0 <= Bfront_1;

					8'h04://left
						if(memory_map[Boy_Y_Pos][Boy_X_Pos-1] == 1 || memory_map[Boy_Y_Pos][Boy_X_Pos-1] == 2 
						|| memory_map[Boy_Y_Pos][Boy_X_Pos-1] == 3 )
						NextState0 <= Bleft_1_sta;
						else 
						NextState0 <= Bleft_1;
						
					8'h07://right
						if(memory_map[Boy_Y_Pos][Boy_X_Pos+1] == 1 || memory_map[Boy_Y_Pos][Boy_X_Pos+1] == 2 
						|| memory_map[Boy_Y_Pos][Boy_X_Pos+1] == 3 )
						NextState0 <= Bright_sta;
						else 
						NextState0 <= Bright_1;
					
					default: 
						NextState0 <= Bright_sta;
					endcase
					
				Bright_1:
						NextState0 <= Bright_2;
				Bright_2:
						NextState0 <= Bright_sta;
							
			endcase
					
	
    //********CurrentState**************
	 //!!!! update map !!!!
			case(State0)
			
				Start0:
					begin
				   Boy_X_Pos_in = 1;
               Boy_Y_Pos_in = 1;
               Boy_X_Motion_in = 0;
               Boy_Y_Motion_in = 0;
					end
				
				Bback_sta:
				   begin
				   Boy_X_Motion_in = 10'd0; //always clear first!
				   Boy_Y_Motion_in = 10'd0;
				   end
					
					Bback_1: //have leg
					begin
				   Boy_X_Motion_in = 10'd0; //always clear first!
				   Boy_Y_Motion_in = 10'd0;
					memory_map[Boy_Y_Pos][Boy_X_Pos] = 10;
					end
					
					Bback_2: //no leg
				   begin
					Boy_X_Motion_in = 10'd0; //always clear first!			
				   Boy_Y_Motion_in = ~(Boy_Y_Step) + 1'b1;
				  
					memory_map[Boy_Y_Pos][Boy_X_Pos] = 0;
					memory_map[Boy_Y_Pos-1][Boy_X_Pos] = 11;
				   end
					
				Bfront_sta:
				   begin
				   Boy_X_Motion_in = 10'd0; //always clear first!
				   Boy_Y_Motion_in = 10'd0;
				   end
					
				Bfront_1:
					begin
				   Boy_X_Motion_in = 10'd0; //always clear first!
					Boy_Y_Motion_in = 10'd0;	
					memory_map[Boy_Y_Pos][Boy_X_Pos] = 12;  
					end
					
				Bfront_2:
					begin
				   Boy_X_Motion_in = 10'd0; //always clear first!			
				   Boy_Y_Motion_in = Boy_Y_Step;
				   memory_map[Boy_Y_Pos][Boy_X_Pos] = 0;
					memory_map[Boy_Y_Pos+1][Boy_X_Pos] = 13;
					end
					
				Bleft_1_sta:
				   begin
				   Boy_X_Motion_in = 10'd0; //always clear first!
				   Boy_Y_Motion_in = 10'd0;
				   end
					
				Bleft_1:
					begin
				   Boy_X_Motion_in = 10'd0; //always clear first!			
				   Boy_Y_Motion_in = 10'd0;
					memory_map[Boy_Y_Pos][Boy_X_Pos] = 14;
					end
				
				Bleft_1_2:
					begin
				   Boy_X_Motion_in = ~Boy_X_Step+1'b1; //always clear first!			
				   Boy_Y_Motion_in = 10'd0;
				   memory_map[Boy_Y_Pos][Boy_X_Pos-1] = 15;
					memory_map[Boy_Y_Pos][Boy_X_Pos] = 0;
					end	
					
				Bright_sta:
				   begin
				   Boy_X_Motion_in = 10'd0; //always clear first!
				   Boy_Y_Motion_in = 10'd0;
				   end
					
				Bright_1:
					begin
				   Boy_X_Motion_in = 10'd0; //always clear first!			
				   Boy_Y_Motion_in = 10'd0;
				   memory_map[Boy_Y_Pos][Boy_X_Pos] = 16;
					end
				
				Bright_2:
					begin
				   Boy_X_Motion_in = Boy_X_Step; //always clear first!			
				   Boy_Y_Motion_in = 10'd0;
				   memory_map[Boy_Y_Pos][Boy_X_Pos+1] = 17;
					memory_map[Boy_Y_Pos][Boy_X_Pos] = 0;
					end	
					
				default:;				
			 endcase	
		 
		 
//		 // Default keep motion unchanged
//		  Ball_X_Motion_in = Ball_X_Motion;
//        Ball_Y_Motion_in = Ball_Y_Motion;
		 // Update the Boy's position with its motion
		 
		 
		  Boy_X_Pos_in = Boy_X_Pos + Boy_X_Motion;
        Boy_Y_Pos_in = Boy_Y_Pos + Boy_Y_Motion; 
		  
		end
		
			  
        
		 // Update the Boy's position with its motion
        //Boy_X_Pos_in = Boy_X_Pos + Boy_X_Motion;
        //Boy_Y_Pos_in = Boy_Y_Pos + Boy_Y_Motion; 
		  

        //***************************************************************************************************
		  //**********************************************FSM for girl****************************************
		  //***************************************************************************************************
		  
		  
		  
		  

    
    
endmodule
