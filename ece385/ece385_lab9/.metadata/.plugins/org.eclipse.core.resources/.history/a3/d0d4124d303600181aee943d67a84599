/************************************************************************
Lab 9 Nios Software

Dong Kai Wang, Fall 2017
Christine Chen, Fall 2013

For use with ECE 385 Experiment 9
University of Illinois ECE Department
************************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include "aes.h"

// Pointer to base address of AES module, make sure it matches Qsys
volatile unsigned int * AES_PTR = (unsigned int *) 0x00000040;

// Execution mode: 0 for testing, 1 for benchmarking
int run_mode = 0;

/** charToHex
 *  Convert a single character to the 4-bit value it represents.
 *  
 *  Input: a character c (e.g. 'A')
 *  Output: converted 4-bit value (e.g. 0xA)
 */
char charToHex(char c)
{
	char hex = c;

	if (hex >= '0' && hex <= '9')
		hex -= '0';
	else if (hex >= 'A' && hex <= 'F')
	{
		hex -= 'A';
		hex += 10;
	}
	else if (hex >= 'a' && hex <= 'f')
	{
		hex -= 'a';
		hex += 10;
	}
	return hex;
}

/** charsToHex
 *  Convert two characters to byte value it represents.
 *  Inputs must be 0-9, A-F, or a-f.
 *  
 *  Input: two characters c1 and c2 (e.g. 'A' and '7')
 *  Output: converted byte value (e.g. 0xA7)
 */
char charsToHex(char c1, char c2)
{
	char hex1 = charToHex(c1);
	char hex2 = charToHex(c2);
	char retval = (hex1 << 4) + hex2;
	return retval;
}

// this function is used in KeyExpansion
// Rotate Word by 1 byte
uint RotWord(uint word)
{
	uint temp = word >> 24;
	return temp + (word << 8);
}





// this function is used in KeyExpansion
// Substitute 2 byte by using the SBOX
uint SubWord(uint word)
{
	int i;
	uint retval = 0x00000000;
	for (i = 0; i < 4; i++){
		uint temp = word >> (24-8*i);
		int x = temp & 0x000000f0;
		x = x >> 4;
		int y = temp & 0x0000000f;
		retval += (aes_sbox[x*16+y]) << (24-8*i);
	}
	return retval;
}


//uchar is unsigned char
// this function takes a cipher key (a 4*4 matrix), a keySchdule (4*44 matrix) and a round
// if round is 0, we need to copy the content from key to keySchedule
// if round is not 0, we need to generate keySchedule by the previous key we got
void KeyExpansion(uint* key, uint* keySchedule)
{
	int i, j, column;
	uint temp, prev;
	// first, add key to the keySchedule
	for (i = 0; i < 4; i++){
	    keySchedule[i] = key[i];
	}

	// for the next 4*10 words, generate each word by the previous words
	column = 4;
	while (column < 4*11){
		temp = keySchedule[column-1];

		prev = keySchedule[column-4];

		if (column%4 == 0){
			temp = RotWord(temp);
			temp = SubWord(temp);
			temp ^= Rcon[column/4];
		}
		temp = temp ^ prev;
		keySchedule[column] = temp;
		column++;
	}
}

// helper function
// input uint* A: uint A[4], 4 bytes * 4
// input uchar* B, uchar B[16], 1 byte * 16
void uintTouchar(uint* A, uchar* B)
{
    int i, j;
    for (i = 0; i < 4; i++){
        for (j = 0; j < 4; j++){
            B[i*4+j] = A[i] >> (24-8*j);
            B[i*4+j] &= 0x000000ff;
        }
    }
}

// helper function
// input uint* A: uint A[4], 4 bytes * 4
// input uchar* B, uchar B[16], 1 byte * 16
void ucharTouint(uint* A, uchar* B)
{
    int i;
    for (i = 0; i < 4; i++){
        A[i] = (B[4*i] << 24) + (B[4*i+1] << 16) + (B[4*i+2] << 8) + B[4*i+3];
    }
}

// function AddRoundKey
void AddRoundKey(uint* msg, uint* keySchedule, int index)
{
    int i;
    for (i = 0; i < 4; i++){
        msg[i] ^= keySchedule[4*index+i];
    }
}

// function ShiftRows
// input: uint* msg ==> msg[4]
void ShiftRows(uint* msg)
{
    uchar temp[16];
    uintTouchar(msg, temp);
    // do shift to row 1
    uchar inter;
    inter = temp[1]; temp[1] = temp[5]; temp[5] = temp[9]; temp[9] = temp[13]; temp[13] = inter;
    // do shift to row 2
    inter = temp[2]; temp[2] = temp[10]; temp[10] = inter; inter = temp[6]; temp[6] = temp[14]; temp[14] = inter;
    // do shift to row 3
    inter = temp[15]; temp[15] = temp[11]; temp[11] = temp[7]; temp[7] = temp[3]; temp[3] = inter;
    // send the temp to msg
    ucharTouint(msg, temp);
}

// helper function for MixColumns
uchar lookupgf(uchar input, char c)
{
    int x = input & 0x000000f0;
	x = x >> 4;
	int y = input & 0x0000000f;
	if (c == '2')
	    return gf_mul[x*16+y][0];
	else if (c == '3')
	    return gf_mul[x*16+y][1];
	else if (c == '9')
	    return gf_mul[x*16+y][2];
	else if (c == 'b')
	    return gf_mul[x*16+y][3];
	else if (c == 'd')
	    return gf_mul[x*16+y][4];
	else
	    return gf_mul[x*16+y][5];
}

// function MixColumns
void MixColumns(uint* msg)
{
    uchar temp[16], retval[16];
    uintTouchar(msg, temp);
    int i;
    for (i = 0; i < 4; i++){
        retval[4*i] = lookupgf(temp[4*i], '2') ^ lookupgf(temp[4*i+1], '3') ^ temp[4*i+2] ^ temp[4*i+3];
        retval[4*i+1] = temp[4*i] ^ lookupgf(temp[4*i+1], '2') ^ lookupgf(temp[4*i+2], '3') ^ temp[4*i+3];
        retval[4*i+2] = temp[4*i] ^ temp[4*i+1] ^ lookupgf(temp[4*i+2], '2') ^ lookupgf(temp[4*i+3], '3');
        retval[4*i+3] = lookupgf(temp[4*i], '3') ^ temp[4*i+1] ^ temp[4*i+2] ^ lookupgf(temp[4*i+3], '2');
    }
    // at last, give the retval back to msg
    ucharTouint(msg, retval);
}

void encrypt(unsigned char * msg_ascii, unsigned char * key_ascii, unsigned int * msg_enc, unsigned int * key)
{
	// Implement this function
	// first, we need to setup the keySchedule by keyExpension function
	int i, index;
	uint keySchedule[4*11+1], msg[4];
	uchar key_temp[17], msg_temp[17];
	for (i = 0; i < 16; i++){
	        key_temp[i] = charsToHex(key_ascii[2*i], key_ascii[2*i+1]);
	        msg_temp[i] = charsToHex(msg_ascii[2*i], msg_ascii[2*i+1]);
	}
	key_temp[16] = '\0';
	msg_temp[16] = '\0';
	ucharTouint(key, key_temp);
	// ucharTouint(msg_enc, msg_temp);
	ucharTouint(msg, msg_temp);
	KeyExpansion(key, keySchedule);
	keySchedule[44] = '\0';
	index = 0;
	// first, we nned to do one AddRoundKey
	// AddRoundKey(msg_enc, keySchedule, index);
	AddRoundKey(msg, keySchedule, index);

	for (index = 1; index < 10; index++){
	    // for the next 9 cycles, we do the following four functions
	    msg[0] = SubWord(msg[0]);
	    msg[1] = SubWord(msg[1]);
	    msg[2] = SubWord(msg[2]);
	    msg[3] = SubWord(msg[3]);
	    ShiftRows(msg);
	    MixColumns(msg);
	    AddRoundKey(msg, keySchedule, index);
	}
	// for the last cycle, we only have three functions
	msg[0] = SubWord(msg[0]);
	msg[1] = SubWord(msg[1]);
	msg[2] = SubWord(msg[2]);
	msg[3] = SubWord(msg[3]);
	ShiftRows(msg);
	AddRoundKey(msg, keySchedule, index);
	// assign msg back to msg_enc
	for (i = 0; i < 4; i++)
		msg_enc[i] = msg[i];

}

/** decrypt
 *  Perform AES decryption in hardware.
 *
 *  Input:  msg_enc - Pointer to 4x 32-bit int array that contains the encrypted message
 *              key - Pointer to 4x 32-bit int array that contains the input key
 *  Output: msg_dec - Pointer to 4x 32-bit int array that contains the decrypted message
 */
void decrypt(unsigned int * msg_enc, unsigned int * msg_dec, unsigned int * key)
{
	// Implement this function
	// connect hardware and software
	AES_PTR[0] = key[0];
	AES_PTR[1] = key[1];
	AES_PTR[2] = key[2];
	AES_PTR[3] = key[3];
	AES_PTR[4] = msg_enc[0];
	AES_PTR[5] = msg_enc[1];
	AES_PTR[6] = msg_enc[2];
	AES_PTR[7] = msg_enc[3];
	AES_PTR[14] = 1;
	AES_PTR[8] = msg_dec[0];
	AES_PTR[9] = msg_dec[1];
	AES_PTR[10] = msg_dec[2];
	AES_PTR[11] = msg_dec[3];

}

/** main
 *  Allows the user to enter the message, key, and select execution mode
 *
 */
int main()
{
	// Input Message and Key as 32x 8-bit ASCII Characters ([33] is for NULL terminator)
	unsigned char msg_ascii[33];
	unsigned char key_ascii[33];
	// Key, Encrypted Message, and Decrypted Message in 4x 32-bit Format to facilitate Read/Write to Hardware
	unsigned int key[4];
	unsigned int msg_enc[4];
	unsigned int msg_dec[4];

	printf("Select execution mode: 0 for testing, 1 for benchmarking: ");
	scanf("%d", &run_mode);

	if (run_mode == 0) {
		// Continuously Perform Encryption and Decryption
		while (1) {
			int i = 0;
			printf("\nEnter Message:\n");
			scanf("%s", msg_ascii);
			printf("\n");
			printf("\nEnter Key:\n");
			scanf("%s", key_ascii);
			printf("\n");
			encrypt(msg_ascii, key_ascii, msg_enc, key);
			printf("\nEncrpted message is: \n");
			for(i = 0; i < 4; i++){
				printf("%08x", msg_enc[i]);
			}
			printf("\n");
			decrypt(msg_enc, msg_dec, key);
			printf("\nDecrypted message is: \n");
			for(i = 0; i < 4; i++){
				printf("%08x", msg_dec[i]);
			}
			printf("\n");
		}
	}
	else {
		// Run the Benchmark
		int i = 0;
		int size_KB = 2;
		// Choose a random Plaintext and Key
		for (i = 0; i < 32; i++) {
			msg_ascii[i] = 'a';
			key_ascii[i] = 'b';
		}
		// Run Encryption
		clock_t begin = clock();
		for (i = 0; i < size_KB * 64; i++)
			encrypt(msg_ascii, key_ascii, msg_enc, key);
		clock_t end = clock();
		double time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
		double speed = size_KB / time_spent;
		printf("Software Encryption Speed: %f KB/s \n", speed);
		// Run Decryption
		begin = clock();
		for (i = 0; i < size_KB * 64; i++)
			decrypt(msg_enc, msg_dec, key);
		end = clock();
		time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
		speed = size_KB / time_spent;
		printf("Hardware Decryption Speed: %f KB/s \n", speed);
	}
	return 0;
}
